{
  "data": {
    "id": 566,
    "exerciseKey": "18682a73-0c4e-4859-96fd-2a6fde7587b7",
    "category": "QA",
    "renderType": "md",
    "title": "ES6中的 Reflect 对象有什么用？",
    "desc": null,
    "options": null,
    "explanation": "Reflect 对象不是构造函数，所以创建时不是用 new 来进行创建。\n\n在 ES6 中增加这个对象的目的：\n\n- 将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。现阶段，某些方法同时在 Object 和 Reflect 对象上部署，未来的新方法将只部署在 Reflect 对象上。也就是说，从 Reflect 对象上可以拿到语言内部的方法。\n- 修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。\n- 让 Object 操作都变成函数行为。某些 Object 操作是命令式，比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为。\n- Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。\n\n```javascript\nvar loggedObj = new Proxy(obj, {\n  get(target, name) {\n    console.log(\"get\", target, name);\n    return Reflect.get(target, name);\n  },\n  deleteProperty(target, name) {\n    console.log(\"delete\" + name);\n    return Reflect.deleteProperty(target, name);\n  },\n  has(target, name) {\n    console.log(\"has\" + name);\n    return Reflect.has(target, name);\n  },\n});\n\n```\n\n上面代码中，每一个 Proxy 对象的拦截操作（get、delete、has），内部都调用对应的 Reflect 方法，保证原生行为能够正常执行。添加的工作，就是将每一个操作输出一行日志。\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2021-07-31T13:45:11.000Z",
    "updateAt": "2024-08-10T17:05:36.000Z",
    "isCollected": false,
    "currentIndex": 934,
    "filterTotalNum": 1487,
    "prev": "a493193e-48ff-4e9e-9e66-0bf55732db63",
    "next": "246fb719-7819-481e-943d-480a219e29b4"
  },
  "post": {
    "exerciseKey": "18682a73-0c4e-4859-96fd-2a6fde7587b7",
    "category": "QA",
    "title": "ES6中的 Reflect 对象有什么用？",
    "level": 3,
    "createAt": "2021-07-31T13:45:11+00:00",
    "updateAt": "2024-08-10T17:05:36+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}