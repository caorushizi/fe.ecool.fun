{
  "data": {
    "id": 2587,
    "exerciseKey": "c1505892-4928-41b4-bbd1-e83be2f53ff2",
    "category": "QA",
    "renderType": "md",
    "title": "了解语义化版本 SemVer（Semantic Versioning）吗？",
    "desc": "",
    "options": "",
    "explanation": "Semantic Versioning（语义化版本控制）是一种版本控制规范，旨在帮助开发者清晰地表达软件版本之间的变化，并确保版本更新对用户的影响可预见和可管理。SemVer 的核心在于使用三段式版本号：`MAJOR.MINOR.PATCH`。\n\n### **版本号结构**\n\n1. **MAJOR**（主版本号）\n   - **变更**：当你做了不兼容的 API 修改时。\n   - **示例**：`2.0.0`，`3.0.0`\n\n2. **MINOR**（次版本号）\n   - **变更**：当你在不破坏向后兼容的情况下添加功能时。\n   - **示例**：`1.1.0`，`1.2.0`\n\n3. **PATCH**（修订号）\n   - **变更**：当你做了向后兼容的问题修复时。\n   - **示例**：`1.0.1`，`1.0.2`\n\n### **版本号附加信息**\n\n- **预发布版本**：用 `-` 后缀来标识预发布阶段版本，比如 `1.0.0-alpha.1`。\n- **构建元数据**：用 `+` 后缀来附加构建信息，比如 `1.0.0+20130313144700`。\n\n### **遵循 SemVer 的好处**\n\n- **清晰的变化记录**：通过主版本号、次版本号和修订号，开发者可以迅速了解软件的变化程度。\n- **向后兼容性**：明确声明了变更的兼容性，用户可以根据版本号来判断更新的影响。\n- **可靠的版本管理**：通过预发布和构建元数据，提供了更多版本管理的灵活性和信息。\n\n### **版本更新**\n\n在升级版本时，常常使用一些符号来指定允许升级的范围，其中包括 ^ 和 ~ 等。\n\n- ^ 表示向后兼容地升级版本号，只允许升级到次版本号或修订版本号，不允许升级到主版本号。\n- ~ 表示只允许升级到修订版本号，不允许升级到次版本号或主版本号。\n\n例如，对于版本号为 1.2.3：\n\n- ^1.2.3 允许升级到 1.2.4、1.3.0 等修订号或次版号的版本，但不允许升级到 2.0.0。\n- ~1.2.3 只允许升级到 1.2.4、1.2.5 等修订版本号的版本，但不允许升级到 1.3.0、2.0.0 等更高的版本。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T19:00:12.000Z",
    "isCollected": false,
    "currentIndex": 141,
    "filterTotalNum": 1487,
    "prev": "0568e8ee-d540-4b5a-bb66-7ed7add20e41",
    "next": "4b69ba73-7add-4fbe-9aa3-615541823ac6"
  },
  "post": {
    "exerciseKey": "c1505892-4928-41b4-bbd1-e83be2f53ff2",
    "category": "QA",
    "title": "了解语义化版本 SemVer（Semantic Versioning）吗？",
    "level": 2,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T19:00:12+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 33
  }
}