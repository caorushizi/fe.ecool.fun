{
  "data": {
    "id": 565,
    "exerciseKey": "246fb719-7819-481e-943d-480a219e29b4",
    "category": "QA",
    "renderType": "md",
    "title": "什么是尾调用优化和尾递归？",
    "desc": null,
    "options": null,
    "explanation": "## 什么是尾调用？\n\n尾调用的概念非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。\n\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。\n\n以下两种情况，都不属于尾调用。\n\n```javascript\n// 情况一\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 情况二\nfunction f(x){\n  return g(x) + 1;\n}\n```\n\n上面代码中，情况一是调用函数g之后，还有别的操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。\n\n尾调用不一定出现在函数尾部，只要是最后一步操作即可。\n\n```\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n```\n\n上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。\n\n## 尾调用优化\n\n尾调用之所以与其他调用不同，就在于它的特殊的调用位置。\n\n我们知道，函数调用会在内存形成一个\"调用记录\"，又称\"调用帧\"（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈，以此类推。所有的调用记录，就形成一个\"调用栈\"（call stack）。\n\n尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。\n\n```javascript\nfunction f() {\n  let m = 1;\n  let n = 2;\n  return g(m + n);\n}\nf();\n\n// 等同于\nfunction f() {\n  return g(3);\n}\nf();\n\n// 等同于\ng(3);\n```\n\n上面代码中，如果函数g不是尾调用，函数f就需要保存内部变量m和n的值、g的调用位置等信息。但由于调用g之后，函数f就结束了，所以执行到最后一步，完全可以删除 f() 的调用记录，只保留 g(3) 的调用记录。\n\n这就叫做\"尾调用优化\"（Tail call optimization），即只保留内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。这就是\"尾调用优化\"的意义。\n\n## 尾递归\n\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生\"栈溢出\"错误（stack overflow）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误。\n\n```javascript\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n```\n\n上面代码是一个阶乘函数，计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) 。\n\n如果改写成尾递归，只保留一个调用记录，复杂度 O(1) 。\n\n```javascript\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5, 1) // 120\n```\n\n\"尾调用优化\"对递归操作意义重大，所以一些函数式编程语言将其写入了语言规格。ES6也是如此，第一次明确规定，所有 ECMAScript 的实现，都必须部署\"尾调用优化\"。这就是说，在 ES6 中，只要使用尾递归，就不会发生栈溢出，相对节省内存。\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-31T11:59:59.000Z",
    "updateAt": "2021-08-01T15:35:05.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 805,
    "prev": "18682a73-0c4e-4859-96fd-2a6fde7587b7",
    "next": "c188ea2f-8882-413c-af52-3ccce36f35cf"
  },
  "post": {
    "exerciseKey": "246fb719-7819-481e-943d-480a219e29b4",
    "category": "QA",
    "title": "什么是尾调用优化和尾递归？",
    "level": 2,
    "updateAt": "2021-08-01T15:35:05+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
