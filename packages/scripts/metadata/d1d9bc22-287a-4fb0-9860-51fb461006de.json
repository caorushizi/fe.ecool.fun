{
  "data": {
    "id": 562,
    "exerciseKey": "d1d9bc22-287a-4fb0-9860-51fb461006de",
    "category": "QA",
    "renderType": "md",
    "title": "forEach 中能否使用 await ？",
    "desc": null,
    "options": null,
    "explanation": "```javascript\nfunction test() {\n  let arr = [3, 2, 1];\n  arr.forEach(async (item) => {\n    const res = await fetch(item);\n    console.log(res);\n  });\n  console.log(\"end\");\n}\n\nfunction fetch(x) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 500 * x);\n  });\n}\n\ntest();\n```\n\n上面代码的输出结果是：\n\n```javascript\nend\n1\n2\n3\n```\n\n## 为什么\n\n其实原因很简单，那就是 forEach 只支持同步代码。\n\n我们可以参考下 Polyfill 版本的 forEach，简化以后类似就是这样的伪代码\n\n```javascript\nwhile (index < arr.length) {\n\tcallback(item, index)   //也就是我们传入的回调函数\n}\n```\n\n从上述代码中我们可以发现，forEach 只是简单的执行了下回调函数而已，并不会去处理异步的情况。 并且即使你在 callback 中使用 break 也并不能结束遍历。\n\n## 怎么解决\n\n一般来说解决的办法有2种：\n\n* for...of\n\n因为 for...of 内部处理的机制和 forEach 不同，forEach 是直接调用回调函数，for...of 是通过迭代器的方式去遍历。\n\n```javascript\nasync function test() {\n  let arr = [3, 2, 1];\n  for (const item of arr) {\n    const res = await fetch(item);\n    console.log(res);\n  }\n  console.log(\"end\");\n}\n```\n\n* for循环\n\n```javascript\nasync function test() {\n  let arr = [3, 2, 1];\n  for (var i = 0; i < arr.length; i++) {\n    const res = await fetch(arr[i]);\n    console.log(res);\n  }\n  console.log(\"end\");\n}\n\nfunction fetch(x) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 500 * x);\n  });\n}\n\ntest();\n```\n\n\n\n\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2021-07-31T09:15:48.000Z",
    "updateAt": "2024-08-10T17:05:34.000Z",
    "isCollected": false,
    "currentIndex": 938,
    "filterTotalNum": 1487,
    "prev": "83b73455-d22c-43ac-844d-d92c5ac6b662",
    "next": "ee457290-82ef-4c2b-b2f1-e6b1b28e9166"
  },
  "post": {
    "exerciseKey": "d1d9bc22-287a-4fb0-9860-51fb461006de",
    "category": "QA",
    "title": "forEach 中能否使用 await ？",
    "level": 3,
    "createAt": "2021-07-31T09:15:48+00:00",
    "updateAt": "2024-08-10T17:05:34+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}