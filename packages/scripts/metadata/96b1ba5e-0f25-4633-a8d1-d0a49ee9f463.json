{
  "data": {
    "id": 2001,
    "exerciseKey": "96b1ba5e-0f25-4633-a8d1-d0a49ee9f463",
    "category": "QA",
    "renderType": "md",
    "title": "Koa 中，如果一个中间件没有调用 await next()，后续的中间件还会执行吗？",
    "desc": null,
    "options": null,
    "explanation": "如果一个中间件没有调用 `await next()`，那么后续的中间件将不会执行。\n\n这是因为当一个中间件函数执行完成并且没有调用 `await next()` 时，它不会将控制权交给下一个中间件，而是直接返回或抛出异常。\n\n在 `Koa` 中，中间件函数通常会使用 `await next()` 语句来调用下一个中间件函数，并等待下一个中间件执行完毕并返回结果后再执行自己的逻辑。如果一个中间件没有调用 `await next()`，那么下一个中间件就不会被执行，当前中间件也不能得到后续中间件的处理结果，从而可能导致请求无法得到正确的响应或者程序出现错误。\n\n因此，在编写中间件函数时，需要确保在遇到需要交给下一个中间件处理的情况下，要及时调用 `await next()` 来将控制权转交给下一个中间件，以保证整个请求处理流程的正常进行。\n\n例如，一个检测用户权限的 middleware 可以决定是否继续处理请求，还是直接返回403错误：\n\n```js\napp.use(async (ctx, next) => {\n    if (await checkUserPermission(ctx)) {\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-26T01:43:29.000Z",
    "updateAt": "2023-07-08T15:59:31.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 307,
    "prev": "4adc7ac9-1770-42b1-b6c2-375b8907dc0a",
    "next": "5c91b3fc-775e-4782-a262-7684487d5196"
  },
  "post": {
    "exerciseKey": "96b1ba5e-0f25-4633-a8d1-d0a49ee9f463",
    "category": "QA",
    "title": "Koa 中，如果一个中间件没有调用 await next()，后续的中间件还会执行吗？",
    "level": 2,
    "updateAt": "2023-07-08T15:59:31+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}