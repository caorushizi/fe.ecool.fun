{
  "data": {
    "id": 116,
    "exerciseKey": "3bd8f12b-0050-4323-869c-4b63d7820276",
    "category": "Choice",
    "renderType": "md",
    "title": "输出什么?",
    "desc": "```javascript\nlet name = 'Lydia'\n\nfunction getName() {\n  console.log(name)\n  let name = 'Sarah'\n}\n\ngetName()\n```",
    "options": "{\"options\":[\"Lydia\",\"Sarah\",\"undefined\",\"ReferenceError\"],\"isMulti\":false,\"answer\":[3]}",
    "explanation": "每个函数都有其自己的执行上下文。 `getName`函数首先在其自身的上下文（范围）内查找，以查看其是否包含我们尝试访问的变量`name`。 上述情况，`getName`函数包含其自己的`name`变量：我们用`let`关键字和`Sarah`的值声明变量`name`。\n带有`let`关键字（和`const`）的变量被提升，但是与`var`不同，它不会被***初始化***。 在我们声明（初始化）它们之前，无法访问它们。 这称为“暂时性死区”。 当我们尝试在声明变量之前访问变量时，JavaScript会抛出`ReferenceError: Cannot access 'name' before initialization`。\n如果我们不在`getName`函数中声明`name`变量，则javascript引擎会查看原型链。会找到其外部作用域有一个名为`name`的变量，其值为`Lydia`。 在这种情况下，它将打印`Lydia`：\n```javascript\nlet name = 'Lydia'\nfunction getName() {\n  console.log(name)\n}\ngetName() // Lydia\n```",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-02T15:33:04.000Z",
    "updateAt": "2021-07-03T22:29:46.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 1096,
    "prev": "d73bb354-253c-4832-80e1-0aa525bc7dc9",
    "next": "696b2f96-57aa-49cc-9305-4d336e8365ef"
  },
  "post": {
    "exerciseKey": "3bd8f12b-0050-4323-869c-4b63d7820276",
    "category": "Choice",
    "title": "输出什么?",
    "level": 1,
    "updateAt": "2021-07-03T22:29:46+00:00"
  },
  "tag": {
    "id": 32,
    "tagName": "选择题",
    "type": "1",
    "exerciseCount": 151
  }
}