{
  "data": {
    "id": 2545,
    "exerciseKey": "a6cca09a-fca9-4b32-b9f7-56f668a56ca3",
    "category": "QA",
    "renderType": "md",
    "title": "base64 的编码原理是什么？",
    "desc": "",
    "options": "",
    "explanation": "Base64 是一种编码方法，用于将二进制数据（如图像、音频、文件等）编码为 ASCII 字符串。这种编码方式将数据转换为一组可打印字符，通常用于在需要文本数据的环境中传输二进制数据，例如在电子邮件、JSON 数据、XML 数据等场景中。Base64 编码原理如下：\n\n### **1. 编码过程**\n\n#### **1.1 数据分组**\n\n- Base64 编码将输入数据按每 3 个字节（24 位）一组进行分组。\n- 每个 3 字节的数据块由 24 位二进制数据组成，相当于 3 * 8 = 24 位。\n\n#### **1.2 分割与映射**\n\n- 将这 24 位的二进制数据分成 4 组，每组 6 位。即：24 位 / 6 位 = 4 组。\n- 每组 6 位的二进制数据被映射到一个 Base64 字符集中的字符。Base64 字符集共有 64 个字符，这些字符包括：\n  - 大写字母：A-Z\n  - 小写字母：a-z\n  - 数字：0-9\n  - 特殊字符：`+` 和 `/`\n\n  例如，字符集的第一个字符是 'A'，它代表 6 位二进制数 `000000`，字符集的最后一个字符是 '/'，它代表 6 位二进制数 `111111`。\n\n#### **1.3 填充**\n\n- 如果输入数据的字节数不是 3 的倍数，Base64 编码会在编码的结果末尾添加 `=` 作为填充符号，以保证编码后的字符数是 4 的倍数。\n- `=` 表示填充的字节数：\n  - 一个 `=` 表示编码过程中缺少 1 个字节。\n  - 两个 `=` 表示编码过程中缺少 2 个字节。\n\n### **2. 解码过程**\n\n解码过程是编码过程的反向操作：\n\n#### **2.1 反向映射**\n\n- 将 Base64 字符串中的每个字符映射回 6 位的二进制数据。\n- 使用 Base64 字符集的索引将字符转换为 6 位的二进制数。\n\n#### **2.2 合并与分组**\n\n- 将所有 6 位的二进制数据重新组合为 24 位的二进制数据块。\n- 将 24 位数据块拆分为 3 个字节（24 位 / 8 位 = 3 字节）。\n\n#### **2.3 去除填充**\n\n- 移除解码过程中添加的填充符号 `=`，恢复原始数据的字节。\n\n### **示例**\n\n#### **编码示例**\n\n将字符串 \"hello\" 编码为 Base64：\n\n1. **转换为二进制**：\n   - `h` = `01101000`\n   - `e` = `01100101`\n   - `l` = `01101100`\n   - `l` = `01101100`\n   - `o` = `01101111`\n\n   合并为：`01101000 01100101 01101100 01101100 01101111`\n\n2. **分组**：\n   - 24 位块 1：`01101000 01100101 01101100`（`011010`、`000110`、`010101`、`101100`）\n   - 24 位块 2：`01101100 01101111`（`011011`、`000110`、`111100`）\n\n3. **映射到 Base64 字符集**：\n   - `011010` -> `a`\n   - `000110` -> `G`\n   - `010101` -> `V`\n   - `101100` -> `s`\n   - `011011` -> `b`\n   - `000110` -> `G`\n   - `111100` -> `8`\n\n   Base64 编码结果为 `aGVsbG8=`\n\n#### **解码示例**\n\n将 Base64 字符串 `aGVsbG8=` 解码：\n\n1. **映射回二进制**：\n   - `a` -> `011010`\n   - `G` -> `000110`\n   - `V` -> `010101`\n   - `s` -> `101100`\n   - `b` -> `011011`\n   - `G` -> `000110`\n   - `8` -> `111100`\n\n2. **合并和恢复**：\n   - 合并为：`01101000 01100101 01101100 01101100 01101111`\n\n3. **转换为原始字符串**：\n   - `01101000` -> `h`\n   - `01100101` -> `e`\n   - `01101100` -> `l`\n   - `01101100` -> `l`\n   - `01101111` -> `o`\n\n   原始字符串为 \"hello\"",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T23:43:33.000Z",
    "isCollected": false,
    "currentIndex": 168,
    "filterTotalNum": 1487,
    "prev": "f1e53d83-934a-4c82-b9de-67ca962967e1",
    "next": "a2e5e3a0-8b27-4961-b21f-05db8a2fed7e"
  },
  "post": {
    "exerciseKey": "a6cca09a-fca9-4b32-b9f7-56f668a56ca3",
    "category": "QA",
    "title": "base64 的编码原理是什么？",
    "level": 2,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T23:43:33+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 21
  }
}