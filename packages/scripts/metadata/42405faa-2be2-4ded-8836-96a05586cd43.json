{
  "data": {
    "id": 519,
    "exerciseKey": "42405faa-2be2-4ded-8836-96a05586cd43",
    "category": "QA",
    "renderType": "md",
    "title": "请手写“归并排序”",
    "desc": null,
    "options": null,
    "explanation": "## 算法简介\n\n归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。\n\n## 算法描述\n\n具体算法描述如下：\n\n* 把长度为n的输入序列分成两个长度为n/2的子序列；\n* 对这两个子序列分别采用归并排序；\n* 将两个排序好的子序列合并成一个最终的排序序列。\n\n```javascript\nfunction mergeSort(arr) {  //采用自上而下的递归方法\n    var len = arr.length;\n    if(len < 2) {\n        return arr;\n    }\n    var middle = Math.floor(len / 2),\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right)\n{\n    var result = [];\n    console.time('归并排序耗时');\n    while (left.length && right.length) {\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n    console.timeEnd('归并排序耗时');\n    return result;\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(mergeSort(arr));\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(n)\n* 最差情况：T(n) = O(nlogn)\n* 平均情况：T(n) = O(nlogn)\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3.5,
    "appId": 7,
    "createAt": "2021-07-17T12:03:29.000Z",
    "updateAt": "2024-07-22T15:42:49.000Z",
    "isCollected": false,
    "currentIndex": 981,
    "filterTotalNum": 1487,
    "prev": "b5824553-6ffc-4262-b90c-ce83f00409c2",
    "next": "6fc4d84b-0b4f-4cc3-8109-f5ec5a981da5"
  },
  "post": {
    "exerciseKey": "42405faa-2be2-4ded-8836-96a05586cd43",
    "category": "QA",
    "title": "请手写“归并排序”",
    "level": 3.5,
    "createAt": "2021-07-17T12:03:29+00:00",
    "updateAt": "2024-07-22T15:42:49+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 21
  }
}