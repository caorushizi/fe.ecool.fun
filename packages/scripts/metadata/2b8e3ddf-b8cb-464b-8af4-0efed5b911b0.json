{
  "data": {
    "id": 2412,
    "exerciseKey": "2b8e3ddf-b8cb-464b-8af4-0efed5b911b0",
    "category": "QA",
    "renderType": "md",
    "title": "前端项目里，一般对请求 request 做哪些统一的封装？",
    "desc": "",
    "options": "",
    "explanation": "在前端项目中，对请求（request）的统一封装可以提高代码的可维护性、复用性，并简化对请求的管理。\n\n以下是一些常见的请求封装做法：\n\n### 1. **统一配置**\n\n**目的**：集中管理所有请求的基础配置，如 baseURL、请求头、超时设置等。\n\n```javascript\nimport axios from 'axios';\n\n// 创建 Axios 实例\nconst apiClient = axios.create({\n  baseURL: 'https://api.example.com',\n  timeout: 10000,\n  headers: { 'Content-Type': 'application/json' }\n});\n\nexport default apiClient;\n```\n\n### 2. **请求拦截器**\n\n**目的**：在请求发出之前，统一处理请求的设置，如添加认证 token、处理请求参数等。\n\n```javascript\napiClient.interceptors.request.use(\n  config => {\n    // 添加认证 token\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n```\n\n### 3. **响应拦截器**\n\n**目的**：统一处理响应数据和错误，简化处理逻辑，如格式化数据、全局错误处理等。\n\n```javascript\napiClient.interceptors.response.use(\n  response => response.data, // 只返回数据部分\n  error => {\n    // 处理 HTTP 错误\n    console.error('API Error:', error.response || error.message);\n    return Promise.reject(error);\n  }\n);\n```\n\n### 4. **错误处理**\n\n**目的**：集中处理所有请求错误，例如展示用户友好的错误信息。\n\n```javascript\nfunction handleError(error) {\n  if (error.response) {\n    // 请求已发出，但服务器响应状态码不在 2xx 范围内\n    console.error('Server Error:', error.response.data);\n  } else if (error.request) {\n    // 请求已发出，但没有收到响应\n    console.error('Network Error:', error.request);\n  } else {\n    // 其他错误\n    console.error('Error:', error.message);\n  }\n}\n\n// 在响应拦截器中调用\napiClient.interceptors.response.use(\n  response => response.data,\n  error => {\n    handleError(error);\n    return Promise.reject(error);\n  }\n);\n```\n\n### 5. **请求方法的封装**\n\n**目的**：创建通用的方法来处理特定的请求类型（GET、POST、PUT、DELETE），简化请求调用。\n\n```javascript\nconst api = {\n  get(url, params) {\n    return apiClient.get(url, { params });\n  },\n  post(url, data) {\n    return apiClient.post(url, data);\n  },\n  put(url, data) {\n    return apiClient.put(url, data);\n  },\n  delete(url, params) {\n    return apiClient.delete(url, { params });\n  }\n};\n\nexport default api;\n```\n\n### 6. **统一的请求响应格式**\n\n**目的**：保持响应数据格式的一致性，通常是将响应数据封装在一个特定的结构中，便于处理。\n\n```javascript\napiClient.interceptors.response.use(\n  response => {\n    // 例如：{ code: 200, data: ..., message: ... }\n    if (response.data.code === 200) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Unknown error');\n    }\n  },\n  error => {\n    handleError(error);\n    return Promise.reject(error);\n  }\n);\n```\n\n### 7. **请求超时和重试机制**\n\n**目的**：处理请求超时的情况，和自动重试机制。\n\n```javascript\nimport axiosRetry from 'axios-retry';\n\n// 配置 Axios 重试\naxiosRetry(apiClient, { retries: 3, retryDelay: axiosRetry.exponentialDelay });\n\n// 在拦截器中设置超时\napiClient.defaults.timeout = 15000;\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 1.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-09-03T01:24:15.000Z",
    "isCollected": false,
    "currentIndex": 225,
    "filterTotalNum": 1487,
    "prev": "b7510525-d358-4b38-a29d-430524dc2dca",
    "next": "e902d336-e2dd-4de7-a471-16806c695aa9"
  },
  "post": {
    "exerciseKey": "2b8e3ddf-b8cb-464b-8af4-0efed5b911b0",
    "category": "QA",
    "title": "前端项目里，一般对请求 request 做哪些统一的封装？",
    "level": 1.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-09-03T01:24:15+00:00"
  },
  "tag": {
    "id": 75,
    "tagName": "场景题",
    "type": "1",
    "exerciseCount": 39
  }
}