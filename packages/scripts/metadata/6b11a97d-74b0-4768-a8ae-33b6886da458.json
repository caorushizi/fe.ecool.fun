{
  "data": {
    "id": 529,
    "exerciseKey": "6b11a97d-74b0-4768-a8ae-33b6886da458",
    "category": "QA",
    "renderType": "md",
    "title": "什么是时间复杂度？",
    "desc": null,
    "options": null,
    "explanation": "> 时间复杂度的计算并不是计算程序具体运行的时间，而是算法执行语句的次数。\n\n随着n的不断增大，时间复杂度不断增大，算法花费时间越多。\n\n## 常见的时间复杂度\n\n* 常数阶O(1)\n* 对数阶O(log2 n)\n* 线性阶O(n)\n* 线性对数阶O(n log2 n)\n* 平方阶O(n^2)\n* 立方阶O(n^3)\n* k次方阶O(n^K)\n* 指数阶O(2^n)\n\n## 计算方法\n\n* 选取相对增长最高的项\n* 最高项系数是都化为1\n* 若是常数的话用O(1)表示\n\n举个例子：如f(n)=3*n^4+3n+300 则 O(n)=n^4\n\n通常我们计算时间复杂度都是计算最坏情况。计算时间复杂度的要注意的几个点:\n\n* 如果算法的执行时间不随n的增加而增长，假如算法中有上千条语句，执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。\n\n举例如下：代码执行100次，是一个常数，复杂度也是O(1)。\n```javascript\nlet x = 1;\nwhile (x <100) {\n\tx++;\n}\n```\n\n* 有多个循环语句时候，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的方法决定的。\n\n举例如下：在下面for循环当中，外层循环每执行一次，内层循环要执行n次，执行次数是根据n所决定的，时间复杂度是O(n^2)。\n\n```javascript\nfor (i = 0; i < n; i++){\n  for (j = 0; j < n; j++) {\n  \t// ...code\n  }\n}\n```\n\n* 循环不仅与n有关，还与执行循环判断条件有关。\n\n举例如下：在代码中，如果arr[i]不等于1的话，时间复杂度是O(n)。如果arr[i]等于1的话，循环不执行，时间复杂度是O(0)。\n\n```javascript\nfor(var i = 0; i<n && arr[i] !=1; i++) {\n\t// ...code\n}\n```\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-17T13:52:11.000Z",
    "updateAt": "2021-07-17T22:43:22.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 827,
    "prev": "f799e353-d998-4570-8a57-8c403caaf649",
    "next": "e00b6fcb-fb55-435f-ac74-687734871111"
  },
  "post": {
    "exerciseKey": "6b11a97d-74b0-4768-a8ae-33b6886da458",
    "category": "QA",
    "title": "什么是时间复杂度？",
    "level": 2,
    "updateAt": "2021-07-17T22:43:22+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 19
  }
}
