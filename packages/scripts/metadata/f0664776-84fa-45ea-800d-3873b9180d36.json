{
  "data": {
    "id": 1812,
    "exerciseKey": "f0664776-84fa-45ea-800d-3873b9180d36",
    "category": "QA",
    "renderType": "md",
    "title": " 二叉树中和为某一值的路径",
    "desc": "给你二叉树的根节点 `root` 和一个整数目标和 `targetSum` ，找出所有 **从根节点到叶子节点** 路径总和等于给定目标和的路径。\n\n**叶子节点** 是指没有子节点的节点。\n\n**示例 1：**\n\n![](https://pic.rmb.bdstatic.com/bjh/8771ad1c0da043e18c975fe618d70489.png)\n\n\n**输入：** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n**输出：** [[5,4,11,2],[5,8,4,5]]\n\n**示例 2：**\n\n![](https://pic.rmb.bdstatic.com/bjh/2c1a1aabf2e37caf1fb5d7f5b3efd5f6.png)\n\n\n**输入：** root = [1,2,3], targetSum = 5\n**输出：** []\n\n**示例 3：**\n\n\n**输入：** root = [1,2], targetSum = 0\n**输出：** []\n\n**提示：**\n\n* 树中节点总数在范围 `[0, 5000]` 内\n* `-1000 <= Node.val <= 1000`\n* `-1000 <= targetSum <= 1000`\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} target\n * @return {number[][]}\n */\nvar pathSum = function(root, target) {\n\n};\n```",
    "options": null,
    "explanation": "## 解题思路\n\n深度优先遍历\n\n* 每层都三个参数，一个是当前结点，一个是 target 剩余值，一个是总路径数组\n* 当往二叉树深处进行遍历时，如果 target 剩余值跟结点值相等且左右子树为空(叶子结点)，则满足要求，往 result 压入当前总路径数组 path\n* 对于左右子树不为空的结点，继续往左或右子树进行遍历，直到叶子结点\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} target\n * @return {number[][]}\n */\n\nvar pathSum = function (root, sum) {\n    if (!root) return [];\n    const res = [];\n\n    const dfs = (root, sum, path) => {\n      if(!root) return;\n      // 到了叶子节点并且当前节点的值跟剩余sum相等，则推入结果集中\n      if (root.val === sum && !root.left && !root.right) {\n        res.push(path);\n      }\n      // 路径中加入当前节点的值\n      path.push(root.val);\n      dfs(root.left, sum - root.val, path.slice());\n      dfs(root.right, sum - root.val, path.slice());\n    };\n    \n    dfs(root, sum, []);\n    return res;\n};\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-16T14:49:57.000Z",
    "updateAt": "2022-05-16T23:01:11.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 533,
    "prev": "125134e6-1cc2-460b-9770-60d464365e89",
    "next": "e1f26ce6-71ba-4f91-b9a6-42d732799863"
  },
  "post": {
    "exerciseKey": "f0664776-84fa-45ea-800d-3873b9180d36",
    "category": "QA",
    "title": " 二叉树中和为某一值的路径",
    "level": 3,
    "updateAt": "2022-05-16T23:01:11+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}
