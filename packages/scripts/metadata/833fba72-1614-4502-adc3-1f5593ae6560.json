{
  "data": {
    "id": 282,
    "exerciseKey": "833fba72-1614-4502-adc3-1f5593ae6560",
    "category": "QA",
    "renderType": "md",
    "title": "如何实现浏览器内多个标签页之间的通信？",
    "desc": null,
    "options": null,
    "explanation": "## Broadcast Channel\n\n顾名思义，“广播频道”，官方文档里的解释为“用于同源不同页面之间完成通信的功能”，在其中某个页面发送的消息会被其他页面监听到。\n\n注意“同源”二字，该方法无法完成跨域的数据传输。\n\n## localStorage\n\nlocalStorage是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信(ps：session是会话级的存储空间，每个标签页都是单独的）。\n\n## SharedWorker\n\nSharedWorker可以被多个window共同使用，但必须保证这些标签页都是同源的(相同的协议，主机和端口号)\n\n## WebSocket通讯\n\n全双工（full-duplex）通信自然可以实现多个标签之间的通信\n\n## 定时器setInterval+cookie\n\n* 在页面A设置一个使用setInterval定时器不断刷新，检查Cookies的值是否发生变化，如果变化就进行刷新的操作。\n* 由于Cookies是在同域可读的，所以在页面B审核的时候改变Cookies的值，页面A自然是可以拿到的。\n\n这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优雅。\n\n## postMessage\n\n两个需要交互的tab页面具有依赖关系。\n\n如 A页面中通过JavaScript的window.open打开B页面，或者B页面通过iframe嵌入至A页面，此种情形最简单，可以通过HTML5的 window.postMessage API完成通信，由于postMessage函数是绑定在 window 全局对象下，因此通信的页面中必须有一个页面（如A页面）可以获取另一个页面（如B页面）的window对象，这样才可以完成单向通信；B页面无需获取A页面的window对象，如果需要B页面对A页面的通信，只需要在B页面侦听message事件，获取事件中传递的source对象，该对象即为A页面window对象的引用：\n\n```js\n//B页面\nwindow.addEventListner('message',(e)=>{\n    let {data,source,origin} = e;\n    source.postMessage('message echo','/');\n});\n```\n\npostMessage的第一个参数为消息实体，它是一个结构化对象，即可以通过“JSON.stringify和JSON.parse”函数还原的对象；第二个参数为消息发送范围选择器，设置为“/”意味着只发送消息给同源的页面，设置为“*”则发送全部页面。\n\n\n\n",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T07:40:56.000Z",
    "updateAt": "2022-03-13T15:54:01.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 595,
    "prev": "ae4d3995-6e26-443a-9f42-a07e594a9bff",
    "next": "b317da28-bef7-4cb2-8fb4-2d41f1ec09d8"
  },
  "post": {
    "exerciseKey": "833fba72-1614-4502-adc3-1f5593ae6560",
    "category": "QA",
    "title": "如何实现浏览器内多个标签页之间的通信？",
    "level": 2.5,
    "updateAt": "2022-03-13T15:54:01+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
