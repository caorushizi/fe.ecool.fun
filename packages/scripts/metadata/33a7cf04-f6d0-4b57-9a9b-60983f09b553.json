{
  "data": {
    "id": 1818,
    "exerciseKey": "33a7cf04-f6d0-4b57-9a9b-60983f09b553",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对 useMemo 的理解",
    "desc": null,
    "options": null,
    "explanation": "# Memo\n在class的时代，我们一般是通过pureComponent来对数据进行一次浅比较，引入Hook特性后，我们可以使用Memo进行性能提升。\n\n在此之前，我们来做一个实验\n```js\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  const [n, setN] = useState(0);\n  const [m, setM] = useState(10);\n  console.log(\"执行最外层盒子了\");\n  return (\n    <>\n      <div>\n        最外层盒子\n        <Child1 value={n} />\n        <Child2 value={m} />\n        <button\n          onClick={() => {\n            setN(n + 1);\n          }}\n        >\n          n+1\n        </button>\n        <button\n          onClick={() => {\n            setM(m + 1);\n          }}\n        >\n          m+1\n        </button>\n      </div>\n    </>\n  );\n}\nfunction Child1(props) {\n  console.log(\"执行子组件1了\");\n  return <div>子组件1上的n：{props.value}</div>;\n}\nfunction Child2(props) {\n  console.log(\"执行子组件2了\");\n  return <div>子组件2上的m：{props.value}</div>;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n```\n上面的代码我设置了两个子组件，分别读取父组件上的n跟m，然后父组件上面设置两个点击按钮，当点击后分别让设置的n、m加1。以下是第一次渲染时log控制台的结果\n\n```!\n执行最外层盒子了 \n执行子组件1了 \n执行子组件2了 \n```\n\n跟想象中一样，render时先进入App函数，执行，发现里面的两个child函数，执行，创建虚拟dom，创建实体dom，最后将画面渲染到页面上。\n\n![](https://static.ecool.fun//article/0b7a9878-a44f-48eb-b9da-b647d4d56570.jpeg)\n\n# 使用Memo优化\n当我点击n+1按钮时，此时state里面的n必然+1，也会重新引发render渲染，并把新的n更新到视图中。\n![](https://static.ecool.fun//article/8b79158a-ca60-4675-9939-c10d391cc5f0.jpeg)\n我们再看控制台\n```!\n执行最外层盒子了 \n执行子组件1了 \n执行子组件2了 \n+ 执行最外层盒子了 \n+ 执行子组件1了 \n+ 执行子组件2了 //为什么组件2也渲染了，里面的m没有变化 \n```\n你会发现子组件2也渲染了，显然react重新把所有的函数都执行了一遍，把未曾有n数据的子组件2也重新执行了。\n\n如何优化？我们可以使用`memo`把子组件改成以下代码\n```js\nconst Child1 = React.memo((props) => {\n  console.log(\"执行子组件1了\");\n  return <div>子组件1上的n：{props.value}</div>;\n});\n\nconst Child2 = React.memo((props) => {\n  console.log(\"执行子组件2了\");\n  return <div>子组件2上的m：{props.value}</div>;\n});\n```\n再重新点击试试？\n```!\n执行最外层盒子了 \n执行子组件1了 \n执行子组件2了 \n+ 执行最外层盒子了 \n+ 执行子组件1了 \n```\n会发现没有执行子组件2了\n\n这样的话react就会只执行对应state变化的组件，而没有变化的组件，则复用上一次的函数，也许memo也有memory的意思，代表记忆上一次的函数，不重新执行（我瞎猜的- -！！）\n\n# 出现bug\n上面的代码虽然已经优化好了性能，但是会有一个bug\n\n上面的代码是由父组件控制`<button>`的，如果我把控制state的函数传递给子组件，会怎样呢？\n```html\n <Child2 value={m} onClick={addM} /> //addM是修改M的函数\n```\n\n点击按钮让n+1\n```!\n执行最外层盒子了 \n执行子组件1了 \n执行子组件2了 \n+ 执行最外层盒子了 \n+ 执行子组件1了 \n+ 执行子组件2了 \n```\n又重新执行子组件2。\n\n为什么会这样？因为App重新执行了，它会修改addM函数的地址（函数是复杂数据类型），而addM又作为props传递给子组件2，那么就会引发子组件2函数的重新执行。\n\n# useMemo\n这时候就要用useMemo解决问题。\n\n`useMemo(()=>{},[])`\n\nuseMemo接收两个参数，分别是函数和一个数组（实际上是依赖），函数里return 函数,数组内存放依赖。\n```js\nconst addM = useMemo(() => {\n    return () => {\n      setM({ m: m.m + 1 });\n    };\n  }, [m]); //表示监控m变化\n```\n使用方式就跟useEffect似的。\n\n# useCallback\n上面的代码很奇怪有没有\n```js\nuseMemo(() => {\n    return () => {\n      setM({ m: m.m + 1 });\n    };\n  }, [m])\n```\nreact就给我们准备了语法糖，useCallback。它是这样写的\n```javascript\n  const addM = useCallback(() => {\n    setM({ m: m.m + 1 });\n  }, [m]);\n```\n是不是看上去正常多了？\n\n# 最终代码\n\n```js\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\n\nfunction App() {\n  const [n, setN] = useState(0);\n  const [m, setM] = useState({ m: 1 });\n  console.log(\"执行最外层盒子了\");\n  const addN = useMemo(() => {\n    return () => {\n      setN(n + 1);\n    };\n  }, [n]);\n  const addM = useCallback(() => {\n    setM({ m: m.m + 1 });\n  }, [m]);\n  return (\n    <>\n      <div>\n        最外层盒子\n        <Child1 value={n} click={addN} />\n        <Child2 value={m} click={addM} />\n        <button onClick={addN}>n+1</button>\n        <button onClick={addM}>m+1</button>\n      </div>\n    </>\n  );\n}\nconst Child1 = React.memo((props) => {\n  console.log(\"执行子组件1了\");\n  return <div>子组件1上的n：{props.value}</div>;\n});\n\nconst Child2 = React.memo((props) => {\n  console.log(\"执行子组件2了\");\n  return <div>子组件2上的m：{props.value.m}</div>;\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n```\n\n# 总结\n* 使用`memo`可以帮助我们优化性能，让`react`没必要执行不必要的函数\n* 由于复杂数据类型的地址可能发生改变，于是传递给子组件的`props`也会发生变化，这样还是会执行不必要的函数，所以就用到了`useMemo`这个api\n* `useCallback`是`useMemo`的语法糖",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-29T13:31:32.000Z",
    "updateAt": "2024-01-24T17:20:36.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 195,
    "prev": "1b4bdc45-8a73-42b2-a304-872ddee851ab",
    "next": "e0fd403c-a34d-418e-8a92-18cfa6e00e1b"
  },
  "post": {
    "exerciseKey": "33a7cf04-f6d0-4b57-9a9b-60983f09b553",
    "category": "QA",
    "title": "说说你对 useMemo 的理解",
    "level": 1,
    "updateAt": "2024-01-24T17:20:36+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
