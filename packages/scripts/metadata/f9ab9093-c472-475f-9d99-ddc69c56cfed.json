{
  "data": {
    "id": 517,
    "exerciseKey": "f9ab9093-c472-475f-9d99-ddc69c56cfed",
    "category": "QA",
    "renderType": "md",
    "title": "请手写“插入排序”",
    "desc": null,
    "options": null,
    "explanation": "## 算法简介\n\n插入排序（Insertion-Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n\n## 算法描述\n\n一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：\n\n* 从第一个元素开始，该元素可以认为已经被排序；\n* 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n* 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n* 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n* 将新元素插入到该位置后；\n* 重复步骤2~5。\n\n## 代码实现\n\n```javascript\nfunction insertionSort(array) {\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array') {\n        console.time('插入排序耗时：');\n        for (var i = 1; i < array.length; i++) {\n            var key = array[i];\n            var j = i - 1;\n            while (j >= 0 && array[j] > key) {\n                array[j + 1] = array[j];\n                j--;\n            }\n            array[j + 1] = key;\n        }\n        console.timeEnd('插入排序耗时：');\n        return array;\n    } else {\n        return 'array is not an Array!';\n    }\n}\n```\n\n## 改进插入排序\n\n查找插入位置时使用二分查找的方式\n\n```javascript\nfunction binaryInsertionSort(array) {\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array') {\n        console.time('二分插入排序耗时：');\n\n        for (var i = 1; i < array.length; i++) {\n            var key = array[i], left = 0, right = i - 1;\n            while (left <= right) {\n                var middle = parseInt((left + right) / 2);\n                if (key < array[middle]) {\n                    right = middle - 1;\n                } else {\n                    left = middle + 1;\n                }\n            }\n            for (var j = i - 1; j >= left; j--) {\n                array[j + 1] = array[j];\n            }\n            array[left] = key;\n        }\n        console.timeEnd('二分插入排序耗时：');\n\n        return array;\n    } else {\n        return 'array is not an Array!';\n    }\n}\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(binaryInsertionSort(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 算法分析\n\n* 最佳情况：输入数组按升序排列。T(n) = O(n)\n* 最坏情况：输入数组按降序排列。T(n) = O(n2)\n* 平均情况：T(n) = O(n2)\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-17T12:00:16.000Z",
    "updateAt": "2021-07-17T20:17:01.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 838,
    "prev": "6fc4d84b-0b4f-4cc3-8109-f5ec5a981da5",
    "next": "6f6f9aed-420d-4ceb-a919-1a3aa779fc38"
  },
  "post": {
    "exerciseKey": "f9ab9093-c472-475f-9d99-ddc69c56cfed",
    "category": "QA",
    "title": "请手写“插入排序”",
    "level": 3,
    "updateAt": "2021-07-17T20:17:01+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 19
  }
}