{
  "data": {
    "id": 2561,
    "exerciseKey": "3e0910ed-8340-47cd-a428-db2409431a94",
    "category": "QA",
    "renderType": "md",
    "title": "npm script 生命周期有哪些?",
    "desc": "",
    "options": "",
    "explanation": "在 `npm` 中，`scripts` 部分允许你定义和运行自定义的脚本命令。`npm` 脚本有一个生命周期的概念，其中包括一系列的预定义和自定义的生命周期钩子。生命周期钩子的执行顺序和作用如下：\n\n### **1. 生命周期钩子概述**\n\n在 `npm` 中，生命周期钩子是一些特定的脚本命令，`npm` 会在特定的时间点自动运行这些命令。例如，安装包之前、之后或者在发布时。\n\n### **2. 生命周期钩子的具体阶段**\n\n1. **`prepublish`**\n   - **触发时间**：在 `npm publish` 和 `npm install` 时。\n   - **作用**：用于在包发布之前进行准备工作（如构建、测试等）。\n   - **说明**：`prepublish` 在 `npm install` 和 `npm publish` 之前执行。\n\n2. **`prepare`**\n   - **触发时间**：在 `npm install` 和 `npm publish` 时。\n   - **作用**：用于构建、准备包的内容等（如运行编译、构建脚本）。这个阶段在 `prepublish` 之后执行。\n   - **说明**：`prepare` 主要用于在本地开发和发布之前执行准备工作。\n\n3. **`prepublishOnly`**\n   - **触发时间**：在 `npm publish` 时。\n   - **作用**：仅在发布包时执行。不会在 `npm install` 时触发。\n   - **说明**：这个钩子在 `npm publish` 时执行，但在 `npm install` 时不会触发。\n\n4. **`postpublish`**\n   - **触发时间**：在 `npm publish` 后。\n   - **作用**：用于在包发布之后进行清理或其他操作（如发送通知）。\n   - **说明**：`postpublish` 在包发布之后执行。\n\n5. **`preinstall`**\n   - **触发时间**：在包的安装之前。\n   - **作用**：用于在包安装之前执行任何必要的操作（如设置环境）。\n   - **说明**：`preinstall` 在运行 `npm install` 之前执行。\n\n6. **`install`**\n   - **触发时间**：在包的安装过程中。\n   - **作用**：用于在包安装过程中执行自定义操作。\n   - **说明**：`install` 在 `preinstall` 之后执行。\n\n7. **`postinstall`**\n   - **触发时间**：在包安装之后。\n   - **作用**：用于在包安装后执行清理、构建或其他操作（如启动本地服务器）。\n   - **说明**：`postinstall` 在 `install` 之后执行。\n\n8. **`preuninstall`**\n   - **触发时间**：在包卸载之前。\n   - **作用**：用于在包卸载之前执行任何必要的操作（如清理）。\n   - **说明**：`preuninstall` 在包卸载之前执行。\n\n9. **`uninstall`**\n   - **触发时间**：在包卸载过程中。\n   - **作用**：用于在包卸载过程中执行自定义操作。\n   - **说明**：`uninstall` 在 `preuninstall` 之后执行。\n\n10. **`postuninstall`**\n    - **触发时间**：在包卸载之后。\n    - **作用**：用于在包卸载之后执行清理或其他操作。\n    - **说明**：`postuninstall` 在包卸载之后执行。\n\n### **3. 脚本执行顺序**\n\n当执行 `npm install` 或 `npm publish` 时，`npm` 会按照以下顺序运行这些脚本：\n\n1. `preinstall`\n2. `install`\n3. `postinstall`\n4. `prepublish` （在 `npm publish` 时）\n5. `prepare`\n6. `publish` （在 `npm publish` 时）\n7. `postpublish`\n\n当卸载包时，执行顺序为：\n\n1. `preuninstall`\n2. `uninstall`\n3. `postuninstall`\n\n### **4. 使用脚本**\n\n在 `package.json` 中定义的自定义脚本与生命周期钩子无关，但可以与这些钩子一起使用。例如：\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"test\": \"jest\",\n    \"prepublishOnly\": \"npm run build\",\n    \"postinstall\": \"npm run test\"\n  }\n}\n```\n\n在这个例子中：\n- `prepublishOnly` 钩子在发布前运行 `npm run build`。\n- `postinstall` 钩子在安装后运行 `npm run test`。\n\n通过合理利用生命周期钩子，可以在不同阶段自动执行必要的操作，确保项目的一致性和可靠性。",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T23:06:43.000Z",
    "isCollected": false,
    "currentIndex": 158,
    "filterTotalNum": 1487,
    "prev": "aacd4d9c-67fc-414a-ba12-9cd93e065786",
    "next": "3b6458bc-88e6-4c91-a81d-0b14e5464332"
  },
  "post": {
    "exerciseKey": "3e0910ed-8340-47cd-a428-db2409431a94",
    "category": "QA",
    "title": "npm script 生命周期有哪些?",
    "level": 2,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T23:06:43+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 58
  }
}