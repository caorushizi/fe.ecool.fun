{
  "data": {
    "id": 2478,
    "exerciseKey": "893f6941-8eb4-4c4c-9bba-0f4802d7320a",
    "category": "QA",
    "renderType": "md",
    "title": "web 应用中如何对静态资源加载失败的场景做降级处理？",
    "desc": "",
    "options": "",
    "explanation": "在 Web 应用中，对静态资源加载失败的场景进行降级处理是确保应用稳定性和用户体验的关键。以下是一些常见的策略和方法：\n\n### 1. **使用备用资源**\n\n- **图片**：\n  - 在 `<img>` 标签中使用 `onerror` 事件处理程序，当图片加载失败时，替换为备用图片。\n  ```html\n  <img src=\"main-image.jpg\" alt=\"Image\" onerror=\"this.src='fallback-image.jpg';\">\n  ```\n\n- **CSS**：\n  - 对于 CSS 文件，可以在 `<link>` 标签中设置备用 CSS 文件，但这种方式不如 JavaScript 的处理直接。通常建议使用 JavaScript 进行处理。\n  ```html\n  <link rel=\"stylesheet\" href=\"main.css\" onerror=\"this.href='fallback.css';\">\n  ```\n\n### 2. **JavaScript 动态加载**\n\n- **动态脚本加载**：\n  - 使用 JavaScript 动态加载资源并处理加载失败情况。例如，可以使用 `fetch` 或 `XMLHttpRequest` 加载 JavaScript 文件或其他资源，并在失败时加载备用资源。\n  ```javascript\n  function loadScript(url, fallbackUrl) {\n      const script = document.createElement('script');\n      script.src = url;\n      script.onerror = () => {\n          script.src = fallbackUrl;\n          document.head.appendChild(script);\n      };\n      document.head.appendChild(script);\n  }\n\n  loadScript('main-script.js', 'fallback-script.js');\n  ```\n\n- **动态样式表加载**：\n  - 类似地，可以动态加载样式表并处理加载失败。\n  ```javascript\n  function loadStylesheet(url, fallbackUrl) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = url;\n      link.onerror = () => {\n          link.href = fallbackUrl;\n      };\n      document.head.appendChild(link);\n  }\n\n  loadStylesheet('main-styles.css', 'fallback-styles.css');\n  ```\n\n### 3. **利用Service Workers**\n\n- **缓存和离线处理**：\n  - 使用 Service Workers 来缓存静态资源，并提供离线访问或备用资源。在资源加载失败时，服务工作者可以提供缓存中的版本或备用资源。\n  ```javascript\n  // Example service worker script\n  self.addEventListener('install', (event) => {\n      event.waitUntil(\n          caches.open('my-cache').then((cache) => {\n              return cache.addAll([\n                  '/main.css',\n                  '/fallback.css',\n                  '/main.js',\n                  '/fallback.js'\n              ]);\n          })\n      );\n  });\n\n  self.addEventListener('fetch', (event) => {\n      event.respondWith(\n          caches.match(event.request).then((response) => {\n              return response || fetch(event.request).catch(() => {\n                  return caches.match('/fallback.css'); // Or fallback.js\n              });\n          })\n      );\n  });\n  ```\n\n### 4. **Graceful Degradation**\n\n- **功能降级**：\n  - 设计时考虑功能降级，确保核心功能在静态资源加载失败时仍然可用。例如，提供基本功能和备用界面，即使某些样式或脚本没有加载成功。\n\n### 5. **用户提示**\n\n- 在静态资源加载失败时，向用户显示提示信息或错误页面，以告知他们发生了问题并提供解决方案或备用操作。",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-22T04:03:50.000Z",
    "isCollected": false,
    "currentIndex": 191,
    "filterTotalNum": 1487,
    "prev": "2ca37e15-70b8-4e97-abd5-d5d6170a2eeb",
    "next": "b90eb9af-fa06-4b4e-ba83-fbe34330cbf6"
  },
  "post": {
    "exerciseKey": "893f6941-8eb4-4c4c-9bba-0f4802d7320a",
    "category": "QA",
    "title": "web 应用中如何对静态资源加载失败的场景做降级处理？",
    "level": 3,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-22T04:03:50+00:00"
  },
  "tag": {
    "id": 75,
    "tagName": "场景题",
    "type": "1",
    "exerciseCount": 39
  }
}