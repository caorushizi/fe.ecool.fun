{
  "data": {
    "id": 1881,
    "exerciseKey": "16cd86d3-cdc5-4c8c-946b-19f72408525f",
    "category": "QA",
    "renderType": "md",
    "title": "前端跨页面通信，你知道哪些方法？",
    "desc": null,
    "options": null,
    "explanation": "在前端中，有几种方法可用于实现跨页面通信：\n\n1. **LocalStorage 或 SessionStorage**：这两个 Web 存储 API 可以在不同页面之间共享数据。一个页面可以将数据存储在本地存储中，另一个页面则可以读取该数据并进行相应处理。通过监听 storage 事件，可以实现数据的实时更新。\n\n2. **Cookies**：使用 Cookies 也可以在不同页面之间传递数据。通过设置和读取 Cookie 值，可以在同一域名下的不同页面之间交换信息。\n\n3. **PostMessage**：`window.postMessage()` 方法允许从一个窗口向另一个窗口发送消息，并在目标窗口上触发 message 事件。通过指定目标窗口的 origin，可以确保只有特定窗口能够接收和处理消息。\n\n4. **Broadcast Channel**：Broadcast Channel API 允许在同一浏览器下的不同上下文（例如，在不同标签页或 iframe 中）之间进行双向通信。它提供了一个类似于发布-订阅模式的机制，通过创建一个广播频道，并在不同上下文中加入该频道，可以实现消息的广播和接收。\n\n5. **SharedWorker**：SharedWorker 是一个可由多个窗口或标签页共享的 Web Worker，它可以在不同页面之间进行跨页面通信。通过 SharedWorker，多个页面可以通过 postMessage 进行双向通信，并共享数据和执行操作。\n\n6. **IndexedDB**：IndexedDB 是浏览器提供的一个客户端数据库，可以在不同页面之间存储和共享数据。通过在一个页面中写入数据，另一个页面可以读取该数据。\n\n7. **WebSockets**：WebSockets 提供了全双工的、双向通信通道，可以在客户端和服务器之间进行实时通信。通过建立 WebSocket 连接，可以在不同页面之间通过服务器传递数据并实现实时更新。\n\n这些方法各有特点，适用于不同的场景。根据具体需求和使用环境，选择合适的跨页面通信方法可以实现数据传递和协作。",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2022-08-12T01:19:06.000Z",
    "updateAt": "2023-12-19T11:12:28.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 221,
    "prev": "983ff108-fded-4272-96b6-24a0a20af286",
    "next": "4eee218f-92b4-4765-a377-0cacbeb992c1"
  },
  "post": {
    "exerciseKey": "16cd86d3-cdc5-4c8c-946b-19f72408525f",
    "category": "QA",
    "title": "前端跨页面通信，你知道哪些方法？",
    "level": 4,
    "updateAt": "2023-12-19T11:12:28+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
