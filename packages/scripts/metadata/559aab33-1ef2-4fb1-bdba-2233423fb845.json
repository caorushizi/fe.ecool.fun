{
  "data": {
    "id": 1644,
    "exerciseKey": "559aab33-1ef2-4fb1-bdba-2233423fb845",
    "category": "QA",
    "renderType": "md",
    "title": "React Hooks 在使用上有哪些限制？",
    "desc": null,
    "options": null,
    "explanation": "React Hooks 的限制主要有两条：\n\n* 不要在循环、条件或嵌套函数中调用 Hook；\n* 在 React 的函数组件中调用 Hook。\n\n那为什么会有这样的限制呢？就得从 Hooks 的设计说起。Hooks 的设计初衷是为了改进 React 组件的开发模式。在旧有的开发模式下遇到了三个问题。\n\n* 组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render props 及状态管理框架。\n* 复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。\n* 人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，他们希望在编译优化层面做出一些改进。\n\n这三个问题在一定程度上阻碍了 React 的后续发展，所以为了解决这三个问题，Hooks 基于函数组件开始设计。然而第三个问题决定了 Hooks 只支持函数组件。\n\n那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。\n\n这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入 ESLint 的 Hooks 检查插件进行预防。",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2022-01-16T14:57:34.000Z",
    "updateAt": "2022-01-16T23:27:33.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 634,
    "prev": "8d97f05b-37a5-4a58-8dff-0574918ccd67",
    "next": "d7dc9c83-0fa2-4510-b098-e92de7637209"
  },
  "post": {
    "exerciseKey": "559aab33-1ef2-4fb1-bdba-2233423fb845",
    "category": "QA",
    "title": "React Hooks 在使用上有哪些限制？",
    "level": 2.5,
    "updateAt": "2022-01-16T23:27:33+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}