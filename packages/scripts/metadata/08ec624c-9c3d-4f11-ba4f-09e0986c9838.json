{
  "data": {
    "id": 331,
    "exerciseKey": "08ec624c-9c3d-4f11-ba4f-09e0986c9838",
    "category": "QA",
    "renderType": "md",
    "title": "React 组件间怎么进行通信？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n我们将组件间通信可以拆分为两个词：\n\n- 组件\n- 通信\n\n`React`的组件灵活多样，按照不同的方式可以分成很多类型的组件\n\n而通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的，广义上，任何信息的交通都是通信\n\n组件间通信即指组件通过某种方式来传递信息以达到某个目的\n\n\n## 二、如何通信\n\n组件传递的方式有很多种，根据传送者和接收者可以分为如下：\n\n- 父组件向子组件传递\n- 子组件向父组件传递\n- 兄弟组件之间的通信\n- 父组件向后代组件传递\n- 非关系组件传递\n\n\n### 父组件向子组件传递\n\n由于`React`的数据流动为单向的，父组件向子组件传递是最常见的方式\n\n父组件在调用子组件的时候，只需要在子组件标签内传递参数，子组件通过`props`属性就能接收父组件传递过来的参数\n\n```jsx\nfunction EmailInput(props) {\n  return (\n    <label>\n      Email: <input value={props.email} />\n    </label>\n  );\n}\n\nconst element = <EmailInput email=\"123124132@163.com\" />;\n```\n\n\n### 子组件向父组件传递\n\n子组件向父组件通信的基本思路是，父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值\n\n父组件对应代码如下：\n\n```jsx\nclass Parents extends Component {\n  constructor() {\n    super();\n    this.state = {\n      price: 0\n    };\n  }\n\n  getItemPrice(e) {\n    this.setState({\n      price: e\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>price: {this.state.price}</div>\n        {/* 向子组件中传入一个函数  */}\n        <Child getPrice={this.getItemPrice.bind(this)} />\n      </div>\n    );\n  }\n}\n```\n\n子组件对应代码如下：\n\n```jsx\nclass Child extends Component {\n  clickGoods(e) {\n    // 在此函数中传入值\n    this.props.getPrice(e);\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.clickGoods.bind(this, 100)}>goods1</button>\n        <button onClick={this.clickGoods.bind(this, 1000)}>goods2</button>\n      </div>\n    );\n  }\n}\n```\n\n\n\n### 兄弟组件之间的通信\n\n如果是兄弟组件之间的传递，则父组件作为中间层来实现数据的互通，通过使用父组件传递\n\n```jsx\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {count: 0}\n  }\n  setCount = () => {\n    this.setState({count: this.state.count + 1})\n  }\n  render() {\n    return (\n      <div>\n        <SiblingA\n          count={this.state.count}\n        />\n        <SiblingB\n          onClick={this.setCount}\n        />\n      </div>\n    );\n  }\n}\n```\n\n\n\n### 父组件向后代组件传递\n\n父组件向后代组件传递数据是一件最普通的事情，就像全局数据一样\n\n使用`context`提供了组件之间通讯的一种方式，可以共享数据，其他数据都能读取对应的数据\n\n通过使用`React.createContext`创建一个`context`\n\n```js\n const PriceContext = React.createContext('price')\n```\n\n`context`创建成功后，其下存在`Provider`组件用于创建数据源，`Consumer`组件用于接收数据，使用实例如下：\n\n`Provider`组件通过`value`属性用于给后代组件传递数据：\n\n```jsx\n<PriceContext.Provider value={100}>\n</PriceContext.Provider>\n```\n\n如果想要获取`Provider`传递的数据，可以通过`Consumer`组件或者或者使用`contextType`属性接收，对应分别如下：\n\n```jsx\nclass MyClass extends React.Component {\n  static contextType = PriceContext;\n  render() {\n    let price = this.context;\n    /* 基于这个值进行渲染工作 */\n  }\n}\n```\n\n`Consumer`组件：\n\n````jsx\n<PriceContext.Consumer>\n    { /*这里是一个函数*/ }\n    {\n        price => <div>price：{price}</div>\n    }\n</PriceContext.Consumer>\n````\n\n### 非关系组件传递\n\n如果组件之间关系类型比较复杂的情况，建议将数据进行一个全局资源管理，从而实现通信，例如`redux`。关于`redux`的使用后续再详细介绍\n\n\n## 三、总结\n\n由于`React`是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值\n\n因此，可以看到通信过程中，数据的存储位置都是存放在上级位置中\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T12:03:47.000Z",
    "updateAt": "2021-10-22T16:36:50.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 745,
    "prev": "d428fd54-972b-44de-b0ab-cb8ac1ed27ca",
    "next": "f24683ac-0366-41a2-a763-f90f447a78ee"
  },
  "post": {
    "exerciseKey": "08ec624c-9c3d-4f11-ba4f-09e0986c9838",
    "category": "QA",
    "title": "React 组件间怎么进行通信？",
    "level": 3,
    "updateAt": "2021-10-22T16:36:50+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
