{
  "data": {
    "id": 219,
    "exerciseKey": "7b63d3a8-32c4-4561-95fc-77755ea629f1",
    "category": "QA",
    "renderType": "md",
    "title": "大文件怎么实现断点续传？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n不管怎样简单的需求，在量级达到一定层次时，都会变得异常复杂\n\n文件上传简单，文件变大就复杂\n\n上传大文件时，以下几个变量会影响我们的用户体验\n\n- 服务器处理数据的能力\n- 请求超时\n- 网络波动\n\n上传时间会变长，高频次文件上传失败，失败后又需要重新上传等等\n\n为了解决上述问题，我们需要对大文件上传单独处理\n\n这里涉及到分片上传及断点续传两个概念\n\n#### 分片上传\n\n分片上传，就是将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块（Part）来进行分片上传\n\n如下图\n\n ![](https://static.ecool.fun//article/601be6fe-4b6e-420b-b88a-0e54be051d02.png)\n\n上传完之后再由服务端对所有上传的文件进行汇总整合成原始的文件\n\n大致流程如下：\n\n1. 将需要上传的文件按照一定的分割规则，分割成相同大小的数据块；\n2. 初始化一个分片上传任务，返回本次分片上传唯一标识；\n3. 按照一定的策略（串行或并行）发送各个分片数据块；\n4. 发送完成后，服务端根据判断数据上传是否完整，如果完整，则进行数据块合成得到原始文件\n\n#### 断点续传\n\n断点续传指的是在下载或上传时，将下载或上传任务人为的划分为几个部分\n\n每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度\n\n一般实现方式有两种：\n\n- 服务器端返回，告知从哪开始\n- 浏览器端自行处理\n\n上传过程中将文件在服务器写为临时文件，等全部写完了（文件上传完），将此临时文件重命名为正式文件即可\n\n如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可\n\n## 二、实现思路\n\n整体思路比较简单，拿到文件，保存文件唯一性标识，切割文件，分段上传，每次上传一段，根据唯一性标识判断文件上传进度，直到文件的全部片段上传完毕\n\n![](https://static.ecool.fun//article/a9b201e1-12dc-4598-a7a1-205a15d573f2.png)\n\n下面的内容都是伪代码\n\n读取文件内容：\n\n```js\nconst input = document.querySelector('input');\ninput.addEventListener('change', function() {\n    var file = this.files[0];\n});\n```\n\n可以使用`md5`实现文件的唯一性\n\n```js\nconst md5code = md5(file);\n```\n\n然后开始对文件进行分割\n\n```js\nvar reader = new FileReader();\nreader.readAsArrayBuffer(file);\nreader.addEventListener(\"load\", function(e) {\n    //每10M切割一段,这里只做一个切割演示，实际切割需要循环切割，\n    var slice = e.target.result.slice(0, 10*1024*1024);\n});\n```\n\nh5上传一个（一片）\n\n```js\nconst formdata = new FormData();\nformdata.append('0', slice);\n//这里是有一个坑的，部分设备无法获取文件名称，和文件类型，这个在最后给出解决方案\nformdata.append('filename', file.filename);\nvar xhr = new XMLHttpRequest();\nxhr.addEventListener('load', function() {\n    //xhr.responseText\n});\nxhr.open('POST', '');\nxhr.send(formdata);\nxhr.addEventListener('progress', updateProgress);\nxhr.upload.addEventListener('progress', updateProgress);\n\nfunction updateProgress(event) {\n    if (event.lengthComputable) {\n        //进度条\n    }\n}\n```\n\n这里给出常见的图片和视频的文件类型判断\n\n```js\nfunction checkFileType(type, file, back) {\n/**\n* type png jpg mp4 ...\n* file input.change=> this.files[0]\n* back callback(boolean)\n*/\n    var args = arguments;\n    if (args.length != 3) {\n        back(0);\n    }\n    var type = args[0]; // type = '(png|jpg)' , 'png'\n    var file = args[1];\n    var back = typeof args[2] == 'function' ? args[2] : function() {};\n    if (file.type == '') {\n        // 如果系统无法获取文件类型，则读取二进制流，对二进制进行解析文件类型\n        var imgType = [\n            'ff d8 ff', //jpg\n            '89 50 4e', //png\n\n            '0 0 0 14 66 74 79 70 69 73 6F 6D', //mp4\n            '0 0 0 18 66 74 79 70 33 67 70 35', //mp4\n            '0 0 0 0 66 74 79 70 33 67 70 35', //mp4\n            '0 0 0 0 66 74 79 70 4D 53 4E 56', //mp4\n            '0 0 0 0 66 74 79 70 69 73 6F 6D', //mp4\n\n            '0 0 0 18 66 74 79 70 6D 70 34 32', //m4v\n            '0 0 0 0 66 74 79 70 6D 70 34 32', //m4v\n\n            '0 0 0 14 66 74 79 70 71 74 20 20', //mov\n            '0 0 0 0 66 74 79 70 71 74 20 20', //mov\n            '0 0 0 0 6D 6F 6F 76', //mov\n\n            '4F 67 67 53 0 02', //ogg\n            '1A 45 DF A3', //ogg\n\n            '52 49 46 46 x x x x 41 56 49 20', //avi (RIFF fileSize fileType LIST)(52 49 46 46,DC 6C 57 09,41 56 49 20,4C 49 53 54)\n        ];\n        var typeName = [\n            'jpg',\n            'png',\n            'mp4',\n            'mp4',\n            'mp4',\n            'mp4',\n            'mp4',\n            'm4v',\n            'm4v',\n            'mov',\n            'mov',\n            'mov',\n            'ogg',\n            'ogg',\n            'avi',\n        ];\n        var sliceSize = /png|jpg|jpeg/.test(type) ? 3 : 12;\n        var reader = new FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.addEventListener(\"load\", function(e) {\n            var slice = e.target.result.slice(0, sliceSize);\n            reader = null;\n            if (slice && slice.byteLength == sliceSize) {\n                var view = new Uint8Array(slice);\n                var arr = [];\n                view.forEach(function(v) {\n                    arr.push(v.toString(16));\n                });\n                view = null;\n                var idx = arr.join(' ').indexOf(imgType);\n                if (idx > -1) {\n                    back(typeName[idx]);\n                } else {\n                    arr = arr.map(function(v) {\n                        if (i > 3 && i < 8) {\n                            return 'x';\n                        }\n                        return v;\n                    });\n                    var idx = arr.join(' ').indexOf(imgType);\n                    if (idx > -1) {\n                        back(typeName[idx]);\n                    } else {\n                        back(false);\n                    }\n\n                }\n            } else {\n                back(false);\n            }\n\n        });\n    } else {\n        var type = file.name.match(/\\.(\\w+)$/)[1];\n        back(type);\n    }\n}\n```\n\n调用方法如下\n\n```js\ncheckFileType('(mov|mp4|avi)',file,function(fileType){\n    // fileType = mp4,\n    // 如果file的类型不在枚举之列，则返回false\n});\n```\n\n上面上传文件的一步，可以改成：\n\n```js\nformdata.append('filename', md5code+'.'+fileType);\n```\n\n有了切割上传后，也就有了文件唯一标识信息，断点续传变成了后台的一个小小的逻辑判断\n\n后端主要做的内容为：根据前端传给后台的`md5`值，到服务器磁盘查找是否有之前未完成的文件合并信息（也就是未完成的半成品文件切片），取到之后根据上传切片的数量，返回数据告诉前端开始从第几节上传\n\n如果想要暂停切片的上传，可以使用`XMLHttpRequest `的 `abort `方法\n\n\n## 三、使用场景\n\n- 大文件加速上传：当文件大小超过预期大小时，使用分片上传可实现并行上传多个 Part， 以加快上传速度\n- 网络环境较差：建议使用分片上传。当出现上传失败的时候，仅需重传失败的Part\n- 流式上传：可以在需要上传的文件大小还不确定的情况下开始上传。这种场景在视频监控等行业应用中比较常见\n\n## 小结\n\n当前的伪代码，只是提供一个简单的思路，想要把事情做到极致，我们还需要考虑到更多场景，比如\n\n- 切片上传失败怎么办\n- 上传过程中刷新页面怎么办\n- 如何进行并行上传\n- 切片什么时候按数量切，什么时候按大小切\n- 如何结合 Web Work 处理大文件上传\n- 如何实现秒传\n\n人生又何尝不是如此，极致的人生体验有无限可能，越是后面才发现越是精彩 ~_~\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T14:04:52.000Z",
    "updateAt": "2024-01-24T17:44:15.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 145,
    "prev": "0567a810-b795-4c41-84e2-cba8ae4b97ac",
    "next": "ccde1c25-c646-4521-bf81-fcb0a3581ce2"
  },
  "post": {
    "exerciseKey": "7b63d3a8-32c4-4561-95fc-77755ea629f1",
    "category": "QA",
    "title": "大文件怎么实现断点续传？",
    "level": 3,
    "updateAt": "2024-01-24T17:44:15+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}