{
  "data": {
    "id": 2670,
    "exerciseKey": "263e22e5-d2ea-4a3d-bd3a-5b35678c06ee",
    "category": "QA",
    "renderType": "md",
    "title": "Vue 2 的响应式原理中 Object.defineProperty 有什么缺陷",
    "desc": "",
    "options": "",
    "explanation": "Vue 2 中使用`Object.defineProperty`来实现其响应式系统存在一些限制和问题：\r\n\r\n1. **深度检测**：\r\n   Vue 2中对于对象的处理是递归的；对于每个属性，Vue会逐层使用`Object.defineProperty`将其转换成 getter/setter。这样，当你访问或修改嵌套较深的属性时（如`a.b.c`），Vue已经提前将`a`、`a.b`和`a.b.c`的属性转换为响应式，能够追踪它们的变化。\r\n\r\n2. **数组限制**：\r\n   `Object.defineProperty`无法检测到数组索引的变化，因此Vue重写了数组的变异方法（如`push`、`pop`、`splice`等）来实现对数组的响应式监听。\r\n\r\n3. **对象属性添加或删除的限制**：\r\n   因为`Object.defineProperty`只能在初始化的时候应用于属性，当你在一个已经创建的Vue实例上添加新属性时，这个新属性是非响应式的。如果你想要它是响应式的，需要使用`Vue.set()`或`this.$set()`方法添加新属性。\r\n\r\n4. **性能问题**：\r\n   因为`Object.defineProperty`是递归地对对象的每一个属性进行处理，所以在处理具有大量属性或深层嵌套对象时，可能会有较大的性能开销。\r\n\r\n关于处理`a.b.c`类型的属性，Vue 2内部会递归地遍历对象`a`的所有属性，为它们各自使用`Object.defineProperty`定义getter和setter。如果`b`是`a`的属性，那么同样会针对`b`做这样的处理，以及它的所有属性，包括`c`等。这样，在访问或修改`a.b.c`时，Vue可以追踪到这些变化并触发相关的更新。\r\n\r\n```javascript\r\nfunction defineReactive(obj, key, val) {\r\n  Object.defineProperty(obj, key, {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: function reactiveGetter() {\r\n      // 依赖收集等操作\r\n      return val;\r\n    },\r\n    set: function reactiveSetter(newVal) {\r\n      if (newVal === val) return;\r\n      val = newVal;\r\n      // 触发更新视图等操作\r\n    }\r\n  });\r\n\r\n  // 如果val本身还是对象，则递归处理\r\n  if (typeof val === 'object') {\r\n    reactive(val);\r\n  }\r\n}\r\n\r\nfunction reactive(obj) {\r\n  for (let key in obj) {\r\n    defineReactive(obj, key, obj[key]);\r\n  }\r\n}\r\n```\r\n\r\n在上面的`reactive`函数中，我们将一个对象转换成响应式对象。这是Vue内部实现响应式的简化版原理。不过，Vue的响应式系统要复杂得多，它还涉及依赖收集和派发更新等机制。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:36.000Z",
    "updateAt": "2024-08-14T23:57:08.000Z",
    "isCollected": false,
    "currentIndex": 96,
    "filterTotalNum": 1487,
    "prev": "8568cd0d-c268-414f-aa43-28f631c0e9d5",
    "next": "82939890-c1de-45f8-b27d-b2675d58763e"
  },
  "post": {
    "exerciseKey": "263e22e5-d2ea-4a3d-bd3a-5b35678c06ee",
    "category": "QA",
    "title": "Vue 2 的响应式原理中 Object.defineProperty 有什么缺陷",
    "level": 1,
    "createAt": "2024-08-13T08:30:36+00:00",
    "updateAt": "2024-08-14T23:57:08+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}