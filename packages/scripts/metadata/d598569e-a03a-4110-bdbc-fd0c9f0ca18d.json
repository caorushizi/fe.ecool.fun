{
  "data": {
    "id": 2548,
    "exerciseKey": "d598569e-a03a-4110-bdbc-fd0c9f0ca18d",
    "category": "QA",
    "renderType": "md",
    "title": "如何防止 CSS 阻塞渲染？",
    "desc": "",
    "options": "",
    "explanation": "CSS 阻塞渲染是指浏览器在加载和解析 CSS 时，会阻止页面的渲染，直到 CSS 被完全下载和解析完毕。这会导致页面加载变慢。以下是一些防止或减轻 CSS 阻塞渲染的策略：\n\n### **1. 使用 `media` 属性**\n\n通过使用 `media` 属性将 CSS 文件标记为在特定条件下才需要加载，可以防止不必要的 CSS 阻塞渲染。\n\n```html\n<link rel=\"stylesheet\" href=\"styles.css\" media=\"print\" onload=\"this.media='all'\">\n```\n\n- **解释**：`media=\"print\"` 属性使得该 CSS 文件只在打印时被加载。`onload` 事件触发后将 `media` 属性改为 `all`，使其对所有媒体有效。这样，浏览器可以优先渲染页面，CSS 文件在下载完成后应用。\n\n### **2. 将 CSS 文件置于 `<head>` 中**\n\n虽然将 CSS 文件放在 `<head>` 部分会阻塞渲染，但它是保证页面样式准确加载的必要方式。要确保在 `<head>` 部分中尽量精简和优化 CSS 以减少阻塞时间。\n\n### **3. 内联关键 CSS**\n\n将关键 CSS 直接嵌入到 HTML 的 `<head>` 中，减少外部请求：\n\n```html\n<style>\n  /* 关键 CSS 代码 */\n  body {\n    margin: 0;\n    font-family: Arial, sans-serif;\n  }\n  /* 其他关键样式 */\n</style>\n```\n\n- **解释**：关键 CSS 是首次加载页面时必须应用的样式，可以提高渲染速度。将其内联到 HTML 中，可以避免额外的网络请求。\n\n### **4. 延迟加载非关键 CSS**\n\n使用 `rel=\"preload\"` 或 `rel=\"stylesheet\"` 来延迟加载非关键 CSS 文件，这些 CSS 文件对首屏渲染不是必需的：\n\n```html\n<link rel=\"preload\" href=\"non-critical.css\" as=\"style\" onload=\"this.rel='stylesheet'\">\n```\n\n- **解释**：`rel=\"preload\"` 会使浏览器提前加载资源，但不会立即应用，直到 `onload` 事件触发并将 `rel` 属性改为 `stylesheet`。\n\n### **5. 使用 CSS 分块**\n\n将 CSS 文件拆分为多个较小的文件，仅加载当前视图所需的 CSS 文件。这样可以减少单个 CSS 文件的体积，提高加载效率。\n\n```html\n<link rel=\"stylesheet\" href=\"main.css\">\n<link rel=\"stylesheet\" href=\"home.css\" media=\"(min-width: 600px)\">\n```\n\n- **解释**：将 CSS 文件按功能分块，并在需要时加载，有助于减少初始加载时的 CSS 量。\n\n### **6. 优化 CSS 文件**\n\n- **压缩 CSS**：使用工具（如 CSSnano 或 Clean-CSS）来压缩 CSS 文件，去除空格和注释，以减少文件大小。\n- **删除未使用的 CSS**：通过工具（如 PurgeCSS）去除未使用的 CSS 代码，减小文件体积。\n\n### **7. 使用 CSS 自定义属性（变量）**\n\n尽量减少 CSS 文件中的重复代码，使用 CSS 变量来优化样式的管理。\n\n```css\n:root {\n  --primary-color: #3498db;\n}\nbody {\n  color: var(--primary-color);\n}\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T23:23:28.000Z",
    "isCollected": false,
    "currentIndex": 166,
    "filterTotalNum": 1487,
    "prev": "efc1bdba-4ded-4d08-846c-cc98cd1d0d58",
    "next": "f1e53d83-934a-4c82-b9de-67ca962967e1"
  },
  "post": {
    "exerciseKey": "d598569e-a03a-4110-bdbc-fd0c9f0ca18d",
    "category": "QA",
    "title": "如何防止 CSS 阻塞渲染？",
    "level": 2,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T23:23:28+00:00"
  },
  "tag": {
    "id": 20,
    "tagName": "性能优化",
    "type": "1",
    "exerciseCount": 41
  }
}