{
  "data": {
    "id": 2099,
    "exerciseKey": "126917b6-56bc-4c94-81b7-f39263395546",
    "category": "QA",
    "renderType": "md",
    "title": "Vue 中父组件怎么监听到子组件的生命周期？",
    "desc": null,
    "options": null,
    "explanation": "在 Vue.js 中，父组件不能直接监听子组件的生命周期钩子。然而，有几种方法可以实现父组件对子组件生命周期的间接监听或执行特定操作。\n\n### 方法一：通过事件通信\n子组件在生命周期钩子中触发自定义事件，父组件监听这些事件。\n\n#### 1. 子组件\n```javascript\n<template>\n  <div>子组件</div>\n</template>\n\n<script>\nexport default {\n  name: 'ChildComponent',\n  mounted() {\n    this.$emit('childMounted');\n  }\n}\n</script>\n```\n\n#### 2. 父组件\n```javascript\n<template>\n  <div>\n    <ChildComponent @childMounted=\"handleChildMounted\" />\n  </div>\n</template>\n\n<script>\nimport ChildComponent from './ChildComponent.vue';\n\nexport default {\n  components: {\n    ChildComponent\n  },\n  methods: {\n    handleChildMounted() {\n      console.log('子组件已挂载');\n    }\n  }\n}\n</script>\n```\n\n### 方法二：使用 `ref`\n父组件通过 `ref` 直接访问子组件实例，并在父组件的生命周期钩子中调用子组件的方法。\n\n#### 1. 子组件\n```javascript\n<template>\n  <div>子组件</div>\n</template>\n\n<script>\nexport default {\n  name: 'ChildComponent',\n  mounted() {\n    console.log('子组件已挂载');\n  }\n}\n</script>\n```\n\n#### 2. 父组件\n```javascript\n<template>\n  <div>\n    <ChildComponent ref=\"child\" />\n  </div>\n</template>\n\n<script>\nimport ChildComponent from './ChildComponent.vue';\n\nexport default {\n  components: {\n    ChildComponent\n  },\n  mounted() {\n    this.$refs.child.$on('hook:mounted', this.handleChildMounted);\n  },\n  methods: {\n    handleChildMounted() {\n      console.log('通过 ref 获取子组件的挂载');\n    }\n  }\n}\n</script>\n```\n\n### 方法三：使用 `provide` 和 `inject`\n通过 `provide` 和 `inject` 实现跨层级组件通信。\n\n#### 1. 子组件\n```javascript\n<template>\n  <div>子组件</div>\n</template>\n\n<script>\nexport default {\n  name: 'ChildComponent',\n  inject: ['notifyParent'],\n  mounted() {\n    this.notifyParent('mounted');\n  }\n}\n</script>\n```\n\n#### 2. 父组件\n```javascript\n<template>\n  <div>\n    <ChildComponent />\n  </div>\n</template>\n\n<script>\nimport ChildComponent from './ChildComponent.vue';\n\nexport default {\n  components: {\n    ChildComponent\n  },\n  provide() {\n    return {\n      notifyParent: this.handleNotification\n    }\n  },\n  methods: {\n    handleNotification(hook) {\n      if (hook === 'mounted') {\n        console.log('子组件已挂载');\n      }\n    }\n  }\n}\n</script>\n```\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2024-06-06T01:29:50.000Z",
    "updateAt": "2024-08-10T17:07:43.000Z",
    "isCollected": false,
    "currentIndex": 293,
    "filterTotalNum": 1487,
    "prev": "eb80a3e8-2384-4a8b-ad8f-e3ea159a9317",
    "next": "0f2dd6c7-8484-4b6c-b081-f241376cef77"
  },
  "post": {
    "exerciseKey": "126917b6-56bc-4c94-81b7-f39263395546",
    "category": "QA",
    "title": "Vue 中父组件怎么监听到子组件的生命周期？",
    "level": 3,
    "createAt": "2024-06-06T01:29:50+00:00",
    "updateAt": "2024-08-10T17:07:43+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}