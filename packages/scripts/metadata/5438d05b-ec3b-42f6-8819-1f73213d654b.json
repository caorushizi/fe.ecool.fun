{
  "data": {
    "id": 658,
    "exerciseKey": "5438d05b-ec3b-42f6-8819-1f73213d654b",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对Redux的理解？其工作原理？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n`React`是用于构建用户界面的，帮助我们解决渲染`DOM`的过程\n\n而在整个应用中会存在很多个组件，每个组件的`state`是由自身进行管理，包括组件定义自身的`state`、组件之间的通信通过`props`传递、使用`Context`实现数据共享\n\n如果让每个组件都存储自身相关的状态，理论上来讲不会影响应用的运行，但在开发及后续维护阶段，我们将花费大量精力去查询状态的变化过程\n\n这种情况下，如果将所有的状态进行集中管理，当需要更新状态的时候，仅需要对这个管理集中处理，而不用去关心状态是如何分发到每一个组件内部的\n\n`redux`就是一个实现上述集中管理的容器，遵循三大基本原则：\n\n- 单一数据源\n- state 是只读的\n- 使用纯函数来执行修改\n\n注意的是，`redux`并不是只应用在`react`中，还与其他界面库一起使用，如`Vue`\n\n\n## 二、工作原理\n\n`redux `要求我们把数据都放在 `store `公共存储空间\n\n一个组件改变了 `store` 里的数据内容，其他组件就能感知到 `store `的变化，再来取数据，从而间接的实现了这些数据传递的功能\n\n工作流程图如下所示：\n\n ![](https://static.ecool.fun//article/b78d9d31-20aa-4692-8d09-9bb2960bfd1d.png)\n\n根据流程图，可以想象，`React Components` 是借书的用户， `Action Creactor` 是借书时说的话(借什么书)， `Store` 是图书馆管理员，`Reducer` 是记录本(借什么书，还什么书，在哪儿，需要查一下)， `state` 是书籍信息\n\n整个流程就是借书的用户需要先存在，然后需要借书，需要一句话来描述借什么书，图书馆管理员听到后需要查一下记录本，了解图书的位置，最后图书馆管理员会把这本书给到这个借书人\n\n转换为代码是，`React Components` 需要获取一些数据, 然后它就告知 `Store` 需要获取数据，这就是就是 `Action Creactor` , `Store` 接收到之后去 `Reducer` 查一下， `Reducer` 会告诉 `Store` 应该给这个组件什么数据\n\n\n\n## 三、如何使用\n\n创建一个`store`的公共数据区域\n\n```js\nimport { createStore } from 'redux' // 引入一个第三方的方法\nconst store = createStore() // 创建数据的公共存储区域（管理员）\n```\n\n还需要创建一个记录本去辅助管理数据，也就是`reduecer`，本质就是一个函数，接收两个参数`state`，`action`，返回`state`\n\n```js\n// 设置默认值\nconst initialState = {\n  counter: 0\n}\n\nconst reducer = (state = initialState, action) => {\n}\n```\n\n然后就可以将记录本传递给`store`，两者建立连接。如下：\n\n```js\nconst store = createStore(reducer)\n```\n\n如果想要获取`store`里面的数据，则通过`store.getState()`来获取当前`state`\n\n```js\nconsole.log(store.getState());\n```\n\n下面再看看如何更改`store`里面数据，是通过`dispatch`来派发`action`，通常`action`中都会有`type`属性，也可以携带其他的数据\n\n```js\nstore.dispatch({\n  type: \"INCREMENT\"\n})\n\nstore.dispath({\n  type: \"DECREMENT\"\n})\n\nstore.dispatch({\n  type: \"ADD_NUMBER\",\n  number: 5\n})\n```\n\n下面再来看看修改`reducer`中的处理逻辑：\n\n```js\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {...state, counter: state.counter + 1};\n    case \"DECREMENT\":\n      return {...state, counter: state.counter - 1};\n    case \"ADD_NUMBER\":\n      return {...state, counter: state.counter + action.number}\n    default: \n      return state;\n  }\n}\n```\n\n注意，`reducer`是一个纯函数，不需要直接修改`state`\n\n这样派发`action`之后，既可以通过`store.subscribe`监听`store`的变化，如下：\n\n```js\nstore.subscribe(() => {\n  console.log(store.getState());\n})\n```\n\n在`React`项目中，会搭配`react-redux`进行使用\n\n完整代码如下：\n\n```js\nconst redux = require('redux');\n\nconst initialState = {\n  counter: 0\n}\n\n// 创建reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {...state, counter: state.counter + 1};\n    case \"DECREMENT\":\n      return {...state, counter: state.counter - 1};\n    case \"ADD_NUMBER\":\n      return {...state, counter: state.counter + action.number}\n    default: \n      return state;\n  }\n}\n\n// 根据reducer创建store\nconst store = redux.createStore(reducer);\n\nstore.subscribe(() => {\n  console.log(store.getState());\n})\n\n// 修改store中的state\nstore.dispatch({\n  type: \"INCREMENT\"\n})\n// console.log(store.getState());\n\nstore.dispatch({\n  type: \"DECREMENT\"\n})\n// console.log(store.getState());\n\nstore.dispatch({\n  type: \"ADD_NUMBER\",\n  number: 5\n})\n// console.log(store.getState());\n```\n\n\n\n### 小结\n\n- createStore可以帮助创建 store\n- store.dispatch 帮助派发 action , action 会传递给 store\n- store.getState 这个方法可以帮助获取 store 里边所有的数据内容\n- store.subscrible 方法订阅 store 的改变，只要 store 发生改变， store.subscrible 这个函数接收的这个回调函数就会被执行\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T04:26:31.000Z",
    "updateAt": "2024-01-25T19:27:06.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 61,
    "prev": "025473a3-19c3-4398-94ab-c3d72002dcce",
    "next": "3804a9d9-03c0-4588-b696-1068d745c7b9"
  },
  "post": {
    "exerciseKey": "5438d05b-ec3b-42f6-8819-1f73213d654b",
    "category": "QA",
    "title": "说说你对Redux的理解？其工作原理？",
    "level": 2,
    "updateAt": "2024-01-25T19:27:06+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}