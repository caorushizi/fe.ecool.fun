{
  "data": {
    "id": 603,
    "exerciseKey": "0d68ac37-7345-4813-a9cd-95a5089c61ba",
    "category": "QA",
    "renderType": "md",
    "title": "JavaScript脚本延迟加载的方式有哪些？",
    "desc": null,
    "options": null,
    "explanation": "延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n* defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n* async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n* 动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n* 使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n* 让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-08-22T10:25:35.000Z",
    "updateAt": "2021-08-22T18:38:49.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 775,
    "prev": "1648c493-456c-426e-b57f-7a24ad14d40e",
    "next": "33363940-179b-4ae3-9cd3-7bf0a5619df9"
  },
  "post": {
    "exerciseKey": "0d68ac37-7345-4813-a9cd-95a5089c61ba",
    "category": "QA",
    "title": "JavaScript脚本延迟加载的方式有哪些？",
    "level": 3.5,
    "updateAt": "2021-08-22T18:38:49+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}