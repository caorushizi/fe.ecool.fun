{
  "data": {
    "id": 633,
    "exerciseKey": "d8fe4e1f-93ef-440b-a06b-81d22897afa2",
    "category": "QA",
    "renderType": "md",
    "title": "谈谈你对事件冒泡和捕获的理解",
    "desc": null,
    "options": null,
    "explanation": "事件冒泡和事件捕获分别由微软和网景公司提出，这两个概念都是为了解决页面中事件流（事件发生顺序）的问题。\n\n```html\n<div id=\"outer\">\n    <p id=\"inner\">Click me!</p>\n</div>\n```\n上面的代码当中一个div元素当中有一个p子元素，如果两个元素都有一个click的处理函数，那么我们怎么才能知道哪一个函数会首先被触发呢？\n\n## 事件冒泡\n\n微软提出了名为事件冒泡(event bubbling)的事件流。事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\n因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是p -> div -> body -> html -> document\n\n## 事件捕获\n\n网景提出另一种事件流名为事件捕获(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。\n\n因此在事件捕获的概念下在p元素上发生click事件的顺序应该是document -> html -> body -> div -> p\n\n## addEventListener的第三个参数\n\n网景 和 微软 曾经的战争还是比较火热的，当时， 网景主张捕获方式，微软主张冒泡方式。后来 w3c 采用折中的方式，平息了战火，制定了统一的标准——**先捕获再冒泡**。\n\naddEventListener的第三个参数就是为冒泡和捕获准备的。\n\naddEventListener有三个参数：\n\n```js\nelement.addEventListener(event, function, useCapture)\n```\n\n* 第一个参数是需要绑定的事件\n* 第二个参数是触发事件后要执行的函数\n* 第三个参数默认值是false，表示在事件冒泡阶段调用事件处理函数;如果参数为true，则表示在事件捕获阶段调用处理函数。\n\n\n\n",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-09-25T10:17:37.000Z",
    "updateAt": "2021-09-25T19:07:02.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 750,
    "prev": "1b65452c-ab0b-41a8-8621-fc25704afa33",
    "next": "d86b13c6-54f1-423a-80c5-e52c24f71e30"
  },
  "post": {
    "exerciseKey": "d8fe4e1f-93ef-440b-a06b-81d22897afa2",
    "category": "QA",
    "title": "谈谈你对事件冒泡和捕获的理解",
    "level": 1,
    "updateAt": "2021-09-25T19:07:02+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
