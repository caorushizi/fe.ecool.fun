{
  "data": {
    "id": 2873,
    "exerciseKey": "b7e5c9a8-6756-4c79-9b75-a3cb680e12b4",
    "category": "QA",
    "renderType": "md",
    "title": "get 请求的参数是否能够使用数组？",
    "desc": null,
    "options": null,
    "explanation": "GET 请求的参数可以使用数组。\n\n虽然在 URL 查询字符串中直接表示数组略有复杂，但有几种常见的方式来实现数组的传递。以下是一些常见的处理数组参数的方法：\n\n### 1. **使用重复的参数名**\n\n最简单的方法是使用重复的参数名，每个数组元素作为一个独立的参数传递。例如，传递一个数组 `[1, 2, 3]` 可以表示为：\n\n```\n?numbers=1&numbers=2&numbers=3\n```\n\n这种方式常见于许多后端框架和库，它们能够解析这种格式的参数。\n\n### 2. **使用方括号表示法**\n\n在一些编程环境中，可以使用方括号表示法来传递数组，这种方式可以表示嵌套的数组和对象。例如：\n\n```\n?numbers[]=1&numbers[]=2&numbers[]=3\n```\n\n这种方式在 PHP 和 Ruby 等语言中非常常见，它们能够解析这样的查询字符串。\n\n### 3. **使用逗号分隔的字符串**\n\n另一种常见的方法是将数组元素用逗号或其他分隔符连接成一个字符串。例如：\n\n```\n?numbers=1,2,3\n```\n\n在服务器端，需要将这个字符串分隔开来以恢复原始数组。这种方式在 JavaScript 中也比较常见，尤其是当数组的顺序不需要保留时。\n\n### 4. **使用 JSON 字符串**\n\n在一些情况下，可以将数组序列化为 JSON 字符串进行传递。例如：\n\n```\n?numbers=%5B1%2C2%2C3%5D\n```\n\n这里的 `%5B`, `%2C`, 和 `%5D` 是 URL 编码形式的 `[`，`,` 和 `]`。在服务器端，需将 JSON 字符串解析回数组。\n\n### **示例代码**\n\n**前端示例：**\n\n```javascript\n// 使用重复的参数名\nconst array = [1, 2, 3];\nconst queryString = array.map(value => `numbers=${value}`).join('&');\nconst url = `https://example.com?${queryString}`;\n\n// 使用方括号表示法\nconst queryStringBrackets = array.map(value => `numbers[]=${value}`).join('&');\nconst urlBrackets = `https://example.com?${queryStringBrackets}`;\n\n// 使用逗号分隔的字符串\nconst queryStringComma = `numbers=${array.join(',')}`;\nconst urlComma = `https://example.com?${queryStringComma}`;\n\n// 使用 JSON 字符串\nconst queryStringJSON = `numbers=${encodeURIComponent(JSON.stringify(array))}`;\nconst urlJSON = `https://example.com?${queryStringJSON}`;\n```\n\n**后端示例（Node.js Express）：**\n\n```javascript\napp.get('/', (req, res) => {\n  // 使用重复的参数名\n  const numbers = req.query.numbers; // [1, 2, 3] - 自动解析为数组\n\n  // 使用方括号表示法\n  const numbersBrackets = req.query['numbers[]']; // [1, 2, 3] - 自动解析为数组\n\n  // 使用逗号分隔的字符串\n  const numbersComma = req.query.numbers.split(','); // ['1', '2', '3'] - 需要转换为数字数组\n\n  // 使用 JSON 字符串\n  const numbersJSON = JSON.parse(req.query.numbers); // [1, 2, 3]\n});\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 2.5,
    "appId": 7,
    "createAt": "2024-08-20T03:05:55.000Z",
    "updateAt": "2024-08-20T11:14:21.000Z",
    "isCollected": false,
    "currentIndex": 13,
    "filterTotalNum": 1487,
    "prev": "24d0a905-35d4-407c-8852-f3d0ba41d214",
    "next": "d0fd3a52-1ddf-42b2-b9d8-f36fc885d237"
  },
  "post": {
    "exerciseKey": "b7e5c9a8-6756-4c79-9b75-a3cb680e12b4",
    "category": "QA",
    "title": "get 请求的参数是否能够使用数组？",
    "level": 2.5,
    "createAt": "2024-08-20T03:05:55+00:00",
    "updateAt": "2024-08-20T11:14:21+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}