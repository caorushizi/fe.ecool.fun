{
  "data": {
    "id": 579,
    "exerciseKey": "f317438d-44bf-4476-8f9d-b1e51521fa20",
    "category": "QA",
    "renderType": "md",
    "title": "Fiber 为什么是 React 性能的一个飞跃？",
    "desc": null,
    "options": null,
    "explanation": "## 什么是 Fiber\n\nFiber 的英文含义是“纤维”，它是比线程（Thread）更细的线，比线程（Thread）控制得更精密的执行模型。在广义计算机科学概念中，Fiber 又是一种协作的（Cooperative）编程模型（协程），帮助开发者用一种【既模块化又协作化】的方式来编排代码。\n\n在 React 中，Fiber 就是 React 16 实现的一套新的更新机制，让 React 的更新过程变得可控，避免了之前采用递归需要一气呵成影响性能的做法。\n\n## React Fiber 中的时间分片\n\n把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会。\n\nReact Fiber 把更新过程碎片化，每执行完一段更新过程，就把控制权交还给 React 负责任务协调的模块，看看有没有其他紧急任务要做，如果没有就继续去更新，如果有紧急任务，那就去做紧急任务。\n\n### Stack Reconciler\n\n基于栈的 Reconciler，浏览器引擎会从执行栈的顶端开始执行，执行完毕就弹出当前执行上下文，开始执行下一个函数，直到执行栈被清空才会停止。然后将执行权交还给浏览器。由于 React 将页面视图视作一个个函数执行的结果。每一个页面往往由多个视图组成，这就意味着多个函数的调用。\n\n如果一个页面足够复杂，形成的函数调用栈就会很深。每一次更新，执行栈需要一次性执行完成，中途不能干其他的事儿，只能\"一心一意\"。结合前面提到的浏览器刷新率，JS 一直执行，浏览器得不到控制权，就不能及时开始下一帧的绘制。如果这个时间超过 16ms，当页面有动画效果需求时，动画因为浏览器不能及时绘制下一帧，这时动画就会出现卡顿。不仅如此，因为事件响应代码是在每一帧开始的时候执行，如果不能及时绘制下一帧，事件响应也会延迟。\n\n### Fiber Reconciler\n\n#### 链表结构\n\n在 React Fiber 中用链表遍历的方式替代了 React 16 之前的栈递归方案。在 React 16 中使用了大量的链表。\n\n* 使用多向链表的形式替代了原来的树结构；\n\n```html\n<div id=\"A\">\nA1\n<div id=\"B1\">\n  B1\n  <div id=\"C1\"></div>\n</div>\n<div id=\"B2\">\n  B2\n</div>\n</div>\n```\n![image.png](https://static.ecool.fun//article/2c7f91e9-d79e-419c-90b1-40e7dbd62be2.png)\n\n* 副作用单链表；\n\n![image.png](https://static.ecool.fun//article/974a02fc-c123-4fd4-992d-66202a73dc4d.png)\n\n* 状态更新单链表；\n\n![image.png](https://static.ecool.fun//article/aaa1e291-9ba6-4594-ad61-348920d47935.png)\n\n链表是一种简单高效的数据结构，它在当前节点中保存着指向下一个节点的指针；遍历的时候，通过操作指针找到下一个元素。\n\n![image.png](https://static.ecool.fun//article/8611fc56-2341-482c-a089-57f2b0fdb8ec.png)\n\n链表相比顺序结构数据格式的好处就是：\n\n* 操作更高效，比如顺序调整、删除，只需要改变节点的指针指向就好了。\n* 不仅可以根据当前节点找到下一个节点，在多向链表中，还可以找到他的父节点或者兄弟节点。\n\n但链表也不是完美的，缺点就是：\n\n* 比顺序结构数据更占用空间，因为每个节点对象还保存有指向下一个对象的指针。\n* 不能自由读取，必须找到他的上一个节点。\n\nReact 用空间换时间，更高效的操作可以方便根据优先级进行操作。同时可以根据当前节点找到其他节点，在下面提到的挂起和恢复过程中起到了关键作用。\n\n\n\n\n\n\n\n\n",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2021-08-07T09:03:35.000Z",
    "updateAt": "2024-01-25T19:16:31.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 82,
    "prev": "d6aa767b-f4e2-4200-ac29-22f5f1759021",
    "next": "4585f639-0eff-4190-9fa0-e1c0838284e8"
  },
  "post": {
    "exerciseKey": "f317438d-44bf-4476-8f9d-b1e51521fa20",
    "category": "QA",
    "title": "Fiber 为什么是 React 性能的一个飞跃？",
    "level": 4,
    "updateAt": "2024-01-25T19:16:31+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
