{
  "data": {
    "id": 2063,
    "exerciseKey": "b42993a0-daf4-47df-b933-2fbded17cdff",
    "category": "QA",
    "renderType": "md",
    "title": "说说下面代码的输出结果",
    "desc": "```\nPromise.resolve().then(() => {\n  console.log(0)\n  return Promise.resolve(4)\n}).then((res) => {\n  console.log(res)\n})\n\nPromise.resolve().then(() => {\n  console.log(1)\n}).then(() => {\n  console.log(2)\n}).then(() => {\n  console.log(3)\n}).then(() => {\n  console.log(5)\n}).then(() =>{\n  console.log(6)\n})\n```",
    "options": null,
    "explanation": "输出结果是：\n\n```\n0\n1\n2\n3\n4\n5\n6\n```\n\n## 1、分析\n\n一般遇到`Promise.resolve()`时，相当于`new Promise(resolve => {resolve()})`都是同步完成的，不会消耗微任务。 但以下情况时，需要注意，我们先看三组代码：\n\n```js\n//代码1\nnew Promise(resolve => {\n    resolve(Promise.resolve(4));//resolve了一个Promise\n})\n.then((res) => {\n    console.log(res)\n})\n```\n\n```js\n//代码2\nPromise.resolve().then(() => {\n    return Promise.resolve(4);//return了一个Promise\n})\n.then((res) => {\n    console.log(res)\n})\n```\n\n```js\n//代码3\nPromise.resolve().then(() => {\n    return 4;//return了一个Number类型的4\n})\n.then((res) => {\n    console.log(res)\n})\n```\n\n这三个输出结果，打印出来的都是数字4。\n\n我们可以看出不同，代码3是我们最常见的情况。代码3里打印的res是`4`，和上边`return`的是同样的数据类型。那么代码1和代码2的res为什么不是`Object`类型的`Promise{<fulfilled>: 4}`呢？\n\n在一般情况下：\n\n```js\nPromise.resolve().then(() => {\n    return 4;\n})\n```\n\n这段代码中，`Promise.resolve().then`是一个构造函数,`() => {return 4;}`是这个函数的参数，这个函数调用，最后返回一个值为`4`的`Promise`(即`new Promise(resolve => resolve(4)`).\n\n而在\n\n```js\nnew Promise(resolve => {\n    resolve(Promise.resolve(4));//resolve了一个Promise\n})\n```\n\n```js\nPromise.resolve().then(() => {\n    return Promise.resolve(4);//return了一个Promise\n})\n```\n\n中，因为js在遇到`resolve`或者`return`一个`Promise`对象时，会先求得这个`Promise`对象的值，也就是这个`Promise`的状态为`fulfilled`或`rejected`的值(假如这个值是`'a'`)，再用这个值作为返回的新的`Promised`的值，这个新的`Promsie`(就是`new Promise(resolve => resolve('a')`)作为下级链式调用的`Promise`。\n\n## 2、结论\n\n在chrome内部实现的Promise和标准的Promise/A+规范存在差异。浏览器内部实现的区别。我们可以理解为，resolve或者return遇到一个Promise对象时，得到这个Promise的值之后，会把这个值用微任务包装起来，在return值向外传递(因为后边没有.then()了，所以是向父级的外层传递)时，会产生第二个微任务。\n\n所以代码\n\n```js\n//代码1\nnew Promise(resolve => {\n    resolve(Promise.resolve(4));//resolve了一个Promise\n})\n.then((res) => {\n    console.log(res)\n})\n```\n\n可以理解为\n\n```js\nnew Promise(resolve => {\n    resolve(4);\n})\n.then()\n.then()\n.then((res) => {\n    console.log(res)\n})\n```\n\n对应的，代码\n\n```js\n//代码2\nPromise.resolve().then(() => {\n    return Promise.resolve(4);//return了一个Promise\n})\n.then((res) => {\n    console.log(res)\n})\n```\n\n可以理解为\n\n```js\nPromise.resolve()\n.then(() => {\n    return 4;\n})\n.then()\n.then()\n.then((res) => {\n    console.log(res)\n})\n```\n\n这样理解的，核心就是会比正常的return一个非Promise的值时，多两个微任务.then().then()\n\n另外的\n\n```js\nPromise.resolve().then(() => {\n    return Promise.resolve(Promise.resolve(Promise.resolve(4)))\n})\n.then(res => {\n    console.log(res);\n})\n```\n\n像这样的`return Promise.resolve(Promise.resolve(Promise.resolve(4)))`嵌套多层`Promise`，其实和`Promise.resolve(4)`是一样的，并不会多产生微任务。因为这两段代码的`Promsie`状态变为`fulfilled`的过程并不需要等待。而是拿到它的值之后，在向后运行的时候，会产生微任务。\n\n但如果是\n\n```js\nPromise.resolve().then(() => {\n    return new Promise(resolve => {\n            resolve(4)\n    })\n    .then(res => {\n            return 4.1\n    })\n    .then(res => {\n            return 4.2\n    })\n})\n.then(res => {\n    console.log(res);\n})\n```\n\n这时`.then(res => { console.log(res); })`想要运行，需要等待前边return 的Promise状态变为`fulfilled`才行，\n\n```js\nnew Promise(resolve => {\n        resolve(4)\n})\n.then(res => {\n        return 4.1\n})\n.then(res => {\n        return 4.2\n})\n```\n\n本身是会注册两个微任务的，而拿到它的值之后，在向后运行的时候，又会产生两个任务(包装值一次，return传递一次)。\n\n## 3、回顾\n\n我们再来看这个题目\n\n```js\nPromise.resolve().then(() => {\n    console.log(0);\n    return Promise.resolve(4);\n}).then((res) => {\n    console.log(res)\n})\n\nPromise.resolve().then(() => {\n    console.log(1);\n}).then(() => {\n    console.log(2);\n}).then(() => {\n    console.log(3);\n}).then(() => {\n    console.log(5);\n}).then(() =>{\n    console.log(6);\n})\n```\n\n按照上边的分析，可以对应转化为\n\n```js\nPromise.resolve().then(() => {\n    console.log(0);\n    return 4;\n})\n.then()\n.then()\n.then((res) => {\n    console.log(res)\n})\n\nPromise.resolve().then(() => {\n    console.log(1);\n}).then(() => {\n    console.log(2);\n}).then(() => {\n    console.log(3);\n}).then(() => {\n    console.log(5);\n}).then(() =>{\n    console.log(6);\n})\n```\n所以运行结果是0,1,2,3,4,5,6\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-12-17T10:21:16.000Z",
    "updateAt": "2024-01-02T20:07:00.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 209,
    "prev": "db22b09c-fdbb-4a6c-8fdd-2ad65bb11846",
    "next": "6e2ce014-4783-4e8d-ba0a-e655a8b687cd"
  },
  "post": {
    "exerciseKey": "b42993a0-daf4-47df-b933-2fbded17cdff",
    "category": "QA",
    "title": "说说下面代码的输出结果",
    "level": 3,
    "updateAt": "2024-01-02T20:07:00+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
