{
  "data": {
    "id": 2089,
    "exerciseKey": "97fda656-bfa1-4aa9-b1a5-1d0247178cfc",
    "category": "QA",
    "renderType": "md",
    "title": "如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？",
    "desc": null,
    "options": null,
    "explanation": "## 迭代协议\n\n题目问怎么能让var \\[a,b\\] = {a:1,b:2} 成立，那么我们首先要运行一下，看看它是怎么个不成立法。\n\n```js\nconst obj = {\n    a:'1',\n    b:'2',\n}\n\nconst [a,b] = obj\n```\n\n![](https://static.ecool.fun//article/2e0932fb-2f62-41b7-b1cc-17df3a831f50.jpeg)\n\n运行之后打开控制台可以发现报错信息，它告诉我们obj这个对象是不可迭代的，那么我们想办法把obj变成可迭代的是不是就能解决这个问题，这要怎么做呢？想要搞明白这点我们需要先了解一下可迭代协议。\n\n**可迭代协议的概念（** **MDN** **）**\n\n> 可迭代协议允许 JavaScript 对象定义或定制它们的迭代行为，例如，在一个 `for..of` 结构中，哪些值可以被遍历到。一些内置类型同时是[内置的可迭代对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%86%85%E7%BD%AE%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1 \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%86%85%E7%BD%AE%E7%9A%84%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1\")，并且有默认的迭代行为，比如 `Array` 或者 `Map`，而其他内置类型则不是（比如 `Object`）。\n> \n> 要成为可迭代对象，该对象必须实现 `@@iterator` 方法，这意味着对象（或者它[原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\")上的某个对象）必须有一个键为 `@@iterator` 的属性，可通过常量 `Symbol.iterator` 访问该属性：\n> \n> `[Symbol.iterator]`\n> \n> 一个无参数的函数，其返回值为一个符合[迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE\")的对象。\n> \n> 当一个对象需要被迭代的时候（比如被置入一个 `for...of` 循环时），首先，会不带参数调用它的 `@@iterator` 方法，然后使用此方法返回的迭代器获得要迭代的值。\n\n说人话就是，要想让obj成为一个可迭代的对象，就需要它实现 `@@iterator` 方法，具体表现为对象身上要有一个名为`[Symbol.iterator]` 的方法。而数组和Map则是一开始就有这个方法，所以它们是可迭代的。而对象身上则没有这个默认行为，所以不可迭代。真的是这样吗？我们创建一个数组，看看数组身上到底有没有`[Symbol.iterator]` 方法。\n\n```js\nconst array = [1,2,3]\nconsole.log(array)\n```\n\n![](https://static.ecool.fun//article/2174c1e1-7964-41ef-830e-22e876aa652b.jpeg)\n\n点开原型查看\n\n![](https://static.ecool.fun//article/0412f825-a681-48fb-905e-886514b24402.jpeg)\n\n发现真的有一个Symbol.iterator()方法，该方法会返回一个迭代器对象。我们来调用一下\n\n```js\nconst array = [1,2,3]\nconst iterator = array[Symbol.iterator]()\nconsole.log(iterator)\nconsole.log(iterator.next())\nconsole.log(iterator.next())\nconsole.log(iterator.next())\nconsole.log(iterator.next())\n```\n\n![](https://static.ecool.fun//article/c0a94fec-8c05-43dc-9039-2b838abfa11c.jpeg)\n\n打印iterator对象后发现在它的原型上有一个next()方法，调用next()方法，会得到一个对象value就是当前迭代的值，done则代表当前迭代器是否已经迭代完成。\n\n**数组** **解构** **的本质**\n\n```js\nconst array = [1,2,3]\nvar [a,b,c] = array\n// 本质上是\nconst iterator = array[Symbol.iterator]()\nvar a = iterator.next().value\nvar b = iterator.next().value\nvar c = iterator.next().value\n```\n\n## 解决方法\n\n到此为止我们可知，要想满足迭代协议需要对象身上有一个名为`[Symbol.iterator]`的方法。再使用for..of或者解构赋值的时候会隐式的调用这个方法，得到一个迭代对象，通过迭代对象的next方法判断当前是否完成迭代和具体迭代的值。\n\n也就是说我们要在obj上添加`[Symbol.iterator]`方法并且完成next方法的逻辑\n\n最终代码如下：\n\n```js\n const obj = {\n    a: '1',\n    b: '2',\n    [Symbol.iterator]() {\n        let index = 0\n        const keys = Object.keys(this)\n        return {\n            next() {\n                if (index < keys.length) {\n                    return {\n                        done: false,\n                        value: obj[keys[index++]]\n                    }\n                }\n                return {done:true,value:undefined}\n            }\n        }\n    }\n}\n\nconst [a, b] = obj\n```\n\n当然，我们也可以用for...of去循环遍历这个对象，我看谁再说for...of不能遍历对象(doge)\n\n```js\nfor(let i of obj){\n    console.log(i)\n}\n// 1\n// 2\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2024-03-18T11:22:53.000Z",
    "updateAt": "2024-03-18T19:23:08.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 6,
    "prev": "446d36f9-0845-432d-957a-7a9a2997a276",
    "next": "7ddb0505-9a75-4d2b-acb5-9d3bebdcf07d"
  },
  "post": {
    "exerciseKey": "97fda656-bfa1-4aa9-b1a5-1d0247178cfc",
    "category": "QA",
    "title": "如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？",
    "level": 3,
    "updateAt": "2024-03-18T19:23:08+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
