{
  "data": {
    "id": 1733,
    "exerciseKey": "e8631603-4764-426e-b62b-ddd6dd663d4f",
    "category": "QA",
    "renderType": "md",
    "title": "说说React事件和原生事件的执行顺序",
    "desc": null,
    "options": null,
    "explanation": "我们知道，`React`在内部对事件做了统一的处理，合成事件是一个比较大的概念\n\n### 为什么要有合成事件\n1. 在传统的事件里，不同的浏览器需要兼容不同的写法，在合成事件中`React`提供统一的事件对象，抹平了浏览器的兼容性差异\n2. `React`通过顶层监听的形式，通过事件委托的方式来统一管理所有的事件，可以在事件上区分事件优先级，优化用户体验\n\n`React`在合成事件上对于`16`版本和`17`版本的合成事件有很大不同，我们也会简单聊聊区别。\n\n### 概念\n\n###### 事件委托\n\n事件委托的意思就是可以通过给父元素绑定事件委托，通过事件对象的`target`属性可以获取到当前触发目标阶段的`dom`元素，来进行统一管理\n\n比如写原生`dom`循环渲染的时候，我们要给每一个子元素都添加`dom`事件，这种情况最简单的方式就是通过事件委托在父元素做一次委托，通过`target`属性判断区分做不同的操作\n\n###### 事件监听\n\n事件监听主要用到了`addEventListener`这个函数，具体怎么用可以[点击](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)进行查看\n事件监听和事件绑定的最大区别就是事件监听可以给一个事件监听多个函数操作，而事件绑定只有一次\n\n``` js\n// 可以监听多个，不会被覆盖\neventTarget.addEventListener('click', () => {});\neventTarget.addEventListener('click', () => {});\n\neventTarget.onclick = function () {};\neventTarget.onclick = function () {}; // 第二个会把第一个覆盖\n```\n\n###### 事件执行顺序\n``` html\n<div>\n  <span>点我</span>\n</div>\n```\n当我们点击`span`标签的时候会经过这么三个过程，在路径内的元素绑定的事件都会进行触发\n> 捕获阶段 => 目标阶段 => 冒泡阶段\n> \n![image.png](https://static.ecool.fun/article/82fffff2-46fa-4196-8552-4d7ecbca7e9a.jpeg)\n\n### 合成事件\n在看之前先看一下这几个问题\n- 原生事件和合成事件的执行顺序是什么？\n- 合成事件在什么阶段下会被执行？\n- 阻止原生事件的冒泡，会影响到合成事件的执行吗？\n- 阻止合成事件的冒泡，会影响到原生事件的执行吗？\n\n下面一个例子说清楚，[点击在线查看编辑](https://codesandbox.io/s/determined-glitter-oxh8kj?file=/src/App.js)\n\n```jsx\nimport React, { useRef, useEffect } from \"react\";\nimport \"./styles.css\";\n\nconst logFunc = (target, isSynthesizer, isCapture = false) => {\n    const info = `${isSynthesizer ? \"合成\" : \"原生\"}事件，${\n        isCapture ? \"捕获\" : \"冒泡\"}阶段，${target}元素执行了`;\n    \n    console.log(info);\n};\n\nconst batchManageEvent = (targets, funcs, isRemove = false) => {\n    targets.forEach((target, targetIndex) => {\n        funcs[targetIndex].forEach((func, funcIndex) => {\n            target[isRemove ? \"removeEventListener\" : \"addEventListener\"](\n                \"click\",\n                func,\n                !funcIndex\n            );\n        });\n    });\n};\n\nexport default function App() {\n    const divDom = useRef();\n    const h1Dom = useRef();\n    useEffect(() => {\n    \n        const docClickCapFunc = () => logFunc(\"document\", false, true);\n        const divClickCapFunc = () => logFunc(\"div\", false, true);\n        const h1ClickCapFunc = () => logFunc(\"h1\", false, true);\n        const docClickFunc = () => logFunc(\"document\", false);\n        const divClickFunc = () => logFunc(\"div\", false);\n        const h1ClickFunc = () => logFunc(\"h1\", false);\n\n        batchManageEvent(\n            [document, divDom.current, h1Dom.current],\n            [\n                [docClickCapFunc, docClickFunc],\n                [divClickCapFunc, divClickFunc],\n                [h1ClickCapFunc, h1ClickFunc]\n            ]\n        );\n\n        return () => {\n            batchManageEvent(\n                   [document, divDom.current, h1Dom.current],\n                [\n                    [docClickCapFunc, docClickFunc],\n                    [divClickCapFunc, divClickFunc],\n                    [h1ClickCapFunc, h1ClickFunc]\n                ],\n                true\n            );\n        };\n    }, []);\n\n    return (\n        <div\n          ref={divDom}\n          className=\"App1\"\n          onClickCapture={() => logFunc(\"div\", true, true)}\n          onClick={() => logFunc(\"div\", true)}\n        >\n          <h1\n            ref={h1Dom}\n            onClickCapture={() => logFunc(\"h1\", true, true)}\n            onClick={() => logFunc(\"h1\", true)}\n          >\n            Hello CodeSandbox\n          </h1>\n        </div>\n    );\n}\n\n```\n看这个例子，当我们点击`h1`的时候\n\n会先执行原生事件事件流，当执行到`document`的冒泡阶段的时候做了个拦截，在这个阶段开始执行合成事件\n\n![image.png](https://static.ecool.fun/article/e4fbc614-6696-4e8d-871a-e144df6b5c8f.jpeg)\n\n我们用一个图简单描述一下\n\n![image.png](https://static.ecool.fun/article/d9f769d9-a375-4caa-81c3-b06bb400312e.jpeg)\n\n知道上面的概念，那我们回答开始阶段的后面两个问题\n\n当我们把上面的`demo`的原生`div`的`stopPropagation()`  方法调用阻止捕获和冒泡阶段中当前事件的进一步传播，会阻止后续的所有事件执行\n\n\n``` jsx\n// ...\nconst divClickCapFunc = (e) => {\n    e.stopPropagation(); // 增加原生捕获阶段的阻止事件\n    logFunc(\"div\", false, true);\n};\n// ...\n```\n\n![image.png](https://static.ecool.fun//article/ca4890af-7c01-4071-970d-1ec5ce85f04c.jpeg)\n\n我们可以看到，当阻止之后，我们点击`h1`，事件流运行到`div`的捕获阶段就不触发了，后续的所有的包括合成事件也都不会触发\n\n那当我们给合成事件的事件流中断了会发生什么呢？\n\n![image.png](https://static.ecool.fun//article/b8311107-7e7f-4678-80c4-b4bac281d381.jpeg)\n\n可以看到运行到捕获阶段的`div`之后被阻止传播了，后续的所有合成事件都不会执行了，但是原生的`document`冒泡还是会执行完。\n\n### 模拟阶段\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, maximum-scale=1, user-scalable=no\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Web site created using create-react-app\" />\n    <link href=\"favicon.ico\" type=\"image/x-icon\" rel=\"icon\" />\n    <title>浅谈React合成事件</title>\n  </head>\n  <body>\n    <div id=\"wrapper\">\n      <h1 id=\"content\">hello</h1>\n    </div>\n  </body>\n  <script>\n    const logFunc = (target, isSynthesizer, isCapture = false) => {\n      const info = `${isSynthesizer ? '合成' : '原生'}事件，${isCapture ? '捕获' : '冒泡'}阶段，${target}元素执行了`;\n      console.log(info);\n    };\n    // document的派发事件函数\n    const dispatchEvent = currentDom => {\n      let current = currentDom;\n      let eventCallbacks = []; // 存储冒泡事件回调函数\n      let eventCaptureCallbacks = []; // 存储冒泡事件回调函数\n      // 收集事件流一路上的所有回调函数\n      while (current) {\n        if (current.onClick) {\n          eventCallbacks.push(current.onClick);\n        }\n        if (current.onClickCapture) {\n          // 捕获阶段由外到内，所以需要把回调函数放到数组的最前面\n          eventCaptureCallbacks.unshift(current.onClickCapture);\n        }\n        current = current.parentNode;\n      }\n      // 执行调用\n      eventCaptureCallbacks.forEach(callback => callback());\n      eventCallbacks.forEach(callback => callback());\n    };\n    const wrapperDom = document.getElementById('wrapper');\n    const contentDom = document.getElementById('content');\n\n    // 一路上注册原生事件\n    document.addEventListener('click', () => logFunc('document', false, true), true);\n    wrapperDom.addEventListener('click', () => logFunc('div', false, true), true);\n    contentDom.addEventListener('click', () => logFunc('h1', false, true), true);\n    contentDom.addEventListener('click', () => logFunc('h1', false));\n    wrapperDom.addEventListener('click', () => logFunc('div', false));\n    document.addEventListener('click', e => {\n      dispatchEvent(e.target); // 这里收集一路上的事件进行派发\n      logFunc('document', false);\n    });\n\n    // 模拟合成事件\n    wrapperDom.onClick = () => logFunc('div', true);\n    wrapperDom.onClickCapture = () => logFunc('div', true, true);\n    contentDom.onClick = () => logFunc('h1', true);\n    contentDom.onClickCapture = () => logFunc('h1', true, true);\n  </script>\n</html>\n\n```\n点击`h1`可以看到一路上的注册的所有事件已经执行了\n\n![image.png](https://static.ecool.fun/article/a8d86c98-7501-41de-a462-ecf8286d4c3b.jpeg)\n\n`React16`给`document`上加的统一的拦截判发事件会在一定情况下出问题，下面举个例子简单说明一下\n\n### 16案例\n\n[点我](https://codesandbox.io/s/practical-lichterman-1lhvb1?file=/src/App.js:0-924)查看在线案例\n\n``` jsx\nimport React, { useEffect, useState } from 'react';\nimport './styles.css';\n\nconst Modal = ({ onClose }) => {\n  useEffect(() => {\n    document.addEventListener('click', onClose);\n    return () => {\n      document.removeEventListener('click', onClose);\n    };\n  }, [onClose]);\n  return (\n    <div\n      style={{ width: 300, height: 300, backgroundColor: 'red' }}\n      onClick={e => {\n        e.stopPropagation();\n        // e.nativeEvent.stopImmediatePropagation();\n      }}\n    >\n      Modal\n    </div>\n  );\n};\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  return (\n    <div className=\"App\">\n      <button\n        onClick={() => {\n          setVisible(true);\n        }}\n      >\n        点我弹出modal\n      </button>\n      {visible && <Modal onClose={() => setVisible(false)} />}\n    </div>\n  );\n}\nexport default App;\n```\n\n写完之后点击按钮`Modal`被弹出来, 但是点击`modal`里面的内容`modal`就隐藏了，添加阻止事件流函数还是不行\n\n\n原因就是点击之后，事件冒泡到`document`上，同时也执行了他身上挂载的方法，解决办法就是给点击事件添加\n`e.nativeEvent.stopImmediatePropagation();`\n\n`stopImmediatePropagation`和`stopPropagation`的区别就是，前者会阻止当前节点下所有的事件监听的函数，后者不会\n\n那`react17`及之后做了什么改变呢\n\n### 16和17的区别\n\n在`17`版本中，`React`把事件节点绑定函数绑定在了`render`的根节点上，避免了上述的问题,\n\n用上面的`demo`的在线案例把版本改成17之后，可以发现事件的执行顺序变了\n\n![image.png](https://static.ecool.fun/article/b1affb78-f4b6-465f-99e6-705312b4ece6.jpeg)\n\n### 模拟17版本\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, maximum-scale=1, user-scalable=no\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Web site created using create-react-app\" />\n    <link href=\"favicon.ico\" type=\"image/x-icon\" rel=\"icon\" />\n    <title>浅谈React合成事件</title>\n  </head>\n  <body>\n    <div id=\"root\">\n      <div id=\"wrapper\">\n        <h1 id=\"content\">hello</h1>\n      </div>\n    </div>\n  </body>\n  <script>\n    const logFunc = (target, isSynthesizer, isCapture = false) => {\n      const info = `${isSynthesizer ? '合成' : '原生'}事件，${isCapture ? '捕获' : '冒泡'}阶段，${target}元素执行了`;\n      console.log(info);\n    };\n    // document的派发事件函数\n    const dispatchEvent = (currentDom, useCapture = false) => {\n      let current = currentDom;\n      let eventCallbacks = []; // 存储冒泡事件回调函数\n      const eventTypeName = useCapture ? 'onClickCapture' : 'onClick'; // 冒泡事件或者捕获事件的名称\n      const actionName = useCapture ? 'unshift' : 'push';\n      while (current) {\n        if (current[eventTypeName]) {\n          eventCallbacks[actionName](current[eventTypeName]);\n        }\n        current = current.parentNode;\n      }\n      eventCallbacks.forEach(callback => callback());\n    };\n    const wrapperDom = document.getElementById('wrapper');\n    const contentDom = document.getElementById('content');\n    const root = document.getElementById('root');\n\n    // 一路上注册原生事件\n    document.addEventListener('click', () => logFunc('document', false, true), true);\n    root.addEventListener(\n      'click',\n      e => {\n        dispatchEvent(e.target, true);\n        logFunc('root', false, true);\n      },\n      true\n    );\n    wrapperDom.addEventListener('click', () => logFunc('div', false, true), true);\n    contentDom.addEventListener('click', () => logFunc('h1', false, true), true);\n    contentDom.addEventListener('click', () => logFunc('h1', false));\n    wrapperDom.addEventListener('click', () => logFunc('div', false));\n    root.addEventListener('click', e => {\n      dispatchEvent(e.target); // 这里收集一路上的事件进行派发\n      logFunc('root', false);\n    });\n    document.addEventListener('click', () => logFunc('document', false));\n    // 模拟合成事件\n    wrapperDom.onClick = () => logFunc('div', true);\n    wrapperDom.onClickCapture = () => logFunc('div', true, true);\n    contentDom.onClick = () => logFunc('h1', true);\n    contentDom.onClickCapture = () => logFunc('h1', true, true);\n  </script>\n</html>\n\n```\n\n区别就是在外层增加了一个`root`模拟根节点，修改了`dispatchEvent`的逻辑\n\n可以看到，效果已经和`17`版本的一样了\n\n![image.png](https://static.ecool.fun/article/32437d31-5387-4d09-8c31-0e08ef64877a.jpeg)\n\n回看`16demo`，切换版本到`17`，当我们切换到`17`的时候，用`stopPropagation`就可以解决问题了,\n原因就是他在`root`节点上绑定的事件冒泡函数，`stopPropagation`切断了事件流，不会流向到`document`身上了\n\n### 总结\n* `16`版本先执行原生事件，当冒泡到`document`时，统一执行合成事件，\n* `17`版本在原生事件执行前先执行合成事件捕获阶段，原生事件执行完毕执行冒泡阶段的合成事件,通过根节点来管理所有的事件\n \n原生的阻止事件流会阻断合成事件的执行，合成事件阻止后也会影响到后续的原生执行",
    "pivot": "",
    "vipLimit": 1,
    "level": 2.5,
    "appId": 7,
    "createAt": "2022-04-05T08:37:38.000Z",
    "updateAt": "2024-08-10T17:06:26.000Z",
    "isCollected": false,
    "currentIndex": 648,
    "filterTotalNum": 1487,
    "prev": "1f131907-c40f-485b-8ff1-67e7091fed68",
    "next": "20be1725-4902-4135-8b80-7be60507fc13"
  },
  "post": {
    "exerciseKey": "e8631603-4764-426e-b62b-ddd6dd663d4f",
    "category": "QA",
    "title": "说说React事件和原生事件的执行顺序",
    "level": 2.5,
    "createAt": "2022-04-05T08:37:38+00:00",
    "updateAt": "2024-08-10T17:06:26+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}