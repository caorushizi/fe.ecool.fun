{
  "data": {
    "id": 1671,
    "exerciseKey": "88d1350b-5dce-48f8-974d-9115b0d270d0",
    "category": "QA",
    "renderType": "md",
    "title": "display 有哪些取值？",
    "desc": null,
    "options": null,
    "explanation": "display 属性可以设置元素的内部和外部显示类型。\n\n* 元素的外部显示类型将决定该元素在流式布局中的表现（块级或内联元素）；\n* 元素的内部显示类型可以控制其子元素的布局（例如：flow layout，grid 或 flex）。\n\n以下是一些关于display比较常用的属性值：\n\n| 值 | 描述 |\n|--|--|\n|none|元素不会显示|\n|block|此元素将显示为块级元素，此元素前后会带有换行符。|\n|inline|默认。此元素会被显示为内联元素，元素前后没有换行符。|\n|inline-block|行内块元素。（CSS2.1 新增的值）[IE6/7不支持]|\n|inline-table|此元素会作为内联表格来显示（类似 table），表格前后没有换行符。|\n|table|此元素会作为块级表格来显示（类似 table），表格前后带有换行符。|\n|inherit|规定应该从父元素继承 display 属性的值。|\n|grid|网格布局（Grid）是最强大的CSS 布局方案。 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。 |\n|flex|弹性布局，用来为盒状模型提供最大的灵活性。|\n\n从大的分类来讲，`display`的`32`种写法可以分为`6`个大类，再加上`1`个全局类，一共是`7`大类：\n\n*   [外部值](#外部值)\n*   [内部值](#内部值)\n*   [列表值](#列表值)\n*   [属性值](#属性值)\n*   [显示值](#显示值)\n*   [混合值](#混合值)\n*   [全局值](#全局值)\n\n## 外部值\n\n所谓外部值，就是说这些值只会直接影响一个元素的外部表现，而不影响元素里面的儿子级孙子级元素的表现。\n\n### display: block\n\n这个值大家不陌生，我们最熟悉的`<div>`缺省就是这个值，最基本的块级元素，属于`css`入门初学者都知道的概念，只要是容器类型的元素基本都是这个值。除`<div>`之外，还有`<h1>`到`<h6>`，`<p>`，`<form>`，`<header>`，`<footer>`，`<section>`，`<article>`天生都是这个值。\n\n### display: inline\n\n这个值大家也不陌生，行内元素嘛，只要是个行内元素都是这个值，最典型的是`<span>`，还有`<a>`，`<img>`，以及古代`html`语言当中的`<b>`，`<i>`都属于这一类型。\n\n### display: run-in\n\n这个值有点奇怪，通常没人用它，但你可以知道它。因为除了`IE`和`Opera`支持它以外，其他所有主流浏览器包括`Chrome`, `Safari`, `Firefox`全都对它置若罔闻。这东西说白了也没什么神秘，它的意思就是说如果我们命令一个元素`run-in`，中文意思就是『`闯入`』！那么这个元素就直接闯入下一行。比如说这样：\n\n![image.png](https://ae05.alicdn.com/kf/Hfac52b1018a84c89bb753b1aa76ffdd28.png)\n\n写起来大概就是这样：\n\n```html\n<div class=\"a\">aaa</div>\n<div class=\"b\">bbb</div>\n```\n\n```css\n.a {\n  font-size: 36px;\n  display: run-in;\n}\n```\n\n这有什么用呢？我们拿`span`设置`font-size`一样可以实现这个效果，就让`IE`自己跟自己玩去吧！说实话，在人力资源如此宝贵的今天，`IE`的产品经理不知脑子是不是进水了，不派工程师去实现那么多比这重要的多得多的特性，却花时间做这么个没用的玩意儿，难道工程师的时间不是金钱吗？难怪市场占有率连年下滑。\n\n## 内部值\n\n谈完了外部值，我们来看看内部值。这一组值比较有意思了，在`css3`如火如荼的今天，你要玩不转这些值，怕是哪儿也找不到工作的。内部值主要是用来管束自己下属的儿子级元素的排布的，规定它们或者排成`S`形，或者排成`B`形这样的。\n\n### display: flow\n\n含义不清，实验室阶段产品，`Chrome`不支持。如果还不够说服你暂时不要碰它的话，试着理解以下英文原文：\n\n> If its outer display type is inline or run-in, and it is participating in a block or inline formatting context, then it generates an inline box. Otherwise it generates a block container box.\n\n### display: flow-root\n\n不同于刚才谈到的`flow`，现在用`flow-root`的渐渐多起来了，因为它可以撑起被你`float`掉的块级元素的高度。外容器本来是有高度的，就像这样：\n\n![image.png](https://ae04.alicdn.com/kf/H1279ab9d1471446a9453e611ef2f8dfdm.png)\n\n```html\n<div class=\"container container1\">\n  <div class=\"item\"></div>\n  Example one\n</div>\n```\n\n```css\n.container {\n  border: 2px solid #3bc9db;\n  border-radius: 5px;\n  background-color: #e3fafc;\n  width: 400px;\n  padding: 5px;\n}\n.item {\n  height: 100px;\n  width: 100px;\n  background-color: #1098ad;\n  border: 1px solid #0b7285;\n  border-radius: 5px;\n}\n```\n\n结果因为你想让那一行字上去，于是你给`.item`加了一个`float: left;`结果就成这样了，外容器高度掉了，这不是很多人常犯的错误吗？\n\n![image.png](https://ae05.alicdn.com/kf/Ha62da79923e44dc58313e820e5f5e115C.png)\n\n现在我们给`.container`加上`display: flow-root;`再看一下：\n\n![image.png](https://ae03.alicdn.com/kf/H74b71e75f6df46febd28a0242921481fX.png)\n\n喏，外容器高度又回来了，这效果是不是杠杠的？\n\n可能就有同学要说了，我们用`clear: both;`不是一样可以达到这效果吗？\n\n```css\n.container::after {\n  content: '';\n  clear: both;\n  display: table;\n}\n```\n\n小明，请你出去！我们在讲`display: flow-root;`，不是在讲`clear: both;`！\n\n### display: table\n\n这一个属性，以及下面的另外`8`个与`table`相关的属性，都是用来控制如何把`div`显示成`table`样式的，因为我们不喜欢`<table>`这个标签嘛，所以我们想把所有的`<table>`标签都换成`<div>`标签。`<div>`有什么好？无非就是能自动换行而已，但其实你完全可以做一个`<table><tr><td>`标签，把它全都替换成`display: block;`也可以自动折行，只不过略微麻烦而已。\n\n关于`display: table;`的详细用法，大家可以参考mdn上的文章，这里就不细说了。\n\n### display: flex\n\n敲黑板，划重点！作为新一代的前端工程师，这个属性你必须烂熟于胸中。`display: flex;`以及与它相关联的一系列属性：`flex-direction`, `flex-wrap`, `flex-flow`, `justify-content`, `align-items`, `align-content`，并且包括所有这些属性的取值，都是你需要反复研磨的。`2009`年诞生的这个属性可以说是不亚于`css`界一场蒸汽机诞生一样的工业革命，它的诞生标志着马车一样的`float`被彻底抛进历史的垃圾堆。\n\n没有一张图能完整地展现`flex`的神韵，就放这张我比较喜欢的图片吧：\n\n![image.png](https://ae05.alicdn.com/kf/Hcbbceeb26e2447e1baacc59bfff86b43X.png)\n\n### display: grid\n\n会`flex`很吊吗？会`grid`更吊哦！也许这就是下次前端面试的重点哦！\n\n![image.png](https://ae05.alicdn.com/kf/H08a6a5b9e51c4a6db16642651a2c0c3f2.png)\n\n`grid`布局，中文翻译为`网格布局`。学习`grid`布局有两个重点：一个重点是`grid`布局引入了一个全新的单位：`fr`，它是`fraction`（`分数`）的缩写，所以从此以后，你的兵器库里除了`px`, `em`, `rem`, `百分比`这些常见兵器以及`vw`, `vh`这些新式武器之外，又多了一样旁门暗器`fr`，要想用好`grid`，必须充分掌握`fr`。另一个重点是`斜杠操作符`，这可不是`分数`哦。它表示的是`起始位置`和`结束位置`。比如说`3 / 4`，这可不是`四分之三`的意思，这是指一个元素从第`3`行开始，到第`4`行结束，但又不包括第`4`行。\n\n同样，与`grid`相关联的也有一大堆旁门属性，是在学习`display: grid;`的同时必须掌握的。包括`grid`, `grid-column-start`, `grid-column-end`, `grid-row-start`, `grid-row-end`, `grid-template`, `grid-template-columns`, `grid-template-rows`, `grid-template-areas`, `grid-gap`, `grid-column-gap`, `grid-row-gap`, `grid-auto-columns`, `grid-auto-rows`, `grid-auto-flow`, `grid-column`, `grid-row`。不能详述，关于这个写起来又是一大篇文章。详情还是参考 csstrick 上[这篇文章](https://css-tricks.com/snippets/css/complete-guide-grid/)，讲得非常细致非常清楚。\n\n### display: ruby\n\n`ruby`这个取值对于我们亚洲人来说其实是非常有用的一个东西，但是目前除了`Firefox`以外其它浏览器对它的支持都不太好。简而言之，`display: ruby;`的作用就是可以做出下面这样的东西：\n\n![image.png](https://ae03.alicdn.com/kf/H99202b80c6c44f758bc0a64871be0387Q.png)\n\n很好的东西，对吧？如果可以用的话，对我国的小学教育可以有极大的促进。但可惜我们现在暂时还用不了。\n\n`ruby`这个词在英语里的意思是`红宝石`，但在日语里是`ルビ`，翻译成中文是`旁注标记`的意思，我们中文的旁注标记就是汉语拼音。可以想见，这个标准的制定者肯定是日本人，如果是我们中国人的话，那这个标签就不是`ruby`，而是`pinyin`了。还有一个`ruby`语言，发明者也是一个日本人，和`html`里这个`ruby`是两码事，不要搞混了。\n\n`ruby`的语法大致如下：\n\n![image.png](https://ae04.alicdn.com/kf/H11830a70e7a54962a330dae9daacb5c2p.png)\n\n### display: subgrid\n\n`subgrid`总的思想是说大网格里还可以套小网格，互相不影响。但如果`grid`里可以再套`subgrid`的话，那我`subgrid`里还想再套`subgrid`怎么办？`subsubgrid`吗？况且，到底是`grid: subgrid;`还是`display: subgrid;`这个也没有达成共识。\n\n## 列表值\n\n### display: list-item\n\n`display: list-item;`和`display: table;`一样，也是一帮痛恨各种`html`标签，而希望只使用`<div>`来写遍一切`html`的家伙搞出来的鬼东西，实际使用极少，效果就是这样：\n\n![image.png](https://ae05.alicdn.com/kf/H95d50abeae06444f84bb8874283b5443t.png)\n\n看，你用`<ul><li>`能实现的效果，他可以用`<div>`实现出来，就是这个作用。\n\n## 属性值\n\n属性值一般是附属于主值的，比如主值里设置了`display: table;`，就可以在子元素里使用`display: table-row-group;`等等属性，不过并不绝对。关于它们的作用，主要参考主值就够了。\n\n### display: table-row-group\n\n详情参考[display: table;](#display-table)。\n\n### display: table-header-group\n\n详情参考[display: table;](#display-table)。\n\n### display: table-footer-group\n\n详情参考[display: table;](#display-table)。\n\n### display: table-row\n\n详情参考[display: table;](#display-table)。\n\n### display: table-cell\n\n详情参考[display: table;](#display-table)。这个属性有必要详细说说，因为它完全可以单独应用，用在高度不固定元素的垂直居中上。效果如下图所示：\n\n![image.png](https://ae02.alicdn.com/kf/H26a4916b21684cc3baedea4c5f168ca4o.png)\n\n### display: table-column-group\n\n详情参考[display: table;](#display-table)。\n\n### display: table-column\n\n详情参考[display: table;](#display-table)。\n\n### display: table-caption\n\n详情参考[display: table;](#display-table)。\n\n### display: ruby-base\n\n详情参考[display: ruby;](#display-ruby)。\n\n### display: ruby-text\n\n详情参考[display: ruby;](#display-ruby)。\n\n### display: ruby-base-container\n\n详情参考[display: ruby;](#display-ruby)。\n\n### display: ruby-text-container\n\n详情参考[display: ruby;](#display-ruby)。\n\n## 显示值\n\n`MDN`里把它叫做`<display-box> values`（`盒子值`），我把它叫做`显示值`，主要是为了便于理解。\n\n### display: contents\n\n![image.png](https://ae03.alicdn.com/kf/H814a04b3819044c2a32f0e3be754531fo.png)\n\n你给中间那个`div`加上`display: contents;`之后，它就变成这样了：\n\n![image.png](https://ae01.alicdn.com/kf/H7af8624e80b84054945bad6b68a3821dK.png)\n\n这就是`display: contents;`的作用，它让子元素拥有和父元素一样的布局方式，仅此而已。\n\n### display: none\n\n这么著名的值还用多说吗？\n\n## 混合值\n\n### display: inline-block\n\n关于`display: inline-block;`的作用恐怕只要做过`3`天以上前端的工程师都应该知道。什么也不说了，上一张著名的图片作总结吧：\n\n![image.png](https://ae01.alicdn.com/kf/Hde4aa3e723e5487eb20e550f1d6320d1Q.png)\n\n### display: inline-table\n\n你要能理解`inline-block`，你就能理解`inline-table`。在行内显示一个表格，就像这样：\n\n![image.png](https://ae05.alicdn.com/kf/H86419f9046a14a69aeb0fae749205ac6w.png)\n\n### display: inline-flex\n\n这个就不用多说了吧？跟上面一样，在行内进行弹性布局，参考[display: flex;](#display-flex)。\n\n### display: inline-grid\n\n同上，在行内进行网格布局，参考[display: grid;](#display-grid)。\n\n## 全局值\n\n这些值不是`display`属性的专利，几乎其它任意属性都可以用，列在这里凑个数。\n\n### display: inherit\n\n继承父元素的`display`属性。\n\n### display: initial\n\n不管父元素怎么设定，恢复到浏览器最初始时的`display`属性。\n\n### display: unset\n\n`unset`混合了`inherit`和`initial`。如果父元素设值了，就用父元素的设定，如果父元素没设值，就用浏览器的缺省设定。直接看图最明白：\n\n![image.png](https://ae02.alicdn.com/kf/H9b5ec0efe3f84c8e84c897919abb8167y.png)\n\n## 总结\n\n以上就是在`css`里`display`的`32`种写法。谈了这么多，不知道你记住了多少呢？其实，单纯理解每一个`display`属性的取值都不难，难的是融会贯通，在恰当的地方运用恰当的值，毕竟我们的目的是为了把代码写短，而不是把代码写长。\n\n\n\n\n\n\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2022-02-15T14:17:19.000Z",
    "updateAt": "2024-08-10T17:06:10.000Z",
    "isCollected": false,
    "currentIndex": 698,
    "filterTotalNum": 1487,
    "prev": "5f8efe01-0851-4c6f-87bc-f50d6e3ca279",
    "next": "0e8f15bd-e64a-45d6-a437-d81944572aa4"
  },
  "post": {
    "exerciseKey": "88d1350b-5dce-48f8-974d-9115b0d270d0",
    "category": "QA",
    "title": "display 有哪些取值？",
    "level": 1,
    "createAt": "2022-02-15T14:17:19+00:00",
    "updateAt": "2024-08-10T17:06:10+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 101
  }
}