{
  "data": {
    "id": 181,
    "exerciseKey": "593b09fd-094f-44b7-a375-6ddc393113a5",
    "category": "QA",
    "renderType": "md",
    "title": "ES6中对象新增了哪些扩展?",
    "desc": null,
    "options": null,
    "explanation": "## 一、属性的简写\n\nES6中，当对象键名与对应值名相等的时候，可以进行简写\n\n```js\nconst baz = {foo:foo}\n\n// 等同于\nconst baz = {foo}\n```\n\n方法也能够进行简写\n\n```js\nconst o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n\n// 等同于\n\nconst o = {\n  method: function() {\n    return \"Hello!\";\n  }\n}\n```\n\n在函数内作为返回值，也会变得方便很多\n\n```js\nfunction getPoint() {\n  const x = 1;\n  const y = 10;\n  return {x, y};\n}\n\ngetPoint()\n// {x:1, y:10}\n```\n\n注意：简写的对象方法不能用作构造函数，否则会报错\n\n```js\nconst obj = {\n  f() {\n    this.foo = 'bar';\n  }\n};\n\nnew obj.f() // 报错\n```\n\n\n\n## 二、属性名表达式\n\nES6 允许字面量定义对象时，将表达式放在括号内\n\n```js\nlet lastWord = 'last word';\n\nconst a = {\n  'first word': 'hello',\n  [lastWord]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastWord] // \"world\"\na['last word'] // \"world\"\n```\n\n表达式还可以用于定义方法名\n\n```js\nlet obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n```\n\n注意，属性名表达式与简洁表示法，不能同时使用，会报错\n\n```js\n// 报错\nconst foo = 'bar';\nconst bar = 'abc';\nconst baz = { [foo] };\n\n// 正确\nconst foo = 'bar';\nconst baz = { [foo]: 'abc'};\n```\n\n注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串`[object Object]`\n\n```js\nconst keyA = {a: 1};\nconst keyB = {b: 2};\n\nconst myObject = {\n  [keyA]: 'valueA',\n  [keyB]: 'valueB'\n};\n\nmyObject // Object {[object Object]: \"valueB\"}\n```\n\n\n\n## 三、super关键字\n\n`this`关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字`super`，指向当前对象的原型对象\n\n```javascript\nconst proto = {\n  foo: 'hello'\n};\n\nconst obj = {\n  foo: 'world',\n  find() {\n    return super.foo;\n  }\n};\n\nObject.setPrototypeOf(obj, proto); // 为obj设置原型对象\nobj.find() // \"hello\"\n```\n\n\n\n## 四、扩展运算符的应用\n\n在解构赋值中，未被读取的可遍历的属性，分配到指定的对象上面\n\n```js\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx // 1\ny // 2\nz // { a: 3, b: 4 }\n```\n\n注意：解构赋值必须是最后一个参数，否则会报错\n\n解构赋值是浅拷贝\n\n```js\nlet obj = { a: { b: 1 } };\nlet { ...x } = obj;\nobj.a.b = 2; // 修改obj里面a属性中键值\nx.a.b // 2，影响到了结构出来x的值\n```\n\n对象的扩展运算符等同于使用`Object.assign()`方法\n\n\n\n## 五、属性的遍历\n\nES6 一共有 5 种方法可以遍历对象的属性。\n\n- for...in：循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）\n\n- Object.keys(obj)：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名\n\n- Object.getOwnPropertyNames(obj)：回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名\n\n- Object.getOwnPropertySymbols(obj)：返回一个数组，包含对象自身的所有 Symbol 属性的键名\n\n- Reflect.ownKeys(obj)：返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举\n\n上述遍历，都遵守同样的属性遍历的次序规则：\n\n- 首先遍历所有数值键，按照数值升序排列\n- 其次遍历所有字符串键，按照加入时间升序排列\n- 最后遍历所有 Symbol 键，按照加入时间升序排\n\n```js\nReflect.ownKeys({ [Symbol()]:0, b:0, 10:0, 2:0, a:0 })\n// ['2', '10', 'b', 'a', Symbol()]\n```\n\n\n\n\n\n## 六、对象新增的方法\n\n关于对象新增的方法，分别有以下：\n\n- Object.is()\n- Object.assign()\n- Object.getOwnPropertyDescriptors()\n- Object.setPrototypeOf()，Object.getPrototypeOf()\n- Object.keys()，Object.values()，Object.entries()\n- Object.fromEntries()\n\n\n\n### Object.is()\n\n严格判断两个值是否相等，与严格比较运算符（===）的行为基本一致，不同之处只有两个：一是`+0`不等于`-0`，二是`NaN`等于自身\n\n```js\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n\n\n\n### Object.assign()\n\n`Object.assign()`方法用于对象的合并，将源对象`source`的所有可枚举属性，复制到目标对象`target`\n\n`Object.assign()`方法的第一个参数是目标对象，后面的参数都是源对象\n\n```javascript\nconst target = { a: 1, b: 1 };\n\nconst source1 = { b: 2, c: 2 };\nconst source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\n\n注意：`Object.assign()`方法是浅拷贝，遇到同名属性会进行替换\n\n\n\n### Object.getOwnPropertyDescriptors()\n\n返回指定对象所有自身属性（非继承属性）的描述对象\n\n```js\nconst obj = {\n  foo: 123,\n  get bar() { return 'abc' }\n};\n\nObject.getOwnPropertyDescriptors(obj)\n// { foo:\n//    { value: 123,\n//      writable: true,\n//      enumerable: true,\n//      configurable: true },\n//   bar:\n//    { get: [Function: get bar],\n//      set: undefined,\n//      enumerable: true,\n//      configurable: true } }\n```\n\n\n\n### Object.setPrototypeOf()\n\n`Object.setPrototypeOf`方法用来设置一个对象的原型对象\n\n```js\nObject.setPrototypeOf(object, prototype)\n\n// 用法\nconst o = Object.setPrototypeOf({}, null);\n```\n\n\n\n### Object.getPrototypeOf()\n\n用于读取一个对象的原型对象\n\n```js\nObject.getPrototypeOf(obj);\n```\n\n\n\n### Object.keys()\n\n返回自身的（不含继承的）所有可遍历（enumerable）属性的键名的数组\n\n```js\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n```\n\n\n\n### Object.values()\n\n返回自身的（不含继承的）所有可遍历（enumerable）属性的键对应值的数组\n\n```js\nconst obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n```\n\n\n\n### Object.entries()\n\n返回一个对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对的数组\n\n```js\nconst obj = { foo: 'bar', baz: 42 };\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n\n\n### Object.fromEntries()\n\n用于将一个键值对数组转为对象\n\n```js\nObject.fromEntries([\n  ['foo', 'bar'],\n  ['baz', 42]\n])\n// { foo: \"bar\", baz: 42 }\n```\n",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:35:38.000Z",
    "updateAt": "2024-01-24T17:30:23.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 178,
    "prev": "9cf9cb30-8864-4823-bf2d-d30b5f079f45",
    "next": "a1d425f5-4d07-4ffc-865b-23fec635032c"
  },
  "post": {
    "exerciseKey": "593b09fd-094f-44b7-a375-6ddc393113a5",
    "category": "QA",
    "title": "ES6中对象新增了哪些扩展?",
    "level": 1.5,
    "updateAt": "2024-01-24T17:30:23+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
