{
  "data": {
    "id": 1715,
    "exerciseKey": "9b19862a-b226-4a56-95d4-5ab4b05024bb",
    "category": "QA",
    "renderType": "md",
    "title": "ES5怎么实现继承",
    "desc": null,
    "options": null,
    "explanation": "在 ES5 中，实现继承主要有以下几种方式：\n1. **原型链继承**：\n   通过将一个对象的 `__proto__` 属性指向另一个对象的 `prototype` 属性，可以实现继承。\n   ```javascript\n   function Parent() {\n     this.parentProperty = true;\n   }\n   Parent.prototype.getParentProperty = function() {\n     return this.parentProperty;\n   };\n   function Child() {\n     this.childProperty = false;\n   }\n   // 继承 Parent\n   Child.prototype = new Parent();\n   Child.prototype.getChildProperty = function() {\n     return this.childProperty;\n   };\n   var child = new Child();\n   console.log(child.getParentProperty()); // true\n   console.log(child.getChildProperty()); // false\n   ```\n2. **借用构造函数继承**：\n   通过复制一个对象的属性和方法到另一个对象，实现继承。\n   ```javascript\n   function Parent(name) {\n     this.name = name;\n     this.colors = ['red', 'blue', 'green'];\n   }\n   Parent.prototype.sayName = function() {\n     console.log(this.name);\n   };\n   function Child(name, age) {\n     Parent.call(this, name); // 借用构造函数\n     this.age = age;\n   }\n   var child = new Child('Nicholas', 29);\n   console.log(child.colors); // ['red', 'blue', 'green']\n   console.log(child.age); // 29\n   ```\n3. **组合继承**：\n   结合原型链继承和借用构造函数继承的优点。\n   ```javascript\n   function Parent(name) {\n     this.name = name;\n     this.colors = ['red', 'blue', 'green'];\n   }\n   Parent.prototype.sayName = function() {\n     console.log(this.name);\n   };\n   function Child(name, age) {\n     Parent.call(this, name); // 借用构造函数\n     this.age = age;\n   }\n   Child.prototype = new Parent(); // 原型链继承\n   Child.prototype.sayAge = function() {\n     console.log(this.age);\n   };\n   var child = new Child('Nicholas', 29);\n   console.log(child.colors); // ['red', 'blue', 'green']\n   console.log(child.age); // 29\n   console.log(child.sayName()); // Nicholas\n   console.log(child.sayAge()); // 29\n   ```\n4. **原型式继承**（`Object.create()`）：\n   使用 `Object.create()` 方法创建一个新对象，该对象继承自另一个对象。\n   ```javascript\n   var parent = {\n     colors: ['red', 'blue', 'green']\n   };\n   var child = Object.create(parent);\n   child.name = 'Nicholas';\n   console.log(child.colors); // ['red', 'blue', 'green']\n   ```\n5. **寄生式继承**：\n   通过创建一个继承自原型的对象，然后扩展这个对象，最后返回这个扩展后的对象。\n   ```javascript\n   function createAnother(original) {\n     var clone = Object.create(original);\n     clone.sayHi = function() {\n       console.log('hi');\n     };\n     return clone;\n   }\n   var person = {\n     name: 'Nicholas'\n   };\n   var anotherPerson = createAnother(person);\n   anotherPerson.sayHi(); // hi\n   ```\n6. **寄生组合式继承**：\n   结合原型链继承和寄生式继承的优点，通过调用超类型的构造函数来继承属性，然后通过原型链继承方法。\n   ```javascript\n   function inheritPrototype(subType, superType) {\n     var prototype = Object.create(superType.prototype);\n     prototype.constructor = subType;\n     subType.prototype = prototype;\n   }\n   function Parent(name) {\n     this.name = name;\n     this.colors = ['red', 'blue', 'green'];\n   }\n   Parent.prototype.sayName\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2022-03-27T14:25:19.000Z",
    "updateAt": "2024-08-10T17:06:23.000Z",
    "isCollected": false,
    "currentIndex": 654,
    "filterTotalNum": 1487,
    "prev": "485b5052-3119-4ced-9473-940489629f99",
    "next": "be6f7f8b-d386-4f99-a0bc-f9b5a0512f99"
  },
  "post": {
    "exerciseKey": "9b19862a-b226-4a56-95d4-5ab4b05024bb",
    "category": "QA",
    "title": "ES5怎么实现继承",
    "level": 3,
    "createAt": "2022-03-27T14:25:19+00:00",
    "updateAt": "2024-08-10T17:06:23+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}