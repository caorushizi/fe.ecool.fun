{
  "data": {
    "id": 1544,
    "exerciseKey": "a0e34df4-b603-4b18-bcd6-ebf8c94b3325",
    "category": "QA",
    "renderType": "md",
    "title": "根据运算优先级添加括号",
    "desc": "现已知一个字符串是由正整数和加减乘除四个运算符(+ - * /)组成。\n\n例如存在字符串 `const str = '11+2-3*4+5/2*4+10/5'`，现在需要将高优先级运算，用小括号包裹起来，例如结果为 `'11+2-(3*4)+(5/2*4)+(10/5)'`。注意可能会出现连续的乘除运算，需要包裹到一起。\n\n请用 `javascript` 实现这一过程",
    "options": null,
    "explanation": "介绍一种只需遍历一次的实现方式，思路比较简单，主要用到了2个临时变量，分别用于记录当前是否在高优先级运算范围和临时值，然后根据不同优先级的运算符进行不同的处理操作。\n\n具体的代码如下：\n\n ```js\n function addBrackets(expression) {\n  const resultArr = []\n\n  // 定义运算符\n  const symbolArr = ['+', '-', '*', '/']\n\n  // 定义高优先级运算符\n  const highLevelSymbolArr = ['*', '/']\n\n  // 判断某个字符串是否是运算符\n  const isSymbolFn = (str) => symbolArr.includes(str)\n\n  // 判断某个字符串是否是高优先级运算符\n  const isHighLevelSymbolFn = (str) => highLevelSymbolArr.includes(str)\n\n  // 输入表达式的长度\n  const expLen = expression.length\n\n  // 标记当前的遍历是否处于高优先级运算符范围\n  let isInBracket = false\n  // 记录临时值\n  let currentNum = ''\n\n  for (let i = 0; i < expLen; i++) {\n    const isSymbol = isSymbolFn(expression[i])\n    const isHighLevelSymbol = isSymbol && isHighLevelSymbolFn(expression[i])\n\n    // 处理当前字符是运算符的场景\n    if (isSymbol) {\n      //处理当前字符是高优先级运算符\n      if (isHighLevelSymbol) {\n        // 如果当前没有被标记为高优先运算符，就在前面加个括号\n        if (!isInBracket) {\n          currentNum = '(' + currentNum\n        }\n\n        // 修改标记状态\n        isInBracket = true\n        currentNum += expression[i]\n      } else {\n        // 普通运算符\n\n        if (isInBracket) {\n          // 如果之前已经在高优先级运算符范围，就需要标记结束\n          resultArr.push(currentNum + ')')\n          isInBracket = false\n        } else {\n          resultArr.push(currentNum)\n        }\n        resultArr.push(expression[i])\n        currentNum = ''\n      }\n    } else {\n      // 如果是数字，就直接进行记录\n      currentNum = currentNum + expression[i]\n    }\n  }\n\n  if (currentNum) {\n    resultArr.push(currentNum + (isInBracket ? ')' : ''))\n  }\n\n  return resultArr.join('')\n}\n\n ```\n \n 另外还可以使用滑动窗口的思路来实现：\n \n ![滑动窗口实现](https://pic.rmb.bdstatic.com/bjh/0531a9146d945741a3368bf59f197c0d.jpeg)\n \n## 使用正则实现（2022/10/30更新）\n \n有小伙伴提供了一种正则表达式的实现方式，供大家参考：\n\n```js\nlet text = '11+2-34+5/24+10/5+10/512'; \ntext.match(/([0-9]{1,}[*|/]){1,}[0-9]{1,}/g).forEach((item)=>{ \n\ttext = text.replace(item,`(${item})`) \n})\nconsole.log(text); // '11+2-34+(5/24)+(10/5)+(10/512)'\n```\n\n以上答案由“前端面试题宝典”收集、整理，PC端访问地址： [https://fe.ecool.fun/](https://fe.ecool.fun/)",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2021-11-17T11:51:05.000Z",
    "updateAt": "2023-03-04T22:54:17.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 435,
    "prev": "d66f9477-309f-4af7-b667-d39ad3525a5b",
    "next": "a7afe475-998a-4be3-97a0-c8c7ccabd6e6"
  },
  "post": {
    "exerciseKey": "a0e34df4-b603-4b18-bcd6-ebf8c94b3325",
    "category": "QA",
    "title": "根据运算优先级添加括号",
    "level": 4,
    "updateAt": "2023-03-04T22:54:17+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}
