{
  "data": {
    "id": 256,
    "exerciseKey": "9f19f171-7071-42e6-82d5-35b19bd83928",
    "category": "QA",
    "renderType": "md",
    "title": "Vue3.0 性能提升主要是通过哪几方面体现的？",
    "desc": null,
    "options": null,
    "explanation": "## 一、编译阶段\n\n回顾`Vue2`，我们知道每个组件实例都对应一个 `watcher` 实例，它会在组件渲染的过程中把用到的数据`property`记录为依赖，当依赖发生改变，触发`setter`，则会通知`watcher`，从而使关联的组件重新渲染\n\n ![](https://static.ecool.fun//article/2ff51544-a944-4b18-a4fe-abbd3160888e.png)\n\n试想一下，一个组件结构如下图\n\n```html\n<template>\n    <div id=\"content\">\n        <p class=\"text\">静态文本</p>\n        <p class=\"text\">静态文本</p>\n        <p class=\"text\">{{ message }}</p>\n        <p class=\"text\">静态文本</p>\n        ...\n        <p class=\"text\">静态文本</p>\n    </div>\n</template>\n```\n\n可以看到，组件内部只有一个动态节点，剩余一堆都是静态节点，所以这里很多 `diff` 和遍历其实都是不需要的，造成性能浪费\n\n因此，`Vue3`在编译阶段，做了进一步优化。主要有如下：\n\n- diff算法优化\n- 静态提升\n- 事件监听缓存\n- SSR优化\n\n\n\n#### diff算法优化\n\n`vue3`在`diff`算法中相比`vue2`增加了静态标记\n\n关于这个静态标记，其作用是为了会发生变化的地方添加一个`flag`标记，下次发生变化的时候直接找该地方进行比较\n\n下图这里，已经标记静态节点的`p`标签在`diff`过程中则不会比较，把性能进一步提高\n\n ![](https://static.ecool.fun//article/4d63cf01-fda3-4567-9779-2c0c519cea4e.png)\n\n关于静态类型枚举如下\n\n```js\nexport const enum PatchFlags {\n  TEXT = 1,// 动态的文本节点\n  CLASS = 1 << 1,  // 2 动态的 class\n  STYLE = 1 << 2,  // 4 动态的 style\n  PROPS = 1 << 3,  // 8 动态属性，不包括类名和样式\n  FULL_PROPS = 1 << 4,  // 16 动态 key，当 key 变化时需要完整的 diff 算法做比较\n  HYDRATE_EVENTS = 1 << 5,  // 32 表示带有事件监听器的节点\n  STABLE_FRAGMENT = 1 << 6,   // 64 一个不会改变子节点顺序的 Fragment\n  KEYED_FRAGMENT = 1 << 7, // 128 带有 key 属性的 Fragment\n  UNKEYED_FRAGMENT = 1 << 8, // 256 子节点没有 key 的 Fragment\n  NEED_PATCH = 1 << 9,   // 512\n  DYNAMIC_SLOTS = 1 << 10,  // 动态 solt\n  HOISTED = -1,  // 特殊标志是负整数表示永远不会用作 diff\n  BAIL = -2 // 一个特殊的标志，指代差异算法\n}\n```\n\n\n\n#### 静态提升\n\n`Vue3`中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用\n\n这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用\n\n```js\n<span>你好</span>\n\n<div>{{ message }}</div>\n```\n\n没有做静态提升之前\n\n```js\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_Fragment, null, [\n    _createVNode(\"span\", null, \"你好\"),\n    _createVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */)\n  ], 64 /* STABLE_FRAGMENT */))\n}\n```\n\n做了静态提升之后\n\n```js\nconst _hoisted_1 = /*#__PURE__*/_createVNode(\"span\", null, \"你好\", -1 /* HOISTED */)\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(_Fragment, null, [\n    _hoisted_1,\n    _createVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */)\n  ], 64 /* STABLE_FRAGMENT */))\n}\n\n// Check the console for the AST\n```\n\n静态内容`_hoisted_1`被放置在`render` 函数外，每次渲染的时候只要取 `_hoisted_1` 即可\n\n同时 `_hoisted_1` 被打上了 `PatchFlag` ，静态标记值为 -1 ，特殊标志是负整数表示永远不会用于 Diff\n\n\n\n#### 事件监听缓存\n\n默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化\n\n```text\n<div>\n  <button @click = 'onClick'>点我</button>\n</div>\n```\n\n没开启事件监听器缓存\n\n```js\nexport const render = /*#__PURE__*/_withId(function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(\"div\", null, [\n    _createVNode(\"button\", { onClick: _ctx.onClick }, \"点我\", 8 /* PROPS */, [\"onClick\"])\n                                             // PROPS=1<<3,// 8 //动态属性，但不包含类名和样式\n  ]))\n})\n```\n\n开启事件侦听器缓存后\n\n```js\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(\"div\", null, [\n    _createVNode(\"button\", {\n      onClick: _cache[1] || (_cache[1] = (...args) => (_ctx.onClick(...args)))\n    }, \"点我\")\n  ]))\n}\n```\n\n上述发现开启了缓存后，没有了静态标记。也就是说下次`diff`算法的时候直接使用\n\n\n\n#### SSR优化\n\n当静态内容大到一定量级时候，会用`createStaticVNode`方法在客户端去生成一个static node，这些静态`node`，会被直接`innerHtml`，就不需要创建对象，然后根据对象渲染\n\n```js\ndiv>\n\t<div>\n\t\t<span>你好</span>\n\t</div>\n\t...  // 很多个静态属性\n\t<div>\n\t\t<span>{{ message }}</span>\n\t</div>\n</div>\n```\n\n编译后\n\n```js\nimport { mergeProps as _mergeProps } from \"vue\"\nimport { ssrRenderAttrs as _ssrRenderAttrs, ssrInterpolate as _ssrInterpolate } from \"@vue/server-renderer\"\n\nexport function ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {\n  const _cssVars = { style: { color: _ctx.color }}\n  _push(`<div${\n    _ssrRenderAttrs(_mergeProps(_attrs, _cssVars))\n  }><div><span>你好</span>...<div><span>你好</span><div><span>${\n    _ssrInterpolate(_ctx.message)\n  }</span></div></div>`)\n}\n```\n\n\n\n## 二、源码体积\n\n相比`Vue2`，`Vue3`整体体积变小了，除了移出一些不常用的API，再重要的是`Tree shanking`\n\n任何一个函数，如`ref`、`reavtived`、`computed`等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小\n\n```js\nimport { computed, defineComponent, ref } from 'vue';\nexport default defineComponent({\n    setup(props, context) {\n        const age = ref(18)\n\n        let state = reactive({\n            name: 'test'\n        })\n\n        const readOnlyAge = computed(() => age.value++) // 19\n\n        return {\n            age,\n            state,\n            readOnlyAge\n        }\n    }\n});\n```\n\n\n\n## 三、响应式系统\n\n`vue2`中采用 `defineProperty`来劫持整个对象，然后进行深度遍历所有属性，给每个属性添加`getter`和`setter`，实现响应式\n\n`vue3`采用`proxy`重写了响应式系统，因为`proxy`可以对整个对象进行监听，所以不需要深度遍历\n\n- 可以监听动态属性的添加\n- 可以监听到数组的索引和数组`length`属性\n- 可以监听删除属性\n\n关于这两个 API 具体的不同，我们下篇文章会进行一个更加详细的介绍\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:53:34.000Z",
    "updateAt": "2024-01-25T17:38:38.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 119,
    "prev": "3707a3b3-2330-4833-9c9b-b427887f8ee9",
    "next": "ca63a7ef-8e3d-4fe4-b697-28138bd96f74"
  },
  "post": {
    "exerciseKey": "9f19f171-7071-42e6-82d5-35b19bd83928",
    "category": "QA",
    "title": "Vue3.0 性能提升主要是通过哪几方面体现的？",
    "level": 3,
    "updateAt": "2024-01-25T17:38:38+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}