{
  "data": {
    "id": 1731,
    "exerciseKey": "26f1a1e7-1bfd-4a0c-91b1-4e1c8455f60a",
    "category": "QA",
    "renderType": "md",
    "title": "Vue2.0为什么不能检查数组的变化，该怎么解决？",
    "desc": null,
    "options": null,
    "explanation": "\n## 前言\n\n我们都知道，Vue2.0对于响应式数据的实现有一些不足：\n\n- 无法检测数组/对象的新增\n- 无法检测通过索引改变数组的操作。\n\n## 分析\n\n- 无法检测数组/对象的新增？\n\nVue检测数据的变动是通过Object.defineProperty实现的，所以无法监听数组的添加操作是可以理解的，因为是在构造函数中就已经为所有属性做了这个检测绑定操作。\n\n- 无法检测通过索引改变数组的操作。即vm.items[indexOfItem] = newValue？\n\n[官方文档](https://cn.vuejs.org/v2/guide/list.html#注意事项)中对于这两点都是简要的概括为“由于JavaScript的限制”无法实现，而Object.defineProperty是实现检测数据改变的方案，这个限制是指Object.defineProperty\n\n## 思考\n\n### vm.items[indexOfItem] = newValue真的不能被监听么？\n\n> Vue对数组的7个变异方法（push、pop、shift、unshift、splice、sort、reverse）实现了响应式。这里就不做测试了。我们测试一下通过索引改变数组的操作，能不能被监听到。\n>\n> 遍历数组，用Object.defineProperty对每一项进行监测\n\n```js\nfunction defineReactive(data, key, value) {\n\t Object.defineProperty(data, key, {\n\t\t enumerable: true,\n\t\t configurable: true,\n\t\t get: function defineGet() {\n\t\t\t console.log(`get key: ${key} value: ${value}`)\n\t\t\t return value\n\t\t },\n\t\t set: function defineSet(newVal) {\n\t\t\t console.log(`set key: ${key} value: ${newVal}`)\n\t\t\t value = newVal\n\t\t }\n\t })\n}\n \nfunction observe(data) {\n\tObject.keys(data).forEach(function(key) {\n\t\tdefineReactive(data, key, data[key])\n\t})\n}\n \nlet arr = [1, 2, 3]\nobserve(arr)\n```\n\n![image-20210607020953993](https://static.ecool.fun//article/fd22ab50-39ad-4dc7-a638-b580e7fa7d58.jpeg)\n\n### 测试说明\n\n通过索引改变arr[1]，我们发现触发了set，也就是Object.defineProperty是可以检测到通过索引改变数组的操作的，那Vue2.0为什么没有实现呢？是尤大能力不行？这肯定毋庸置疑。那他为什么不实现呢？\n\n![image-20210607021557820](https://static.ecool.fun//article/f05a63a5-0ff2-4336-b1d7-cc5414564ca8.jpeg)\n\n**小结**：是出于对性能原因的考虑，没有去实现它。而不是不能实现。\n\n对于对象而言，每一次的数据变更都会对对象的属性进行一次枚举，一般对象本身的属性数量有限，所以对于遍历枚举等方式产生的性能损耗可以忽略不计，但是对于数组而言呢？数组包含的元素量是可能达到成千上万，假设对于每一次数组元素的更新都触发了枚举/遍历，其带来的性能损耗将与获得的用户体验不成正比，故vue无法检测数组的变动。\n\n不过Vue3.0用proxy代替了defineProperty之后就解决了这个问题。\n\n-----------------------\n\n## 解决方案\n\n### 数组\n\n1. this.$set(array, index, data)\n\n   ```js\n   //这是个深度的修改，某些情况下可能导致你不希望的结果，因此最好还是慎用\n   this.dataArr = this.originArr\n   this.$set(this.dataArr, 0, {data: '修改第一个元素'})\n   console.log(this.dataArr)        \n   console.log(this.originArr)  //同样的 源数组也会被修改 在某些情况下会导致你不希望的结果 \n   ```\n\n2. splice\n\n   ```js\n   //因为splice会被监听有响应式，而splice又可以做到增删改。\n   ```\n\n3. 利用临时变量进行中转\n\n   ```js\n   let tempArr = [...this.targetArr]\n   tempArr[0] = {data: 'test'}\n   this.targetArr = tempArr\n   ```\n\n### 对象\n\n1. this.$set(obj, key ,value) - 可实现增、改\n\n2. watch时添加`deep：true`深度监听，只能监听到属性值的变化，新增、删除属性无法监听\n\n   ```js\n   this.$watch('blog', this.getCatalog, {\n       deep: true\n       // immediate: true // 是否第一次触发\n     });\n   ```\n\n3. watch时直接监听某个key\n\n   ```js\n   watch: {\n     'obj.name'(curVal, oldVal) {\n       // TODO\n     }\n   }\n   ```",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2022-04-05T08:08:13.000Z",
    "updateAt": "2024-08-10T17:06:25.000Z",
    "isCollected": false,
    "currentIndex": 650,
    "filterTotalNum": 1487,
    "prev": "20be1725-4902-4135-8b80-7be60507fc13",
    "next": "6201f33e-f962-4cdc-ab01-59d03993fed8"
  },
  "post": {
    "exerciseKey": "26f1a1e7-1bfd-4a0c-91b1-4e1c8455f60a",
    "category": "QA",
    "title": "Vue2.0为什么不能检查数组的变化，该怎么解决？",
    "level": 3,
    "createAt": "2022-04-05T08:08:13+00:00",
    "updateAt": "2024-08-10T17:06:25+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}