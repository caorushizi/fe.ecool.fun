{
  "data": {
    "id": 480,
    "exerciseKey": "d3411be6-a0be-4901-8f37-f418af1c0475",
    "category": "QA",
    "renderType": "md",
    "title": "微前端可以解决什么问题？",
    "desc": null,
    "options": null,
    "explanation": "任何新技术的产生都是为了解决现有场景和需求下的技术痛点，微前端也不例外：\n\n* 拆分和细化\n\n当下前端领域，单页面应用（SPA）是非常流行的项目形态之一，而随着时间的推移以及应用功能的丰富，单页应用变得不再单一而是越来越庞大也越来越难以维护，往往是改一处而动全身，由此带来的发版成本也越来越高。微前端的意义就是将这些庞大应用进行拆分，并随之解耦，每个部分可以单独进行维护和部署，提升效率。\n\n* 整合历史系统\n\n在不少的业务中，或多或少会存在一些历史项目，这些项目大多以采用老框架类似（Backbone.js，Angular.js 1）的B端管理系统为主，介于日常运营，这些系统需要结合到新框架中来使用还不能抛弃，对此我们也没有理由浪费时间和精力重写旧的逻辑。而微前端可以将这些系统进行整合，在基本不修改来逻辑的同时来同时兼容新老两套系统并行运行。\n\n## 微前端架构具备以下几个核心价值：\n\n* 技术栈无关\n\n主框架不限制接入应用的技术栈，微应用具备完全自主权\n\n* 独立开发、独立部署\n\n微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新\n\n* 增量升级\n\n在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略\n\n* 独立运行时\n\n每个微应用之间状态隔离，运行时状态不共享\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2021-07-11T01:33:09.000Z",
    "updateAt": "2024-07-22T10:54:50.000Z",
    "isCollected": false,
    "currentIndex": 1020,
    "filterTotalNum": 1487,
    "prev": "a93f6d22-f862-4d3c-8656-2adbdef9e96e",
    "next": "0c0db5d1-e09a-4699-911a-3cfa4f4bd765"
  },
  "post": {
    "exerciseKey": "d3411be6-a0be-4901-8f37-f418af1c0475",
    "category": "QA",
    "title": "微前端可以解决什么问题？",
    "level": 3,
    "createAt": "2021-07-11T01:33:09+00:00",
    "updateAt": "2024-07-22T10:54:50+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}