{
  "data": {
    "id": 614,
    "exerciseKey": "3ae5a790-ccaf-468c-b829-e38dfd572582",
    "category": "QA",
    "renderType": "md",
    "title": "无重复字符的最长子串",
    "desc": "给定一个字符串 **s** ，请你找出其中不含有重复字符的 **最长子串** 的长度。\n\n* 示例 1:\n\n```\n输入: s = \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n* 示例 2:\n\n```\n输入: s = \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n* 示例 3:\n\n```\n输入: s = \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n\n* 示例 4:\n\n```\n输入: s = \"\"\n输出: 0\n```\n\n* 提示：\n\t* 0 <= s.length <= 5 * 104\n\t* s 由英文字母、数字、符号和空格组成\n\n\n",
    "options": null,
    "explanation": "## 滑动窗口\n\n### 思路和算法\n\n我们先用一个例子考虑如何在较优的时间复杂度内通过本题。\n\n我们不妨以示例一中的字符串 abcabcbb 为例，找出从每一个字符开始的，不包含重复字符的最长子串，那么其中最长的那个字符串即为答案。对于示例一中的字符串，我们列举出这些结果，其中括号中表示选中的字符以及最长的字符串：\n\n* 以 (a)bcabcbb 开始的最长字符串为 (abc)abcbb；\n* 以 a(b)cabcbb 开始的最长字符串为 a(bca)bcbb；\n* 以 ab(c)abcbb 开始的最长字符串为 ab(cab)cbb；\n* 以 abc(a)bcbb 开始的最长字符串为 abc(abc)bb；\n* 以 abca(b)cbb 开始的最长字符串为 abca(bc)bb；\n* 以 abcab(c)bb 开始的最长字符串为 abcab(cb)b；\n* 以 abcabc(b)b 开始的最长字符串为 abcabc(b)b；\n* 以 abcabcb(b) 开始的最长字符串为 abcabcb(b)。\n\n发现了什么？如果我们依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的！这里的原因在于，假设我们选择字符串中的第 k 个字符作为起始位置，并且得到了不包含重复字符的最长子串的结束位置为 r(k) ，。那么当我们选择第 k+1 个字符作为起始位置时，首先从 k+1 到 r(k) 的字符显然是不重复的，并且由于少了原本的第 k 个字符，我们可以尝试继续增大 r(k)，直到右侧出现了重复字符为止。\n\n这样一来，我们就可以使用「滑动窗口」来解决这个问题了：\n\n我们使用两个指针表示字符串中的某个子串（或窗口）的左右边界，其中左指针代表着上文中「枚举子串的起始位置」，而右指针即为上文中的 r(k)；\n\n在每一步的操作中，我们会将左指针向右移动一格，表示 我们开始枚举下一个字符作为起始位置，然后我们可以不断地向右移动右指针，但需要保证这两个指针对应的子串中没有重复的字符。在移动结束后，这个子串就对应着 以左指针开始的，不包含重复字符的最长子串。我们记录下这个子串的长度；\n\n在枚举结束后，我们找到的最长的子串的长度即为答案。\n\n```js\nvar lengthOfLongestSubstring = function(s) {\n    // 哈希集合，记录每个字符是否出现过\n    const occ = new Set();\n    const n = s.length;\n    // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动\n    let rk = -1, ans = 0;\n    for (let i = 0; i < n; ++i) {\n        if (i != 0) {\n            // 左指针向右移动一格，移除一个字符\n            occ.delete(s.charAt(i - 1));\n        }\n        while (rk + 1 < n && !occ.has(s.charAt(rk + 1))) {\n            // 不断地移动右指针\n            occ.add(s.charAt(rk + 1));\n            ++rk;\n        }\n        // 第 i 到 rk 个字符是一个极长的无重复字符子串\n        ans = Math.max(ans, rk - i + 1);\n    }\n    return ans;\n};\n```\n\n### 复杂度分析\n\n时间复杂度：O(N)，其中 N 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。\n\n空间复杂度：O(∣Σ∣)，其中 Σ 表示字符集（即字符串中可以出现的字符），∣Σ∣ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在 [0,128) 内的字符，即 ∣Σ∣=128。我们需要用到哈希集合来存储出现过的字符，而字符最多有 ∣Σ∣ 个，因此空间复杂度为 O(∣Σ∣)。\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-09-05T03:47:13.000Z",
    "updateAt": "2021-09-05T20:19:03.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 768,
    "prev": "402c1f77-c556-4a1b-984f-07004305fba2",
    "next": "a4eeac78-8db1-44df-ae79-a5adb65eb55b"
  },
  "post": {
    "exerciseKey": "3ae5a790-ccaf-468c-b829-e38dfd572582",
    "category": "QA",
    "title": "无重复字符的最长子串",
    "level": 3,
    "updateAt": "2021-09-05T20:19:03+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}
