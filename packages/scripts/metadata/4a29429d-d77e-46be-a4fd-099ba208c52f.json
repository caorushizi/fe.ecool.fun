{
  "data": {
    "id": 1696,
    "exerciseKey": "4a29429d-d77e-46be-a4fd-099ba208c52f",
    "category": "QA",
    "renderType": "md",
    "title": "使用js实现二分查找",
    "desc": null,
    "options": null,
    "explanation": "二分查找，也称为折半查找，是指在有序的数组里找出指定的值，返回该值在数组中的索引。\n\n查找步骤如下：\n\n1. 从有序数组的最中间元素开始查找，如果该元素正好是指定查找的值，则查找过程结束。否则进行下一步;\n2. 如果指定要查找的元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作;\n3. 重复以上过程，直到找到目标元素的索引，查找成功;或者直到子数组为空，查找失败。\n\n优点是比较次数少，查找速度快，平均性能好；\n其缺点是要求待查表为**有序表**，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。\n\n## 实现方式\n\n### 非递归\n\n```js\n//arr:数组;key:查找的元素\nfunction search(arr, key) {\n    //初始索引开始位置和结束位置\n    var start = 0,\n        end = arr.length - 1;\n    while(start <= end) {\n        //取上限和下限中间的索引\n        var mid = parseInt((end + start) /2);\n        if(key == arr[mid]) {\n            //如果找到则直接返回\n            return mid;\n        } else if(key > arr[mid]) {\n            //如果key是大于数组中间索引的值则将索引开始位置设置为中间索引+1\n            start = mid + 1;\n        } else {\n            //如果key是小于数组中间索引的值则将索引结束位置设置为中间索引-1\n            end = mid -1;\n        }\n    }\n    //如果在循环内没有找到查找的key(start<=end)的情况则返回-1\n    return -1;\n}\nvar arr = [0,13,21,35,46,52,68,77,89,94];\nsearch(arr, 68); //6\nsearch(arr, 1); //-1\n```\n\n### 递归\n```js\n//arr:数组;key:查找的元素;start:开始索引;end:结束索引\nfunction search2(arr,key,start,end){\n    //首先判断当前起始索引是否大于结束索引,如果大于说明没有找到元素返回-1\n    if(start > end) {\n        return -1;\n    }\n    //如果手动调用不写start和end参数会当做第一次运行默认值\n    //三元表达式:如果不写end参数则为undefined说明第一次调用所以结束索引为arr.length-1\n    //如果是递归调用则使用传进来的参数end值\n    var end= end===undefined ? arr.length-1 : end;\n    //如果 || 前面的为真则赋值start,如果为假则赋值后面的0\n    //所以end变量没有写var end = end || arr.length-1;这样如果递归调用时候传参end为0时会被转化为false,导致赋值给arr.length-1造成无限循环溢出;\n    var start=start || 0;\n    //取中间的索引\n    var mid=parseInt((start+end)/2);\n    if(key==arr[mid]){\n        //如果找到则直接返回\n        return mid;\n    }else if(key<arr[mid]){\n        //如果key小于则递归调用自身,将结束索引设置为中间索引-1\n        return search2(arr,key,start,mid-1);\n    }else{\n        //如果key大于则递归调用自身,将起始索引设置为中间索引+1\n        return search2(arr,key,mid+1,end);\n    }\n}\nvar arr = [0,13,21,35,46,52,68,77,89,94];\nsearch2(arr, 77); //7\nsearch2(arr, 99); //-1\n```\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-03-15T15:55:04.000Z",
    "updateAt": "2022-03-21T22:42:47.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 586,
    "prev": "bce43604-1941-4945-bade-2e6622f4420f",
    "next": "ca2af24f-1516-4fd7-b979-e2f1d09ccb20"
  },
  "post": {
    "exerciseKey": "4a29429d-d77e-46be-a4fd-099ba208c52f",
    "category": "QA",
    "title": "使用js实现二分查找",
    "level": 2,
    "updateAt": "2022-03-21T22:42:47+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
