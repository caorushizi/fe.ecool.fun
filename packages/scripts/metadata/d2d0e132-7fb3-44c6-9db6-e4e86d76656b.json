{
  "data": {
    "id": 1699,
    "exerciseKey": "d2d0e132-7fb3-44c6-9db6-e4e86d76656b",
    "category": "QA",
    "renderType": "md",
    "title": "爱吃香蕉的珂珂",
    "desc": "珂珂喜欢吃香蕉。这里有 `N` 堆香蕉，第 `i` 堆中有 `piles[i]` 根香蕉。警卫已经离开了，将在 `H` 小时后回来。\n\n珂珂可以决定她吃香蕉的速度 `K` （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 `K` 根。如果这堆香蕉少于 `K` 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。 \n\n珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。\n\n返回她可以在 `H` 小时内吃掉所有香蕉的最小速度 `K`（`K` 为整数）。\n\n**示例 1：**\n\n**输入:** piles = [3,6,7,11], H = 8\n\n**输出:** 4\n\n**示例 2：**\n\n**输入:** piles = [30,11,23,4,20], H = 5\n\n**输出:** 30\n\n**示例 3：**\n\n**输入:** piles = [30,11,23,4,20], H = 6\n\n**输出:** 23\n\n**提示：**\n\n* `1 <= piles.length <= 10^4`\n* `piles.length <= H <= 10^9`\n* `1 <= piles[i] <= 10^9`\n\n```js\n/**\n * @param {number[]} piles\n * @param {number} h\n * @return {number}\n */\nvar minEatingSpeed = function(piles, h) {\n\n};\n```",
    "options": null,
    "explanation": "#### 方法：二分查找\n\n**思路**\n\n如果珂珂能以 `K` 的进食速度最终吃完所有的香蕉（在 `H` 小时内），那么她也可以用更快的速度吃完。\n\n当珂珂能以 `K` 的进食速度吃完香蕉时，我们令 `possible(K)` 为 `true`，那么就存在 `X` 使得当 `K >= X` 时， `possible(K) = True`。\n\n举个例子，当初始条件为 `piles = [3, 6, 7, 11]` 和 `H = 8` 时，存在 `X = 4` 使得 `possible(1) = possible(2) = possible(3) = False`，且 `possible(4) = possible(5) = ... = True`。\n\n**算法**\n\n我们可以二分查找 `possible(K)` 的值来找到第一个使得 `possible(X)` 为 `True` 的 `X`：这将是我们的答案。我们的循环中，不变量 `possible(hi)` 总为 `True`， `lo` 总小于等于答案。\n\n为了找到 `possible(K)` 的值， (即`珂珂`是否能以 `K` 的进食速度在 `H` 小时内吃完所有的香蕉），我们模拟这一情景。对于每一堆（大小 `p > 0`），我们可以推断出珂珂将在 `Math.ceil(p / K) = ((p-1) // K) + 1` 小时内吃完这一堆，我们将每一堆的完成时间加在一起并与 `H` 进行比较。\n\n```js\n/**\n * @param {number[]} piles\n * @param {number} H\n * @return {number}\n */\nvar minEatingSpeed = function (piles, H) {\n    let l = 0,\n        r = Math.max(...piles),\n        mid = 0,\n        res = 0;\n\n    while (l <= r) {\n        mid = ((l + r) / 2) << 0;\n        if (isPossible(piles, H, mid)) {\n            res = mid;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n\n    return res;\n};\n\nfunction isPossible(piles, H, K) {\n  let time = 0;\n  piles.forEach(p => {\n    time += Math.ceil(p / K);\n  });\n  return time <= H;\n}\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：O(N log W)，其中 N 是香蕉堆的数量，W 最大的香蕉堆的大小。\n* 空间复杂度：O(1)。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-03-20T12:01:54.000Z",
    "updateAt": "2023-06-11T15:20:49.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 327,
    "prev": "984c0b83-46a5-4d36-ae41-8e612bac2943",
    "next": "e834149b-923e-4565-8c26-2a43a5b98085"
  },
  "post": {
    "exerciseKey": "d2d0e132-7fb3-44c6-9db6-e4e86d76656b",
    "category": "QA",
    "title": "爱吃香蕉的珂珂",
    "level": 3,
    "updateAt": "2023-06-11T15:20:49+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}
