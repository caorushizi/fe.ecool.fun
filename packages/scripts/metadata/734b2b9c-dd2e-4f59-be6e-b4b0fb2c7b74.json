{
  "data": {
    "id": 1994,
    "exerciseKey": "734b2b9c-dd2e-4f59-be6e-b4b0fb2c7b74",
    "category": "QA",
    "renderType": "md",
    "title": "在没有async await 的时候，koa是怎么实现的洋葱模型?",
    "desc": null,
    "options": null,
    "explanation": "洋葱模型是一种中间件设计模式，它通过将请求传递给一系列中间件来处理HTTP请求，并在响应返回时再按照相反的顺序执行它们以处理响应。\n\n在没有 `async/await` 的情况下，Koa 可以使用 ES6 中引入的生成器函数（generator functions）来实现洋葱模型。\n\n具体地说，每个中间件都是一个生成器函数，它接收两个参数：ctx和next。ctx是请求上下文对象，包含有关当前请求的所有信息，例如请求头、请求主体等。next是一个指向下一个中间件的函数，当调用next时，它将控制权传递给下一个中间件。\n\n下面是一个简单的 Koa 中间件示例代码：\n\n```javascript\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.use(function *(next) {\n  console.log('1. Enter middleware 1');\n  yield next;\n  console.log('5. Exit middleware 1');\n});\n\napp.use(function *(next) {\n  console.log('2. Enter middleware 2');\n  yield next;\n  console.log('4. Exit middleware 2');\n});\n\napp.use(function *(next) {\n  console.log('3. Enter middleware 3');\n  this.body = 'Hello, world!';\n});\n\napp.listen(3000);\nconsole.log('Server running on http://localhost:3000');\n```\n\n在上述代码中，使用 `function*()` 定义了三个 Generator 函数分别作为三个中间件，通过 `yield next` 实现了中间件之间的顺序调用。运行该程序后，输出结果如下：\n\n```\n1. Enter middleware 1\n2. Enter middleware 2\n3. Enter middleware 3\n4. Exit middleware 2\n5. Exit middleware 1\n```\n\n从输出结果可以看出，Koa 依次执行了三个中间件函数，并按照洋葱模型的顺序依次进入和退出了各个中间件函数。这种方式虽然不如 async/await 方便可读，但仍然可以简洁有效地实现洋葱模型。\n\n需要注意的是，在上述代码中使用的 `yield next` 语句依赖于 `co` 库的支持，因此需要在程序中安装并引入 `co` 库。同时，需要注意遵循 Generator 函数相关规范和编写良好的中间件函数，以保证程序正确和稳定运行。",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-24T01:19:49.000Z",
    "updateAt": "2023-05-31T09:10:22.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 354,
    "prev": "c578d161-5468-4577-90c2-98e46cb82604",
    "next": "01c53308-5633-49ba-b528-7d55cee5aa12"
  },
  "post": {
    "exerciseKey": "734b2b9c-dd2e-4f59-be6e-b4b0fb2c7b74",
    "category": "QA",
    "title": "在没有async await 的时候，koa是怎么实现的洋葱模型?",
    "level": 2,
    "updateAt": "2023-05-31T09:10:22+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}
