{
  "data": {
    "id": 1674,
    "exerciseKey": "afe26637-d92a-43be-a4e4-e55b1a6d3d02",
    "category": "QA",
    "renderType": "md",
    "title": "npm 和 yarn有哪些不一样的地方？",
    "desc": null,
    "options": null,
    "explanation": "## 早期的npm\n\n其实在最早期的`npm`版本(npm v2)，`npm`的设计可以说是非常的简单，在安装依赖的时候会将依赖放到 `node_modules`文件中。同时，如果某个直接依赖A依赖于其他的依赖包B，那么依赖B会作为间接依赖，安装到依赖A的文件夹`node_modules`中，然后可能多个包之间也会有出现同样的依赖递归的，如果项目一旦过大,那么必然会形成一棵巨大的依赖树，依赖包会出现重复，形成`嵌套地狱`。\n\n那么我们如何去理解\"嵌套地狱\"呢？\n\n- 首先,项目的依赖树的层级过于深，如果有问题不利于排查和调试\n- 在依赖的分支中,可能会出现同样版本的相互依赖的问题\n\n那么这样的重复问题会带来什么后果呢？\n\n- 首先,会使得安装的结果占据了大量的空间资源,造成了资源的浪费\n- 同时,因为安装的依赖重复,会造成在安装依赖时,安装时间过长\n- 甚至是,因为目录层级过深,导致文件路径过长,会在`windows`系统下删除`node_modules`文件,出现删除不掉的情况\n\n那么, 后面的版本是如何一步步进行优化的呢？后面会陆续的揭晓。\n\n\n## npm or yarn 开发中的一点疑惑\n\n你在实际的开发会不会出现这样的一些情况：\n\n1. 当你项目依赖出现问题的时候，我们会不会是直接删除 `node_modules 和 lockfiles`依赖，再重新 `npm install`，删除大法是否真的好用？这样的使用方案会不会带来什么问题？\n2. 把所有的依赖包都安装到`dependencies`中，对`devDependencies` 不区分会不会有问题?\n3. 一个项目中，你使用 `yarn`，我使用`npm`，会不会有问题呢？\n4. 还有一个问题，`lockfiles 文件` 我们提交代码的时候需不需要提交到仓库中呢？\n\n## npm的安装机制和核心原理\n\n我们可以先来看看 npm 的核心目标\n\n> Bring the best of open source to you, your team and your company.\n\n意思是 给你和你的团队、你的公司带来最好的开源库和依赖。 通过这句话,我们可以了解到 npm 最重要的一点就是安装和维护依赖。那么，让我们先来看一看`npm`的安装机制是怎样的呢？\n\n### npm的安装机制\n\n下面我们会通过一个流程图来具体学习`npm install`的安装机制\n\n![](https://static.ecool.fun//article/e1fa04c2-4b9b-4b85-b5c6-5664b34587eb.png)\n\n`npm install`执行之后，首先会检查和获取 `npm的配置`，这里的优先级为：\n\n`项目级的.npmrc文件 > 用户级的 .npmrc文件 > 全局级的 .npmrc > npm内置的 .npmrc 文件`\n\n然后检查项目中是否有 `package-lock.json`文件\n\n- 如果有，检查 `package-lock.json`和 `package.json`声明的依赖是否一致：\n  \n  - 一致。直接使用`package-lock.json`中的信息,从网络或者缓存中加载依赖。\n  - 不一致。根据上述流程中的不同版本进行处理。\n- 如果没有，那么会根据`package.json`递归构建依赖树，然后就会根据构建好的依赖去下载完整的依赖资源，在下载的时候，会检查有没有相关的资源缓存：\n  \n  - 存在。直接解压到`node_modules`文件中。\n  - 不存在。从npm远端仓库下载包，校验包的完整性，同时添加到缓存中，解压到 `node_modules`中。\n\n最后，生成 `package-lock.json` 文件。\n\n其实，在我们实际的项目开发中，使用npm作为团队的最佳实践: `同一个项目团队，应该保持npm 版本的一致性`。\n\n从上面的安装流程，不知道大家注意到了一点没有，在实际的项目开发中，如果每次都去安装对应依赖时，如果相关的依赖包体积过大或者是依赖于网络，无疑会增加安装的时间成本。那么，缓存在这里的就是一个解决问题的好办法。\n\n## yarn的出现\n\nyarn 是一个由`Facebook`、`Google`、`Exponent`和`Tilde`构建的新的JavaScript包管理器。它的出现是为了解决历史上`npm`的某些不足(比如npm对于依赖的完整性和一致性的保证,以及npm安装过程中速度很慢的问题)\n\n当npm还处于`v3`时期的时候，一个叫`yarn`的包管理工具横空出世。在2016年，npm还没有package-lock.json文件，安装的时候速度很慢，稳定性很差，`yarn`的出现很好的解决了一下的一些问题：\n\n- **确定性:** 通过yarn.lock等机制，即使是不同的安装顺序，相同的依赖关系在任何的环境和容器中，都可以以相同的方式安装。(那么,此时的npm v5之前,并没有package-lock.json机制，只有默认并不会使用 npm-shrinkwrap.json)\n  \n- **采用模块扁平化的安装模式:** 将不同版本的依赖包，按照一定的策略，归结为单个版本。以避免创建多个版本造成工程的冗余(目前的npm也有相同的优化)\n  \n- **网络性能更好:** `yarn`采用了请求排队的理念，类似于并发池连接，能够更好的利用网络资源；同时也引入了一种安装失败的重试机制。\n  \n- **采用缓存机制，实现了离线模式** (目前的npm也有类似的实现)\n  \n\n我们可以来看一下 `yarn.lock`的结构：\n\n```\n\"@babel/cli@^7.1.6\", \"@babel/cli@^7.5.5\":\n  version \"7.8.4\"\n  resolved \"http://npm.in.zhihu.com/@babel%2fcli/-/cli-7.8.4.tgz#505fb053721a98777b2b175323ea4f090b7d3c1c\"\n  integrity sha1-UF+wU3IamHd7KxdTI+pPCQt9PBw=\n  dependencies:\n    commander \"^4.0.1\"\n    convert-source-map \"^1.1.0\"\n    fs-readdir-recursive \"^1.1.0\"\n    glob \"^7.0.0\"\n    lodash \"^4.17.13\"\n    make-dir \"^2.1.0\"\n    slash \"^2.0.0\"\n    source-map \"^0.5.0\"\n  optionalDependencies:\n    chokidar \"^2.1.8\"\n```\n\n熟悉npm的`package-lock.json`文件的朋友，可能一眼就看到了一些不同; `package-lock.json`采用的是`JSON`的结构，而`yarn`并没有采用这种结构，而是一种自定义的标记方式;我们可以看出新的自定义的方式，也同样保持了高度的可读性。\n\n**相比于npm,Yarn另一个显著的区别就是yarn.lock的子依赖的版本不是固定的版本**。这其实就说明了一个问题：一个单独的`yarn.lock`的问题并不能确定`node_modules`的文件结构，还需要`package.json`的配合。\n\n### yarn的安装机制\n\n上面一小节我们对npm的安装机制有了一些基本的了解,现在让我们先来简单的看一下`Yarn`的安装理念。\n\n简单来说, `Yarn`的安装大致分为5个步骤：\n\n![](https://static.ecool.fun//article/b61c64fd-cd5f-4070-9e35-70ef063fe402.png)\n\n检测(checking) ---> 解析包(Resolving Packages) ---> 获取包(Fetching) ---> 链接包(Linking Packages) ---> 构建包(Building Packages)\n\n那么接下来我们要开始具体分析这些过程中都做了哪些事情:\n\n**检测包**\n\n这一步，最主要的目的就是检测我们的项目中是否存在npm相关的文件,比如`package-lock.json`等;如果有,就会有相关的提示用户注意：这些文件可能会存在冲突。在这一步骤中\n也会检测系统OS, CPU等信息。\n\n**解析包**\n\n这一步会解析依赖树中的每一个包的信息:\n\n首先呢,获取到`首层依赖`: 也就是我们当前所处的项目中的`package.json`定义的`dependencies`、`devDependencies`、`optionalDependencies`的内容。\n\n紧接着**会采用遍历首层依赖的方式来获取包的依赖信息**,以及递归查找每个依赖下嵌套依赖的版本信息，并将解析过的包和正在进行解析包呢`用Set数据结构进行存储`,这样就可以保证`同一版本范围内的包`不会进行重复的解析:\n\n- 对于没有解析过的包A, 首次尝试从 `yarn.lock`中获取版本信息,并且标记为已解析\n- 如果在`yarn.lock`中没有找到包A， 则向`Registry`发起请求获取满足版本范围内的已知的最高版本的包信息,获取之后将该包标记为已解析。\n\n总之，经过解析包这一步之后呢,我们就已经确定了解析包的具体版本信息和包的下载地址。\n\n![](https://static.ecool.fun//article/9c89a175-22d2-4482-abda-44de697f3a1b.png)\n\n**获取包**\n\n这一步首先我们会检查缓存中是否有当前依赖的包,同时呢将缓存中不存在的包下载到缓存的目录中。但是这里有一个小问题需要大家思考一下:\n\n比如: 如何去判断缓存中有当前的依赖包呢？\n\n**其实呢,在Yarn中会根据 cacheFolder+slug+node_modules+pkg.name 生成一个路径;判断系统中是否存在该path,如果存在证明已经有缓存,不用重新下载。这个path也就是依赖包缓存的具体路径。**\n\n那么对于没有命中的缓存包呢？在 `Yarn` 中存在一个Fetch队列,按照具体的规则进行网络请求。如果下载的包是一个file协议,或者是相对路径,就说明指向一个本地目录,此时会调用Fetch From Local从离线缓存中获取包;否则调用 Fetch From External 获取包,最终获取的结果使用 fs.createWriteStream 写入到缓存目录。\n\n![](https://static.ecool.fun//article/2dd25d52-e152-4de8-9923-4dd6c37ecb83.png)\n\n**链接包**\n\n我们上一步已经把依赖放到了缓存目录,那么下一步,我们应该要做什么事情呢？是不是应该把项目中的依赖复制到`node_modules`目录下呢,没错;只不过此时需要遵循一个扁平化的原则。复制依赖之前, `Yarn`会先解析 `peerDepdencies`，如果找不到符合要求的`peerDepdencies`的包,会有 `warning`提示，并最终拷贝依赖到项目中。\n\n![imagepng](https://static.ecool.fun//article/c9436686-7577-4682-9354-0cdaa66a1091.png)\n\n**构建包**\n\n如果依赖包中存在二进制包需要进行编译，那么会在这一步进行。",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2022-02-16T12:00:36.000Z",
    "updateAt": "2024-08-10T17:06:11.000Z",
    "isCollected": false,
    "currentIndex": 695,
    "filterTotalNum": 1487,
    "prev": "389a7ca7-43d2-4fbe-99ef-50bea32bef5c",
    "next": "207b117b-2e93-4760-91ed-8e618a85a50e"
  },
  "post": {
    "exerciseKey": "afe26637-d92a-43be-a4e4-e55b1a6d3d02",
    "category": "QA",
    "title": "npm 和 yarn有哪些不一样的地方？",
    "level": 3,
    "createAt": "2022-02-16T12:00:36+00:00",
    "updateAt": "2024-08-10T17:06:11+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 33
  }
}