{
  "data": {
    "id": 431,
    "exerciseKey": "879ca17c-91e6-488d-a835-d89715f382c0",
    "category": "QA",
    "renderType": "html",
    "title": "单例模式",
    "desc": null,
    "options": null,
    "explanation": "<p><strong>1.什么是单例</strong><br/> </p><ul><li>保证一个类只有一个实例，并且提供一个访问该全局访问点</li></ul><p><strong> 2.那些地方用到了单例模式</strong><br/> </p><ol><li>网站的计数器，一般也是采用单例模式实现，否则难以同步。</li><li>应用程序的日志应用，一般都是单例模式实现，只有一个实例去操作才好，否则内容不好追加显示。</li><li>多线程的线程池的设计一般也是采用单例模式，因为线程池要方便对池中的线程进行控制</li><li>Windows的（任务管理器）就是很典型的单例模式，他不能打开俩个</li><li>windows的（回收站）也是典型的单例应用。在整个系统运行过程中，回收站只维护一个实例。</li></ol><p><strong> 3.单例优缺点</strong></p><p><br/> <strong>优点：</strong></p><ol><li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li><li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。</li><li>提供了对唯一实例的受控访问。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，当需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。</li><li>避免对共享资源的多重占用。</li></ol><p> <strong>缺点：</strong></p><ol><li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。</li><li>由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li></ol><p><strong> </strong></p><p><strong> 5.单例创建方式</strong></p><p><br/> <strong>（主要使用懒汉和懒汉式）</strong><br/> </p><ol><li>饿汉式:类初始化时,会立即加载该对象，线程天生安全,调用效率高。</li><li>懒汉式: 类初始化时,不会初始化该对象,真正需要使用的时候才会创建该对象,具备懒加载功能。</li></ol><p> </p>",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-06T15:36:49.000Z",
    "updateAt": "2021-07-11T10:52:57.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 901,
    "prev": "66ee2368-475e-403c-afb2-2c3fd693a843",
    "next": "13f1b2b9-725c-4c16-ada0-fb050fdafe28"
  },
  "post": {
    "exerciseKey": "879ca17c-91e6-488d-a835-d89715f382c0",
    "category": "QA",
    "title": "单例模式",
    "level": 2.5,
    "updateAt": "2021-07-11T10:52:57+00:00"
  },
  "tag": {
    "id": 27,
    "tagName": "设计模式",
    "type": "1",
    "exerciseCount": 7
  }
}
