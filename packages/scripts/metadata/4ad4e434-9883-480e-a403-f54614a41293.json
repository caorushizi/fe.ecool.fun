{
  "data": {
    "id": 2811,
    "exerciseKey": "4ad4e434-9883-480e-a403-f54614a41293",
    "category": "QA",
    "renderType": "md",
    "title": "浏览器如何解析css选择器？",
    "desc": "",
    "options": "",
    "explanation": "浏览器会『从右往左』解析CSS选择器。\n\n#### CSS选择器的解析顺序\n\n相信很多人在一开始接触CSS的时候都会看到一条规则就是尽量少使用层级关系，比如尽量不要写成：\n```css\n#div P.class {\n    color: red;\n}\n```\n\n而是写成：\n```css\n.class {\n    color: red;\n}\n```\n之所以需要这么写，给的解释是这样可以减少选择器匹配的次数。\n初看觉得哦，有点道理啊，但是往细了再想想：\n如果我把层级定的足够的清晰分明，那不是可以直接去掉很多不对应的CSS选择器的索引路径的么？为什么都是建议少使用层级关系呢？\n\n原因其实很简单，我们犯了一个经验主义错误，默认CSS选择器是从左往右进行解析的，实际上恰恰相反，CSS选择器是从右往左解析的。\n\n#### CSS选择器进行优化的必要性\n\n再次看下图：                       \n   \n![img](https://static.ecool.fun//article/68cbfba0-6602-4606-b7ee-e66015bedfc4.jpeg)\n\n在图中我们可以看到HTML解析出了一颗DOM tree，与此同时样式脚本则解析生成了一个style rules，也可以说是一个CSS tree。\n最后，DOM tree同style rules一同结合解析出一颗Render Tree，\n而Render Tree就是包含了一个dom对象以及为其计算好的样式规则，提供了布局以及显示方法。\n\n因为不清楚一个DOM对象上究竟对应着哪些样式规则，所以只能选择一个最笨的办法，\n即每一个DOM对象都遍历一遍style rules，DOM对象的数量相信大家也都清楚，\n如果每次遍历style rules都是像一个晒太阳的老大爷一样的悠哉游哉，因此对CSS选择器进行优化就是一个必须的事情了。\n\n#### 从右往左解析到底好在哪里\n假如有如下的一段HTML：\n```html\n<div id=\"div1\">\n    <div class=\"a\">\n        <div class=\"b\">\n            ...\n        </div>\n        <div class=\"c\">\n            <div class=\"d\">\n                ...\n            </div>\n            <div class=\"e\">\n                ...\n            </div>\n        </div>\n    </div>\n    <div class=\"f\">\n        <div class=\"c\">\n            <div class=\"d\">\n                ...\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n和如下的CSS：\n```css\n#div1 .c .d {}\n.f .c .d {}\n.a .c .e {}\n#div1 .f {}\n.c .d{}\n```\n\n假如我们的CSS解析器是从左往右进行匹配的，那么会生成如下的style rules：\n![01_47_03](https://static.ecool.fun//article/f5c251f0-544d-4807-ab1a-97a91159dab5.jpg)\n\n\n首先，#div1 .c .d ｛｝ .f .c .d ｛｝.c .d｛｝这三个选择器里面都含有 **.c .d｛｝这么一个公用样式，**\n所以哪怕是我们的DOM节点明确了是在#div1下面都必须对style rules进行全部的匹配查找，\n这样一来基本上可以说是**每一个DOM节点都必须完全遍历一遍style rules**，\n不然搞不好就会漏掉一些公用样式之类的，所以想着将层级写的更加详细就能去掉很多不对应的CSS选择器的索引路径的就不要想了，\n不管你写的多细，你总是需要把整个style rules都遍历一遍，不然万一漏掉了某个公用样式不就思密达了？\n\n那么如果我们换成从右向左进行解析就能够避免这种情况了么？请看下面这个style rules：                       \n![01_47_04](https://static.ecool.fun//article/cdccc9ba-a99a-4159-806d-04b973fb88ba.jpeg)\n\n别的先不提，**最少这个节点就少了很多**嘛，哪怕我这里同样是需要全部遍历一遍就冲着减少了这么多个节点也要从右往左进行解析啊！          \n               \n更重要的是，只要有公用样式，那么选择器最右边的那个类型选择器一定是相同的，如此公共样式就很自然的都集中到一个分支上，\n这个时候我们**完全可以将其他不匹配的路径全部去掉而不用担心会漏掉某些个公用样式了**。\n\n虽然当这颗CSS树在遍历的时候还有有部分节点会遍历到最后才能确定到底是不是匹配的，\n\n但总的来说从**右往左进行解析还是会比从左往右解析要少很多次的匹配**，这样带来的效率提升是显而易见的！\n\n同时，这也是不建议使用*通配符来进行样式匹配的原因：浏览器专门建立了一个反常规思维的从右往左的匹配规则就是为了避免对所有元素进行遍历。\n\n最后，从右往左进行解析还有一个好处那就是从右往左进行匹配的时候，匹配的全部是DOM元素的父节点，而从左往右进行匹配的时候时候，匹配的全部是DOM元素的子节点，这样就**避免了HTML与CSS没有下载完需要进行等待的情形**。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:45.000Z",
    "updateAt": "2024-08-14T14:27:30.000Z",
    "isCollected": false,
    "currentIndex": 36,
    "filterTotalNum": 1487,
    "prev": "2e201752-ecd3-4420-9d6e-df58b43e25ee",
    "next": "c94ef007-aafe-4b9c-b96b-4f25c8120130"
  },
  "post": {
    "exerciseKey": "4ad4e434-9883-480e-a403-f54614a41293",
    "category": "QA",
    "title": "浏览器如何解析css选择器？",
    "level": 2,
    "createAt": "2024-08-13T08:30:45+00:00",
    "updateAt": "2024-08-14T14:27:30+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 101
  }
}