{
  "data": {
    "id": 1840,
    "exerciseKey": "969cddcd-b1ac-4285-86f6-ae0a8eaf828a",
    "category": "QA",
    "renderType": "md",
    "title": "HTML5 有哪些 drag 相关的 API ？\n",
    "desc": null,
    "options": null,
    "explanation": "HTML5 的拖拽（Drag and Drop）API 允许用户通过拖拽操作在网页上移动元素或数据。这个 API 是在 HTML5 中引入的，它提供了一种标准的方式来实现拖拽功能。以下是对 HTML5 拖拽 API 的详细介绍：\n\n### 基本概念\n\n- **拖拽源（Drag Source）**：可以被拖拽的元素。通过设置 `draggable` 属性为 `true`，元素可以成为拖拽源。\n- **拖拽目标（Drop Target）**：接受被拖拽元素的区域。拖拽源元素被拖拽到目标区域时，目标区域会处理拖拽操作。\n\n### 主要步骤\n\n1. **使元素可拖拽**：\n   - 在需要拖拽的元素上设置 `draggable=\"true\"` 属性。\n\n2. **处理拖拽事件**：\n   - **`dragstart`**：当拖拽操作开始时触发。通常用于设置拖拽数据。\n   - **`drag`**：在拖拽过程中不断触发。用于提供实时反馈。\n   - **`dragend`**：拖拽操作结束时触发。用于清理或更新 UI。\n\n3. **处理拖拽目标**：\n   - **`dragenter`**：当拖拽元素进入目标区域时触发。\n   - **`dragover`**：当拖拽元素悬停在目标区域上方时触发。必须调用 `event.preventDefault()` 才能接受拖拽。\n   - **`dragleave`**：当拖拽元素离开目标区域时触发。\n   - **`drop`**：当拖拽元素在目标区域放下时触发。用于处理放置逻辑。\n\n### 示例代码\n\n**HTML**：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HTML5 Drag and Drop</title>\n    <style>\n        #drag-source {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n            margin: 20px;\n            text-align: center;\n            line-height: 100px;\n            cursor: move;\n        }\n        #drop-target {\n            width: 200px;\n            height: 200px;\n            background-color: lightgreen;\n            border: 2px dashed gray;\n            margin: 20px;\n            text-align: center;\n            line-height: 200px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"drag-source\" draggable=\"true\">Drag me</div>\n    <div id=\"drop-target\">Drop here</div>\n\n    <script>\n        const dragSource = document.getElementById('drag-source');\n        const dropTarget = document.getElementById('drop-target');\n\n        // Drag start event\n        dragSource.addEventListener('dragstart', (event) => {\n            event.dataTransfer.setData('text/plain', 'Dragged data');\n        });\n\n        // Drag over event\n        dropTarget.addEventListener('dragover', (event) => {\n            event.preventDefault(); // Necessary to allow dropping\n            dropTarget.style.backgroundColor = 'lightyellow';\n        });\n\n        // Drag leave event\n        dropTarget.addEventListener('dragleave', () => {\n            dropTarget.style.backgroundColor = 'lightgreen';\n        });\n\n        // Drop event\n        dropTarget.addEventListener('drop', (event) => {\n            event.preventDefault();\n            dropTarget.style.backgroundColor = 'lightgreen';\n            const data = event.dataTransfer.getData('text/plain');\n            dropTarget.textContent = `Dropped: ${data}`;\n        });\n    </script>\n</body>\n</html>\n```\n\n### 关键点\n\n1. **`draggable` 属性**：使元素可以被拖拽。设置 `draggable=\"true\"` 启用拖拽。\n2. **`dataTransfer` 对象**：在 `dragstart` 事件中使用 `event.dataTransfer` 设置和获取拖拽数据。\n3. **`preventDefault()`**：在 `dragover` 事件中调用 `event.preventDefault()` 允许放置操作。\n4. **事件处理**：通过监听不同的拖拽事件来实现自定义的拖拽行为。\n\n### 优点\n\n- **标准化**：HTML5 拖拽 API 提供了浏览器一致的拖拽行为，避免了以前自定义拖拽实现的不一致性。\n- **简洁**：使用标准的事件处理方式实现拖拽功能，无需依赖第三方库。\n\n### 缺点\n\n- **兼容性**：虽然现代浏览器都支持 HTML5 拖拽 API，但旧版浏览器和某些环境可能不完全支持。\n- **复杂性**：处理拖拽事件可能涉及较多的事件监听和状态管理，特别是在复杂的应用中。",
    "pivot": "",
    "vipLimit": 0,
    "level": 1.5,
    "appId": 7,
    "createAt": "2022-06-25T06:34:57.000Z",
    "updateAt": "2024-08-22T01:32:17.000Z",
    "isCollected": false,
    "currentIndex": 549,
    "filterTotalNum": 1487,
    "prev": "0958f1b6-6111-4c83-8492-34cb32ad70b9",
    "next": "8e135d77-c081-4419-b0b3-2e43461d5b55"
  },
  "post": {
    "exerciseKey": "969cddcd-b1ac-4285-86f6-ae0a8eaf828a",
    "category": "QA",
    "title": "HTML5 有哪些 drag 相关的 API ？\n",
    "level": 1.5,
    "createAt": "2022-06-25T06:34:57+00:00",
    "updateAt": "2024-08-22T01:32:17+00:00"
  },
  "tag": {
    "id": 12,
    "tagName": "HTML",
    "type": "1",
    "exerciseCount": 68
  }
}