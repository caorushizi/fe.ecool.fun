{
  "data": {
    "id": 2751,
    "exerciseKey": "b62ecffe-ff0d-4f65-8ea7-884ef5b8ddff",
    "category": "QA",
    "renderType": "md",
    "title": "说说 axios 的拦截器原理及应用，并简单手写核心逻辑",
    "desc": "",
    "options": "",
    "explanation": "`Axios` 的拦截器（interceptors）允许你在请求或响应被处理之前，进行一些自定义的处理或修改。拦截器提供了一个强大的机制来对请求和响应进行全局处理，比如添加认证信息、处理错误、或修改请求数据等。\n\n### **1. 拦截器原理**\n\n1. **请求拦截器**：在请求发送到服务器之前，可以对请求进行修改、添加头信息、处理请求数据等。\n2. **响应拦截器**：在接收到响应数据之前，可以对响应数据进行修改或处理错误。\n\n### **2. 拦截器应用**\n\n**常见应用场景**：\n\n- **请求拦截器**：\n  - 添加认证令牌（Token）到请求头。\n  - 对请求数据进行统一的格式化或加密。\n\n- **响应拦截器**：\n  - 统一处理错误码或异常情况。\n  - 对响应数据进行统一的格式化或解密。\n\n### **3. 简单手写核心逻辑**\n\n手写核心逻辑可以帮助理解拦截器的基本实现原理。以下是一个简化的 `Axios` 拦截器的实现：\n\n#### **简化 Axios 实现**\n\n```javascript\nclass SimpleAxios {\n  constructor() {\n    this.requestInterceptors = [];\n    this.responseInterceptors = [];\n  }\n\n  // 添加请求拦截器\n  useRequestInterceptor(fn) {\n    this.requestInterceptors.push(fn);\n  }\n\n  // 添加响应拦截器\n  useResponseInterceptor(fn) {\n    this.responseInterceptors.push(fn);\n  }\n\n  // 发送请求\n  async request(config) {\n    // 执行请求拦截器\n    for (const interceptor of this.requestInterceptors) {\n      config = interceptor(config);\n    }\n\n    // 模拟发送请求\n    let response = await this._sendRequest(config);\n\n    // 执行响应拦截器\n    for (const interceptor of this.responseInterceptors) {\n      response = interceptor(response);\n    }\n\n    return response;\n  }\n\n  // 模拟请求发送\n  async _sendRequest(config) {\n    // 这里模拟返回一个响应\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: 'response data', config });\n      }, 1000);\n    });\n  }\n}\n\n// 使用示例\nconst axios = new SimpleAxios();\n\n// 添加请求拦截器\naxios.useRequestInterceptor(config => {\n  console.log('Request Interceptor:', config);\n  config.headers = { Authorization: 'Bearer token' };\n  return config;\n});\n\n// 添加响应拦截器\naxios.useResponseInterceptor(response => {\n  console.log('Response Interceptor:', response);\n  response.data = `Processed: ${response.data}`;\n  return response;\n});\n\n// 发送请求\naxios.request({ url: '/api/data', method: 'GET' })\n  .then(response => {\n    console.log('Response:', response);\n  });\n```\n\n### **4. 解释**\n\n- **`SimpleAxios` 类**：模拟了 `Axios` 的核心功能，包括请求和响应拦截器的添加及处理。\n- **`useRequestInterceptor` 和 `useResponseInterceptor`**：用于注册请求和响应拦截器。\n- **`request` 方法**：在发送请求之前和之后分别执行请求和响应拦截器。\n- **`_sendRequest` 方法**：模拟发送请求并返回响应。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:41.000Z",
    "updateAt": "2024-08-14T20:20:20.000Z",
    "isCollected": false,
    "currentIndex": 62,
    "filterTotalNum": 1487,
    "prev": "ec9fd724-c3ab-453f-818c-a4909155c5f6",
    "next": "f9dc6afe-f0e3-4f13-904a-91e32dac0cbb"
  },
  "post": {
    "exerciseKey": "b62ecffe-ff0d-4f65-8ea7-884ef5b8ddff",
    "category": "QA",
    "title": "说说 axios 的拦截器原理及应用，并简单手写核心逻辑",
    "level": 2,
    "createAt": "2024-08-13T08:30:41+00:00",
    "updateAt": "2024-08-14T20:20:20+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}