{
  "data": {
    "id": 645,
    "exerciseKey": "cfe8f03e-1a05-4c00-baa7-04ae08c8765c",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对git rebase 和 git merge的理解？以及它们的区别？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n在使用 `git` 进行版本管理的项目中，当完成一个特性的开发并将其合并到 `master` 分支时，会有两种方式：\n\n- git merge\n- git rebase\n\n`git rebase` 与 `git merge`都有相同的作用，都是将一个分支的提交合并到另一分支上，但是在原理上却不相同\n\n\n\n用法上两者也十分的简单：\n\n### git merge\n\n将当前分支合并到指定分支，命令用法如下：\n\n```cmd\ngit merge xxx\n```\n\n\n\n### git rebase\n\n将当前分支移植到指定分支或指定`commit`之上，用法如下：\n\n```cmd\ngit rebase -i <commit>\n```\n\n常见的参数有`--continue`，用于解决冲突之后，继续执行`rebase`\n\n```cmd\ngit rebase --continue\n```\n\n\n\n\n\n## 二、分析\n\n### git merge\n\n通过`git merge`将当前分支与`xxx`分支合并，产生的新的`commit`对象有两个父节点\n\n如果“指定分支”本身是当前分支的一个直接子节点，则会产生快照合并\n\n举个例子，`bugfix`分支是从`maste`r分支分叉出来的，如下所示：\n\n ![](https://static.ecool.fun//article/bd7c7fd1-bd6c-400e-a46f-3eb412509b1a.png)\n\n合并` bugfix`分支到`master`分支时，如果`master`分支的状态没有被更改过，即 `bugfix`分支的历史记录包含`master`分支所有的历史记录\n\n所以通过把`master`分支的位置移动到`bugfix`的最新分支上，就完成合并\n\n如果`master`分支的历史记录在创建`bugfix`分支后又有新的提交，如下情况：\n\n ![](https://static.ecool.fun//article/e78468a9-2f89-4c19-8799-28bf0813ddf0.png)\n\n这时候使用`git merge`的时候，会生成一个新的提交，并且`master`分支的`HEAD`会移动到新的分支上，如下：\n\n ![](https://static.ecool.fun//article/bb9bacf3-0abc-4150-8e98-2948a00d1ce5.png)\n\n\n\n从上面可以看到，会把两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果是生成一个新的快照\n\n\n\n### git rebase\n\n同样，`master`分支的历史记录在创建`bugfix`分支后又有新的提交，如下情况：\n\n ![](https://static.ecool.fun//article/f76cf1d5-4d1c-4b96-8df0-c951db3b69cf.png)\n\n通过`git rebase`，会变成如下情况：\n\n ![](https://static.ecool.fun//article/3bf8acbb-4116-413d-9669-94b278264b8d.png)\n\n在移交过程中，如果发生冲突，需要修改各自的冲突，如下：\n\n ![](https://static.ecool.fun//article/ee94caba-cb56-46c7-8c3a-d8736204371e.png)\n\n`rebase`之后，`master`的`HEAD`位置不变。因此，要合并`master`分支和`bugfix`分支\n\n ![](https://static.ecool.fun//article/23f17601-8d8a-48c2-8ced-5c21739a2bb6.png)\n\n从上面可以看到，`rebase`会找到不同的分支的最近共同祖先，如上图的`B`\n\n然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件（老的提交`X`和`Y`也没有被销毁，只是简单地不能再被访问或者使用）\n\n然后将当前分支指向目标最新位置`D`, 然后将之前另存为临时文件的修改依序应用\n\n\n\n\n\n## 三、区别\n\n从上面可以看到，`merge`和`rebasea`都是合并历史记录，但是各自特性不同：\n\n### merge\n\n通过`merge`合并分支会新增一个`merge commit`，然后将两个分支的历史联系起来\n\n其实是一种非破坏性的操作，对现有分支不会以任何方式被更改，但是会导致历史记录相对复杂\n\n\n\n### rebase\n\n`rebase `会将整个分支移动到另一个分支上，有效地整合了所有分支上的提交\n\n主要的好处是历史记录更加清晰，是在原有提交的基础上将差异内容反映进去，消除了 ` git merge `所需的不必要的合并提交\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T03:40:23.000Z",
    "updateAt": "2024-01-25T19:23:01.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 70,
    "prev": "24674728-b580-4985-8fb0-e7c304f5e406",
    "next": "7aa8fdff-3c1c-423c-8f2d-cd784dfcbac1"
  },
  "post": {
    "exerciseKey": "cfe8f03e-1a05-4c00-baa7-04ae08c8765c",
    "category": "QA",
    "title": "说说你对git rebase 和 git merge的理解？以及它们的区别？",
    "level": 2,
    "updateAt": "2024-01-25T19:23:01+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 30
  }
}
