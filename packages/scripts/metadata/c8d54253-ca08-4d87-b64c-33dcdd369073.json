{
  "data": {
    "id": 590,
    "exerciseKey": "c8d54253-ca08-4d87-b64c-33dcdd369073",
    "category": "QA",
    "renderType": "md",
    "title": "React中的路由懒加载是什么？原理是什么？",
    "desc": null,
    "options": null,
    "explanation": "## React.lazy 是什么\n\n随着前端应用体积的扩大，资源加载的优化是我们必须要面对的问题，动态代码加载就是其中的一个方案。\n\nwebpack 提供了符合 ECMAScript 提案 的 import() 语法 ，让我们来实现动态地加载模块（注：require.ensure 与 import() 均为 webpack 提供的代码动态加载方案，在 webpack 2.x 中，require.ensure 已被 import 取代）。\n\n在 React 16.6 版本中，新增了 React.lazy 函数，它能让你像渲染常规组件一样处理动态引入的组件，配合 webpack 的 Code Splitting ，只有当组件被加载，对应的资源才会导入 ，从而达到懒加载的效果。\n\n## 使用 React.lazy\n\n在实际的使用中，首先是引入组件方式的变化：\n\n```\n// 不使用 React.lazy\nimport OtherComponent from './OtherComponent';\n// 使用 React.lazy\nconst OtherComponent = React.lazy(() => import('./OtherComponent'))\n```\n\nReact.lazy 接受一个函数作为参数，这个函数需要调用 import() 。它需要返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。\n\nReact.lazy 方法返回的是一个 lazy 组件的对象，类型是 react.lazy，并且 lazy 组件具有 _status 属性，与 Promise 类似它具有 Pending、Resolved、Rejected 三个状态，分别代表组件的加载中、已加载、和加载失败三中状态。\n\n需要注意的一点是，React.lazy 需要配合 Suspense 组件一起使用，在 Suspense 组件中渲染 React.lazy 异步加载的组件。如果单独使用 React.lazy，React 会给出错误提示。\n\n## 实现原理\n\n### Webpack 动态加载\n\n上面使用了 import() 语法，webpack 检测到这种语法会自动代码分割。使用这种动态导入语法代替以前的静态引入，可以让组件在渲染的时候，再去加载组件对应的资源，这个异步加载流程的实现机制是怎么样呢？\n\nwebpack 是通过创建 script 标签来实现动态加载的，找出依赖对应的 chunk 信息，然后生成 script 标签来动态加载 chunk，每个 chunk 都有对应的状态：未加载 、 加载中、已加载 。\n\n### Suspense 组件\n\nSuspense 内部主要通过捕获组件的状态去判断如何加载，上面我们提到 React.lazy 创建的动态加载组件具有 Pending、Resolved、Rejected 三种状态，当这个组件的状态为 Pending 时显示的是 Suspense 中 fallback 的内容，只有状态变为 resolve 后才显示组件。\n\n### Error Boundaries 处理资源加载失败场景\n\n如果遇到网络问题或是组件内部错误，页面的动态资源可能会加载失败，为了优雅降级，可以使用 Error Boundaries 来解决这个问题。\n\nError Boundaries 是一种组件，如果你在组件中定义了 static getDerivedStateFromError() 或 componentDidCatch() 生命周期函数，它就会成为一个 Error Boundaries 的组件。\n\n它的用法也非常的简单，可以直接当作一个组件去使用，如下：\n\n```javascript\n<ErrorBoundary>\n  <MyWidget />\n</ErrorBoundary>\n```\n\n## 总结\n\nReact.lazy() 和 React.Suspense 的提出为现代 React 应用的性能优化和工程化提供了便捷之路。 React.lazy 可以让我们像渲染常规组件一样处理动态引入的组件，结合 Suspense 可以更优雅地展现组件懒加载的过渡动画以及处理加载异常的场景。\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3.5,
    "appId": 7,
    "createAt": "2021-08-15T02:24:32.000Z",
    "updateAt": "2024-08-10T17:05:42.000Z",
    "isCollected": false,
    "currentIndex": 910,
    "filterTotalNum": 1487,
    "prev": "8dad4e08-b8b7-4593-bb5e-8df4d4b14499",
    "next": "c00fbf63-deef-433c-aa48-a10812107b0e"
  },
  "post": {
    "exerciseKey": "c8d54253-ca08-4d87-b64c-33dcdd369073",
    "category": "QA",
    "title": "React中的路由懒加载是什么？原理是什么？",
    "level": 3.5,
    "createAt": "2021-08-15T02:24:32+00:00",
    "updateAt": "2024-08-10T17:05:42+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}