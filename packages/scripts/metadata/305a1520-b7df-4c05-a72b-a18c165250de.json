{
  "data": {
    "id": 203,
    "exerciseKey": "305a1520-b7df-4c05-a72b-a18c165250de",
    "category": "QA",
    "renderType": "md",
    "title": "什么是事件代理，以及它的应用场景有哪些？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n事件代理，俗地来讲，就是把一个元素响应事件（`click`、`keydown`......）的函数委托到另一个元素\n\n前面讲到，事件流的都会经过三个阶段： 捕获阶段 -> 目标阶段 -> 冒泡阶段，而事件委托就是在冒泡阶段完成\n\n事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素\n\n当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数\n\n下面举个例子：\n\n比如一个宿舍的同学同时快递到了，一种笨方法就是他们一个个去领取\n\n较优方法就是把这件事情委托给宿舍长，让一个人出去拿好所有快递，然后再根据收件人一一分发给每个同学\n\n在这里，取快递就是一个事件，每个同学指的是需要响应事件的 `DOM `元素，而出去统一领取快递的宿舍长就是代理的元素\n\n所以真正绑定事件的是这个元素，按照收件人分发快递的过程就是在事件执行中，需要判断当前响应的事件应该匹配到被代理元素中的哪一个或者哪几个\n\n\n\n## 二、应用场景\n\n如果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件\n\n```js\n<ul id=\"list\">\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  ......\n  <li>item n</li>\n</ul>\n```\n\n如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的\n\n```js\n// 获取目标元素\nconst lis = document.getElementsByTagName(\"li\")\n// 循环遍历绑定事件\nfor (let i = 0; i < lis.length; i++) {\n    lis[i].onclick = function(e){\n        console.log(e.target.innerHTML)\n    }\n}\n```\n\n这时候就可以事件委托，把点击事件绑定在父级元素`ul`上面，然后执行事件的时候再去匹配目标元素\n\n```js\n// 给父层元素绑定事件\ndocument.getElementById('list').addEventListener('click', function (e) {\n    // 兼容性处理\n    var event = e || window.event;\n    var target = event.target || event.srcElement;\n    // 判断是否匹配目标元素\n    if (target.nodeName.toLocaleLowerCase === 'li') {\n        console.log('the content is: ', target.innerHTML);\n    }\n});\n```\n\n还有一种场景是上述列表项并不多，我们给每个列表项都绑定了事件\n\n但是如果用户能够随时动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件\n\n如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的\n\n举个例子：\n\n下面`html`结构中，点击`input`可以动态添加元素\n\n```html\n<input type=\"button\" name=\"\" id=\"btn\" value=\"添加\" />\n<ul id=\"ul1\">\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n    <li>item 4</li>\n</ul>\n```\n\n使用事件委托\n\n```js\nconst oBtn = document.getElementById(\"btn\");\nconst oUl = document.getElementById(\"ul1\");\nconst num = 4;\n\n//事件委托，添加的子元素也有事件\noUl.onclick = function (ev) {\n    ev = ev || window.event;\n    const target = ev.target || ev.srcElement;\n    if (target.nodeName.toLowerCase() == 'li') {\n        console.log('the content is: ', target.innerHTML);\n    }\n\n};\n\n//添加新节点\noBtn.onclick = function () {\n    num++;\n    const oLi = document.createElement('li');\n    oLi.innerHTML = `item ${num}`;\n    oUl.appendChild(oLi);\n};\n```\n\n可以看到，使用事件委托，在动态绑定事件的情况下是可以减少很多重复工作的\n\n\n\n## 三、总结\n\n适合事件委托的事件有：`click`，`mousedown`，`mouseup`，`keydown`，`keyup`，`keypress`\n\n从上面应用场景中，我们就可以看到使用事件委托存在两大优点：\n\n- 减少整个页面所需的内存，提升整体性能\n- 动态绑定，减少重复工作\n\n但是使用事件委托也是存在局限性：\n\n- `focus`、`blur `这些事件没有事件冒泡机制，所以无法进行委托绑定事件\n\n- `mousemove`、`mouseout `这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的\n\n如果把所有事件都用事件代理，可能会出现事件误判，即本不该被触发的事件被绑定上了事件",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:53:13.000Z",
    "updateAt": "2024-01-24T17:36:00.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 159,
    "prev": "bbcedbfa-a74f-411f-a309-01f7e590ee50",
    "next": "4354687c-2600-4b62-98ec-2bef8df9a171"
  },
  "post": {
    "exerciseKey": "305a1520-b7df-4c05-a72b-a18c165250de",
    "category": "QA",
    "title": "什么是事件代理，以及它的应用场景有哪些？",
    "level": 2,
    "updateAt": "2024-01-24T17:36:00+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}