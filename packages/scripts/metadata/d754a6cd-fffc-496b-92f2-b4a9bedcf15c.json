{
  "data": {
    "id": 1978,
    "exerciseKey": "d754a6cd-fffc-496b-92f2-b4a9bedcf15c",
    "category": "QA",
    "renderType": "md",
    "title": "mouseEnter 和 mouseOver 有什么区别？",
    "desc": "```js\n// 比如这个函数输入一个1，那么要求函数返回A\nconst A = [1,2,3];\nconst B = [4,5,6];\nconst C = [7,8,9];\n\nfunction test(num) {\n\n}\n```",
    "options": null,
    "explanation": " `mouseenter` 和 `mouseover` 是两个用于处理鼠标进入元素时的事件，但它们在一些关键点上有所不同：\n\n1. **事件冒泡**：\n\n    - `mouseenter`：这个事件在鼠标指针首次进入特定元素（或其子元素）时触发。当鼠标进入元素时，会触发该元素的 `mouseenter` 事件，但不会在元素的子元素上冒泡。因此，该事件通常用于检测鼠标首次进入元素时的动作。\n\n    - `mouseover`：这个事件在鼠标指针移动到某个元素上时触发，不论它是直接在这个元素上触发还是在其子元素上触发。当鼠标进入一个元素时，它会在该元素上触发 `mouseover` 事件，然后冒泡到父元素。\n\n2. **事件触发范围**：\n\n    - `mouseenter`：当鼠标进入元素自身时触发，只在目标元素上触发，不会因为鼠标移动到其子元素上而再次触发。\n\n    - `mouseover`：不仅在目标元素上触发，也在其子元素上触发。所以，如果鼠标从一个子元素移动到另一个子元素，这些元素的父元素会触发多个 `mouseover` 事件。\n\n3. **事件对象的属性**：\n\n    - `mouseenter`：事件对象通常会有 `relatedTarget` 属性，它指向鼠标移动前的那个元素。如果 `relatedTarget` 指向目标元素或为 `null`，那么事件就不会触发。\n\n    - `mouseover`：事件对象也会有 `relatedTarget` 属性，通常指向从中离开的那个元素。\n\n### 使用场景\n\n- `mouseenter` 更适合用来检测鼠标首次进入某个元素时的行为。\n- `mouseover` 更适合用来检测鼠标在元素或其子元素之间移动时的行为，因为它冒泡。\n\n在实际使用时，如果你只想在鼠标首次进入元素时触发某些行为（比如显示一个提示），可以使用 `mouseenter`；如果你希望在鼠标移动到某个元素或其子元素上时都触发某些行为（比如动态改变样式），可以使用 `mouseover`。",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-15T13:30:12.000Z",
    "updateAt": "2024-04-19T09:48:28.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 2,
    "prev": "69b606ac-e69b-4bb5-9997-21860904d29b",
    "next": "19da1c13-87a9-4fb4-98ae-0af28c7f03e6"
  },
  "post": {
    "exerciseKey": "d754a6cd-fffc-496b-92f2-b4a9bedcf15c",
    "category": "QA",
    "title": "mouseEnter 和 mouseOver 有什么区别？",
    "level": 1,
    "updateAt": "2024-04-19T09:48:28+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 325
  }
}