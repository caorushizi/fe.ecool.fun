{
  "data": {
    "id": 1791,
    "exerciseKey": "8b516cb7-fa94-4d68-929f-d3c628d1b7a2",
    "category": "QA",
    "renderType": "md",
    "title": "前端实现动画有哪些方式？",
    "desc": null,
    "options": null,
    "explanation": "前端常用的动画实现方式有以下种：\n\n1. css3的`transition` 属性\n2. css3的`animation` 属性\n3. 原生JS动画\n4. 使用`canvas`绘制动画\n5. SVG动画\n6. Jquery的`animate`函数\n7. 使用gif图片\n\n## 1. css3的`transition`\n\n`transition`属性：\n\n用来设置样式的属性值是如何从一种状态平滑过渡到另外一种状态\n\n**语法：**\n\n```css\ntransition: property duration timing-function delay;\n```\n\n`transition`是一种简写属性,它可以拆分为四个过渡属性。你可以 `transition: 值1，值2，值3，值4` 这样写，也可以：`transition-property: 值1;`，`transition-duration:值2;`，`transition-timing-function:值2;`，`transition-delay:值4;`这样写。\n\n| 值 | 描述 |\n| --|--|\n|transition-property|规定设置过渡效果的 CSS 属性的名称。|\n|transition-duration|规定完成过渡效果需要多少秒或毫秒。|\n|transition-timing-function|规定速度效果的速度曲线。|\n|transition-delay|定义过渡效果何时开始。|\n\n**演示代码：**\n\n```html\n<div></div>\n\n```\n\n```css\ndiv{\n  width:50px;\n  height: 50px;\n  background-color: pink;\n}\n\ndiv:hover{\n  width:200px;\n}\n```\n\n**效果图：** \n\n![在这里插入图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/17/1735b47d5cabe35b~tplv-t2oaga2asx-image.image)\n\n由上图可看出：鼠标移入移出时,`width`状态的变化是瞬间完成的。 \n\n添加`transition: 1s;`后\n\n```css\ndiv{\n  width:50px;\n  height: 50px;\n  background-color: pink;\n  transition: 1s;\n}\ndiv:hover{\n  width:200px;\n}\n```\n\n**效果图：** \n\n![在这里插入图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/17/1735b47d5de25bf8~tplv-t2oaga2asx-image.image)\n\n`transition: 1s;` 设置了`width`属性状态变化的过渡时间为1秒。 \n\n`transition`属性默认为：`transition: all 0 ease 0;`\n\n`transition:1s;` 等价于 `transition: all 1s ease 0;`\n\n## 2. css3的`animation`\n\n`animation`属性：比较类似于 flash 中的逐帧动画。学习过 `flash`的同学知道，这种逐帧动画是由关键帧组成，很多个关键帧连续的播放就组成了动画在 `CSS3` 中是由属性`keyframes`来完成逐帧动画的。\n\n`animation`属性与`transition`属性的区别：\n\n* `transition`只需指定动画的开始和结束状态，整个动画的过程是由特定的函数控制,你不用管它。\n* `animation`可以对动画过程中的各个关键帧进行设置\n\n**演示代码：**\n\n```html\n<div></div>\n\n```\n\n```css\ndiv{\n\twidth:50px;\n\theight:50px;\n\tbackground-color: pink;\n}\ndiv:hover{\n\tanimation: change1 5s;\n}\n@keyframes change1{\n\t25%  {width:130px;background-color: red;}\n\t50%  {width:170px;background-color: blue;}\n\t75%  {width:210px;background-color: green;}\n\t100% {width:250px;background-color: yellow;}\n}\n\n```\n\n**效果图：** \n\n![在这里插入图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/17/1735b47d834ba42c~tplv-t2oaga2asx-image.image)\n\n## 3. 原生`JS`动画\n\n其主要思想是通过setInterval或setTimeout方法的回调函数来持续调用改变某个元素的CSS样式以达到元素样式变化的效果。\n\njavascript 实现动画通常会导致页面频繁性重排重绘，消耗性能，一般应该在桌面端浏览器。在移动端上使用会有明显的卡顿。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <style type=\"text/css\">\n        #rect {\n            width: 200px;\n            height: 200px;\n            background: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script>\n        let elem = document.getElementById('rect');\n        let left = 0;\n        let timer = setInterval(function(){\n            if(left<window.innerWidth-200){\n                elem.style.marginLeft = left+'px';\n                left ++;\n            }else {\n                clearInterval(timer);\n            }\n        },16);\n    </script>\n</body>\n</html>\n\n```\n\n上面的例子中，我们设置的setInterval时间间隔是16ms。一般认为人眼能辨识的流畅动画为每秒60帧，这里16ms比(1000ms/60)帧略小一些，但是一般可仍为该动画是流畅的。\n\n在很多移动端动画性能优化时，一般使用16ms来进行节流处理连续触发的浏览器事件。例如对touchmove、scroll事件进行节流等。通过这种方式减少持续事件的触发频率，可以大大提升动画的流畅性。\n\n## 4. 使用`canvas`绘制动画\n\ncanvas作为H5新增元素，是借助Web API来实现动画的。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\">\n        let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke();\n            if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16);\n    </script>\n</body>\n</html>\n```\n\n注释：通过getContext()获取元素的绘制对象，通过clearRect不断清空画布并在新的位置上使用fillStyle绘制新矩形内容实现页面动画效果。\n\nCanvas主要优势是可以应对页面中多个动画元素渲染较慢的情况，完全通过javascript来渲染控制动画的执行。可用于实现较复杂动画。\n\n## 5. SVG 动画\n\nSVG是一种基于XML的图像格式，非常类似于HTML的工作方式。它为许多熟悉的几何形状定义了不同的元素，这些元素可以在标记中组合以产生二维图形。\n\n同样高清的质地，矢量图不畏惧放大，体积小。\n\n这里要说明一点就是，因为 SVG 中保存的是点、线、面的信息，与分辨率和图形大小无关，只是跟图像的复杂程度有关，所以图像文件所占的存储空间通常会比 png 小。\n\nSVG动画的优势：\n\n* 优化 SEO 和无障碍的利器，因为 SVG 图像是使用XML(可扩展标记语言【英语：Extensible Markup Language，简称：XML】标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等)来标记构建的，浏览器通过绘制每个点和线来打印它们，而不是用预定义的像素填充某些空间。这确保 SVG 图像可以适应不同的屏幕大小和分辨率。\n* 由于是在 XML 中定义的，SVG 图像比 JPG 或 PNG 图像更灵活，而且我们可以使用 CSS 和 JavaScript 与它们进行交互。SVG 图像设置可以包含 CSS 和 JavaScript。在 react、vue 这种数据驱动视图的框架下，对于 SVG 操作就更加如鱼得水了。（下文会跟大家分享一些小的 SVG 动画在我们项目中的实践）\n* 在运用层面上，SVG 提供了一些图像编辑效果，比如屏蔽和剪裁、应用过滤器等等。并且 SVG 只是文本，因此可以使用 GZip 对其进行有效压缩。\n\n## 6. Jquery的`animate()`方法\n\n* `animate()` 方法执行 `CSS` 属性集的自定义动画。\n* 该方法通过 CSS 样式将元素从一个状态改变为另一个状态。\n* CSS属性值是逐渐改变的，这样就可以创建动画效果。\n* 只有数字值可创建动画（比如 \"`margin:30px`\"）。字符串值无法创建动画（比如 \"`background-color:red`\"）。\n\n**代码演示：**\n\n```html\n<button id=\"btn1\">使用动画放大高度</button>\n<button id=\"btn2\">重置高度</button>\n<div id=\"box\" style=\"background:#98bf21;height:100px;width:100px;margin:6px;\">\n</div>\n\n```\n\n```css\n$(document).ready(function(){\n    $(\"#btn1\").click(function(){\n        $(\"#box\").animate({height:\"300px\"});\n    });\n    $(\"#btn2\").click(function(){\n        $(\"#box\").animate({height:\"100px\"});\n    });\n});\n\n```\n\n**效果图：** \n\n![在这里插入图片描述](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/17/1735b47d89e475ad~tplv-t2oaga2asx-image.image)\n\n##  7. 使用`gif`图片\n\ngif图想必大家都接触过，前端使用也非常简单。\n\n## 总结：\n\n* **代码复杂度方面**简单动画：`css`代码实现会简单一些，`js`复杂一些。 复杂动画的话：`css`代码就会变得冗长，`js`实现起来更优。\n* **动画运行时，对动画的控制程度上** `js` 比较灵活，能控制动画暂停，取消，终止等`css`动画不能添加事件，只能设置固定节点进行什么样的过渡动画。\n* **兼容方面** `css` 有浏览器兼容问题`js`大多情况下是没有的。\n* **性能方面** `css`动画相对于优一些，`css` 动画通过`GUI`解析`js`动画需要经过`js`引擎代码解析，然后再进行 `GUI` 解析渲染。",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2022-05-09T14:49:29.000Z",
    "updateAt": "2024-08-10T17:06:36.000Z",
    "isCollected": false,
    "currentIndex": 597,
    "filterTotalNum": 1487,
    "prev": "0139d2e8-67c1-40f9-868e-5f277e223629",
    "next": "e34edfe5-0ce6-47f8-9de0-b8a1bfe72be0"
  },
  "post": {
    "exerciseKey": "8b516cb7-fa94-4d68-929f-d3c628d1b7a2",
    "category": "QA",
    "title": "前端实现动画有哪些方式？",
    "level": 2,
    "createAt": "2022-05-09T14:49:29+00:00",
    "updateAt": "2024-08-10T17:06:36+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}