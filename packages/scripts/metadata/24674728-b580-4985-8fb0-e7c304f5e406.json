{
  "data": {
    "id": 646,
    "exerciseKey": "24674728-b580-4985-8fb0-e7c304f5e406",
    "category": "QA",
    "renderType": "md",
    "title": "说说 git 发生冲突的场景？如何解决？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n一般情况下，出现分支的场景有如下：\n\n- 多个分支代码合并到一个分支时\n- 多个分支向同一个远端分支推送\n\n具体情况就是，多个分支修改了同一个文件（任何地方）或者多个分支修改了同一个文件的名称\n\n如果两个分支中分别修改了不同文件中的部分，是不会产生冲突，直接合并即可\n\n应用在命令中，就是`push`、`pull`、`stash`、`rebase`等命令下都有可能产生冲突情况，从本质上来讲，都是`merge`和`patch`（应用补丁）时产生冲突\n\n\n\n## 二、分析\n\n在本地主分值`master`创建一个`a.txt`文件，文件起始位置写上`master commit`，如下：\n\n ![](https://static.ecool.fun//article/8713520d-3dbf-44bc-8076-60154dcbe04a.png)\n\n然后提交到仓库：\n\n- git add a.txt\n- git commit -m 'master first commit'\n\n创建一个新的分支`featurel1`分支，并进行切换，如下：\n\n```cmd\ngit checkout -b featurel1\n```\n\n然后修改`a.txt`文件首行文字为 `featurel commit`，然后添加到暂存区，并开始进行提交到仓库：\n\n- git add a.txt\n- git commit -m 'featurel  first change'\n\n然后通过`git checkout master`切换到主分支，通过`git merge`进行合并，发现不会冲突\n\n此时`a.txt`文件的内容变成`featurel commit`，没有出现冲突情况，这是因为`git`在内部发生了快速合并\n\n> 如果当前分支的每一个提交(commit)都已经存在另一个分支里了，git 就会执行一个“快速向前”(fast forward)操作\n>\n> git 不创建任何新的提交(commit)，只是将当前分支指向合并进来的分支\n\n如果此时切换到`featurel`分支，将文件的内容修改成`featrue second commit`，然后提交到本地仓库\n\n然后切换到主分支，如果此时在`a.txt`文件再次修改，修改成`mastet second commit`，然后再次提交到本地仓库\n\n此时，`master`分支和`feature1`分支各自都分别有新的提交，变成了下图所示：\n\n ![](https://static.ecool.fun//article/86efa296-626b-45b3-9ea3-0773fab8fa51.png)\n\n这种情况下，无法执行快速合并，只能试图把各自的修改合并起来，但这种合并就可能会有冲突\n\n现在通过`git merge featurel`进行分支合并，如下所示：\n\n ![](https://static.ecool.fun//article/dd098f38-9cab-4779-be69-dc527ca69272.png)\n\n从冲突信息可以看到，`a.txt`发生冲突，必须手动解决冲突之后再提交\n\n而`git status`同样可以告知我们冲突的文件：\n\n ![](https://static.ecool.fun//article/160655f5-4fd7-499e-8f6e-a05b8b6b9c70.png)\n\n打开`a.txt`文件，可以看到如下内容：\n\n ![](https://static.ecool.fun//article/bbaa45f2-fa9b-459b-9d89-7762c3b5b65d.png)\n\n`git`用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的内容：\n\n- <<<<<<< 和 ======= 之间的区域就是当前更改的内容\n- ======= 和 >>>>>>> 之间的区域就是传入进来更改的内容\n\n现在要做的事情就是将冲突的内容进行更改，对每个文件使用 `git add` 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，`Git `就会将它们标记为冲突已解决然后再提交：\n\n- git add a.txt\n- git commit -m \"conflict fixed\"\n\n此时`master`分支和`feature1`分支变成了下图所示：\n\n ![](https://static.ecool.fun//article/5b347556-94ef-4d0b-81a9-dfb4cb853f54.png)\n\n使用`git log`命令可以看到合并的信息：\n\n ![](https://static.ecool.fun//article/9bcad801-ec00-49a9-80da-360ec1b54e57.png)\n\n\n\n\n\n## 三、总结\n\n当`Git`无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成\n\n解决冲突就是把`Git`合并失败的文件手动编辑为我们希望的内容，再提交\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T03:40:58.000Z",
    "updateAt": "2024-01-25T19:23:33.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 69,
    "prev": "e3f8c4ad-de53-4f97-9ec1-54b65c787569",
    "next": "cfe8f03e-1a05-4c00-baa7-04ae08c8765c"
  },
  "post": {
    "exerciseKey": "24674728-b580-4985-8fb0-e7c304f5e406",
    "category": "QA",
    "title": "说说 git 发生冲突的场景？如何解决？",
    "level": 3,
    "updateAt": "2024-01-25T19:23:33+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 30
  }
}
