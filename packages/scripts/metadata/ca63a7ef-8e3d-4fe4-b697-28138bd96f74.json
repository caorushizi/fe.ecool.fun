{
  "data": {
    "id": 255,
    "exerciseKey": "ca63a7ef-8e3d-4fe4-b697-28138bd96f74",
    "category": "QA",
    "renderType": "md",
    "title": "Vue3.0的设计目标是什么？做了哪些优化?",
    "desc": null,
    "options": null,
    "explanation": "## 一、设计目标\n\n不以解决实际业务痛点的更新都是耍流氓，下面我们来列举一下`Vue3`之前我们或许会面临的问题\n\n- 随着功能的增长，复杂组件的代码变得越来越难以维护\n\n- 缺少一种比较「干净」的在多个组件之间提取和复用逻辑的机制\n\n- 类型推断不够友好\n\n- `bundle`的时间太久了\n\n而 `Vue3` 经过长达两三年时间的筹备，做了哪些事情？\n\n我们从结果反推\n\n- 更小\n- 更快\n- TypeScript支持\n- API设计一致性\n- 提高自身可维护性\n- 开放更多底层功能\n\n一句话概述，就是更小更快更友好了\n\n\n### 更小\n\n`Vue3`移除一些不常用的 `API`\n\n引入`tree-shaking`，可以将无用模块“剪辑”，仅打包需要的，使打包的整体体积变小了\n\n\n\n### 更快\n\n主要体现在编译方面：\n\n- diff算法优化\n- 静态提升\n- 事件监听缓存\n- SSR优化\n\n下篇文章我们会进一步介绍\n\n\n\n### 更友好\n\n`vue3`在兼顾`vue2`的`options API`的同时还推出了`composition API`，大大增加了代码的逻辑组织和代码复用能力\n\n这里代码简单演示下：\n\n存在一个获取鼠标位置的函数\n\n```js\nimport { toRefs, reactive } from 'vue';\nfunction useMouse(){\n    const state = reactive({x:0,y:0});\n    const update = e=>{\n        state.x = e.pageX;\n        state.y = e.pageY;\n    }\n    onMounted(()=>{\n        window.addEventListener('mousemove',update);\n    })\n    onUnmounted(()=>{\n        window.removeEventListener('mousemove',update);\n    })\n\n    return toRefs(state);\n}\n```\n\n我们只需要调用这个函数，即可获取`x`、`y`的坐标，完全不用关注实现过程\n\n试想一下，如果很多类似的第三方库，我们只需要调用即可，不必关注实现过程，开发效率大大提高\n\n同时，`VUE3`是基于`typescipt`编写的，可以享受到自动的类型定义提示\n\n\n\n## 三、优化方案\n\n`vue3`从很多层面都做了优化，可以分成三个方面：\n\n- 源码\n- 性能\n- 语法 API\n\n\n\n### 源码\n\n源码可以从两个层面展开：\n\n- 源码管理\n- TypeScript\n\n\n\n#### 源码管理\n\n`vue3`整个源码是通过 `monorepo `的方式维护的，根据功能将不同的模块拆分到`packages `目录下面不同的子目录中\n\n ![](https://static.ecool.fun//article/aeff110f-4dd5-4bf0-aaf4-4ad74f6a53ab.png)\n\n这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系也更加明确，开发人员也更容易阅读、理解和更改所有模块源码，提高代码的可维护性\n\n另外一些 `package`（比如 `reactivity` 响应式库）是可以独立于 `Vue` 使用的，这样用户如果只想使用 `Vue3 `的响应式能力，可以单独依赖这个响应式库而不用去依赖整个 `Vue`\n\n\n\n#### TypeScript\n\n`Vue3`是基于`typeScript`编写的，提供了更好的类型检查，能支持复杂的类型推导\n\n\n\n### 性能\n\n`vue3`是从什么哪些方面对性能进行进一步优化呢？\n\n- 体积优化\n- 编译优化\n- 数据劫持优化\n\n这里讲述数据劫持：\n\n在`vue2`中，数据劫持是通过`Object.defineProperty `，这个 API 有一些缺陷，并不能检测对象属性的添加和删除\n\n```js\nObject.defineProperty(data, 'a',{\n  get(){\n    // track\n  },\n  set(){\n    // trigger\n  }\n})\n```\n\n尽管` Vue`为了解决这个问题提供了 `set `和`delete `实例方法，但是对于用户来说，还是增加了一定的心智负担\n\n同时在面对嵌套层级比较深的情况下，就存在性能问题\n\n```js\ndefault {\n  data: {\n    a: {\n      b: {\n          c: {\n          d: 1\n        }\n      }\n    }\n  }\n}\n```\n\n相比之下，`vue3`是通过`proxy`监听整个对象，那么对于删除还是监听当然也能监听到\n\n同时`Proxy ` 并不能监听到内部深层次的对象变化，而 `Vue3` 的处理方式是在` getter` 中去递归响应式，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归\n\n\n\n### 语法 API\n\n这里当然说的就是`composition API`，其两大显著的优化：\n\n- 优化逻辑组织\n- 优化逻辑复用\n\n\n\n#### 逻辑组织\n\n一张图，我们可以很直观地感受到 `Composition API `在逻辑组织方面的优势\n\n ![](https://static.ecool.fun//article/37d16502-5b20-4059-a321-09ac1201cd70.png)\n\n\n\n相同功能的代码编写在一块，而不像`options API`那样，各个功能的代码混成一块\n\n\n\n#### 逻辑复用\n\n在`vue2`中，我们是通过`mixin`实现功能混合，如果多个`mixin`混合，会存在两个非常明显的问题：命名冲突和数据来源不清晰\n\n而通过`composition`这种形式，可以将一些复用的代码抽离出来作为一个函数，只要的使用的地方直接进行调用即可\n\n同样是上文的获取鼠标位置的例子\n\n```js\nimport { toRefs, reactive, onUnmounted, onMounted } from 'vue';\nfunction useMouse(){\n    const state = reactive({x:0,y:0});\n    const update = e=>{\n        state.x = e.pageX;\n        state.y = e.pageY;\n    }\n    onMounted(()=>{\n        window.addEventListener('mousemove',update);\n    })\n    onUnmounted(()=>{\n        window.removeEventListener('mousemove',update);\n    })\n\n    return toRefs(state);\n}\n```\n\n组件使用\n\n```js\nimport useMousePosition from './mouse'\nexport default {\n    setup() {\n        const { x, y } = useMousePosition()\n        return { x, y }\n    }\n}\n```\n\n可以看到，整个数据来源清晰了，即使去编写更多的` hook `函数，也不会出现命名冲突的问题\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:53:13.000Z",
    "updateAt": "2024-01-25T17:38:13.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 120,
    "prev": "9f19f171-7071-42e6-82d5-35b19bd83928",
    "next": "0cc5abe2-7798-40a6-b930-7dacdb404b8d"
  },
  "post": {
    "exerciseKey": "ca63a7ef-8e3d-4fe4-b697-28138bd96f74",
    "category": "QA",
    "title": "Vue3.0的设计目标是什么？做了哪些优化?",
    "level": 3,
    "updateAt": "2024-01-25T17:38:13+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
