{
  "data": {
    "id": 1695,
    "exerciseKey": "56e56a05-99c7-4701-ae72-e06d2c6a4d42",
    "category": "QA",
    "renderType": "md",
    "title": "前端怎么实现跨域请求？",
    "desc": null,
    "options": null,
    "explanation": "## 什么是跨域？\n\n### 1.什么是同源策略及其限制内容？\n\n同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。\n\n同源策略限制内容有：\n\n* Cookie、LocalStorage、IndexedDB 等存储性内容\n* DOM 节点\n* AJAX 请求发送后，结果被浏览器拦截了\n\n但是有三个标签是允许跨域加载资源：\n\n* `<img src=XXX>`\n* `<link href=XXX>`\n* `<script src=XXX>`\n\n### 2.常见跨域场景\n\n当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。\n\n特别说明两点：\n\n* 第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。\n* 第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。\n\n跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。\n\n## 跨域有哪些方案？\n\n这里只介绍几种开发中用的比较多的，几乎用不到的比如：\n\n- document.domain + iframe：适用主域名相同，子域名不同的跨域场景\n- window.name + iframe：利用name值最长可以 2M ，并用不同页面或不同域名加载后依然存在的特性\n- location.hash + iframe：适用通过 C 页面来实现 A 页面与 B 页面通信的场景\n\n就不过多展开了\n\n### 1. **CORS**\n\nCORS 通信过程都是浏览器自动完成，需要浏览器(都支持)和服务器都支持，所以关键在**只要服务器支持，就可以跨域通信**，CORS请求分两类，`简单请求`和`非简单请求`\n\n另外CORS请求**默认不包含Cookie以及HTTP认证信息**，如果需要包含Cookie，需要满足几个条件：\n- 服务器指定了 `Access-Control-Allow-Credentials: true`\n- 开发者须在请求中打开withCredentials属性: `xhr.withCredentials = true`\n- `Access-Control-Allow-Origin不要设为星号`，指定明确的与请求网页一致的域名，这样就不会把其他域名的Cookie上传\n\n#### 简单请求\n\n需要同时满足两个条件，就属于简单请求：\n\n- 请求方法是：`HEAD`、`GET`、`POST`，三者之一\n- 请求头信息不超过以下几个字段：\n    - Accept\n    - Accept-Language\n    - Content-Language\n    - Last-Event-Id\n    - Content-Type：值为三者之一application/x-www/form/urlencoded、multipart/form-data、text/plain\n\n需要这些条件是为了兼容表单，因为历史上表单一直可以跨域\n\n浏览器直接发出CORS请求，具体来说就是在头信息中增加Origin字段，表示请求来源来自哪个域(协议+域名+端口)，服务器根据这个值决定是否同意请求。如果同意，返回的响应会多出以下响应头信息\n\n```js\nAccess-Control-Allow-Origin: http://juejin.com // 和 Orign 一致  这个字段是必须的\nAccess-Control-Allow-Credentials: true // 表示是否允许发送 Cookie  这个字段是可选的\nAccess-Control-Expose-Headers: FooBar // 指定返回其他字段的值   这个字段是可选的\nContent-Type: text/html; charset=utf-8 // 表示文档类型\n```\n\n在简单请求中服务器至少需要设置：`Access-Control-Allow-Origin` 字段\n\n#### 非简单请求\n\n比如 PUT 或 DELETE 请求，或 Content-Type 为 application/json ，就是非简单请求。\n\n非简单 CORS 请求，**正式请求前会发一次 OPTIONS 类型的查询请求**，称为`预检请求`，询问服务器是否支持网页所在域名的请求，以及可以使用哪些头信息字段。只有收到肯定的答复，才会发起正式XMLHttpRequest请求，否则报错\n\n预检请求的方法是OPTIONS，它的头信息中有几个字段\n\n- Origin: 表示请求来自哪个域，这个字段是必须的\n- Access-Control-Request-Method：列出CORS请求会用到哪些HTTP方法，这个字段是必须的\n- Access-Control-Request-Headers： 指定CORS请求会额外发送的头信息字段，用逗号隔开\n\nOPTIONS请求次数过多也会损耗性能，所以要尽量减少OPTIONS请求，可以让服务器在请求返回头部添加\n```js\nAccess-Control-Max-Age: Number // 数字 单位是秒\n```\n表示预检请求的返回结果可以被缓存多久，在这个时间范围内再请求就不需要预检了。不过这个缓存只对完全一样的URL才会生效\n\n### 2. Nginx代理跨域\n\n配置一个代理服务器向服务器请求，再将数据返回给客户端，实质和CORS跨域原理一样，需要配置请求响应头Access-Control-Allow-Origin等字段\n\n```js\nserver { \n    listen 81; server_name www.domain1.com; \n    location / { \n        proxy_pass http://xxxx1:8080; // 反向代理 \n        proxy_cookie_domain www.xxxx1.com www.xxxx2.com; // 修改cookie里域名 \n        index index.html index.htm; \n        // 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用 \n        add_header Access-Control-Allow-Origin http://www.xxxx2.com; // 当前端只跨域不带cookie时，可为* \n        add_header Access-Control-Allow-Credentials true; \n    } \n}\n```\n\n### 3. Node中间件代理跨域\n\n在 Vue 中 vue.config.js 中配置\n```js\nmodule.export = {\n    ...\n    devServer: {\n        proxy: {\n            [ process.env.VUE_APP_BASE_API ]: {\n                target: \\'http://xxxx\\',//代理跨域目标接口\n                ws: true,\n                changeOrigin: true,\n                pathRewrite: {\n                    [ \\'^\\' + process.env.VUE_APP_BASE_API ] : \\'\\'\n                }\n            }\n        }\n    }\n}\n```\nNode + express\n```js\nconst express = require(\\'express\\')\nconst proxy = require(\\'http-proxy-middleware\\')\nconst app = express()\napp.use(\\'/\\', proxy({ \n    // 代理跨域目标接口 \n    target: \\'http://xxxx:8080\\', \n    changeOrigin: true, \n    // 修改响应头信息，实现跨域并允许带cookie \n    onProxyRes: function(proxyRes, req, res) { \n        res.header(\\'Access-Control-Allow-Origin\\', \\'http://xxxx\\')\n        res.header(\\'Access-Control-Allow-Credentials\\', \\'true\\')\n    }, \n    // 修改响应信息中的cookie域名 \n    cookieDomainRewrite: \\'www.domain1.com\\' // 可以为false，表示不修改\n})); \napp.listen(3000); \n```\n\n### 4. WebSocket\n\nWebSocket是HTML5标准中的一种通信协议，以`ws://`(非加密)和`wss://`(加密)作为协议前缀，该协议不实行同源政策，只要服务器支持就行\n\n因为WebSocket请求头信息中有Origin字段，表示请求源来自哪个域，服务器可以根据这个字段判断是否允许本次通信，如果在白名单内，就可以通信\n\n### 5. postMessage\n\npostMessage是HTML5标准中的API，它可以给我们解决如下问题：\n\n- 页面和新打开的窗口间数据传递\n- 多窗口之间数据传递\n- 页面与嵌套的 iframe 之间数据传递\n- 上面三个场景之间的`跨域传递`\n\npostMessage 接受两个参数，用法如下：\n- **参数一**：发送的数据\n- **参数二**：你要发送给谁就写谁的地址`(协议 + 域名 +端口`)，也可以设置为`*`，表示任意窗口，为`/`表示与当前窗口同源的窗口\n\n### 6. JSONP\n\n原理就是通过添加一个&lt;script&gt;标签，向服务器请求JSON数据，这样不受同源政策限制。服务器收到请求后，将数据放在一个callback回调函数中传回来。比如axios。\n\n不过`只支持GET请求`且`不安全`，**可能遇到XSS攻击，不过它的好处是可以向老浏览器或不支持CORS的网站请求数据**\n\n```js\n    let script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = 'http://juejin.com/xxx?callback=handleCallback'\n    document.body.appendChild(script)\n    \n    function handleCallback(res){\n        console.log(res)\n    }\n```\n服务器返回并立即执行\n```js\nhandleCallback({ code: 200, msg: 'success', data: [] })\n```\n\n## 跨域时 Cookie 要做何处理？\n\n指的就是对第三方使用 Cookie 的设置，在 Cookie 信息中添加 `SameSite` 属性\n\n```js\nSet-Cookie: widget_session=123456; SameSite=None; Secure\n```\n\nSameSite 有三个值：\n- `strict`：严格模式，完全禁止使用Cookie\n- `lax`：宽松模式，允许部分情况使用Cookie，`跨域的都行`，a标签跳转，link标签，GET提交的表单\n- `none`：任何情况下都会发送Cookie，但必须同时设置Secure属性，意思是需要安全上下文，Cookie `只能通过https发送`，否则无效\n  \nChrome 80之前默认值是none，之后是lax\n\n不过在最新的 `Chrome91` 版本中这个`已经被移除`了，所以在 91之前的版本依然可以使用\n\n如果 Chrome 或 Edge 版本大于91小于94的话，可以通过[Chromium支持的command-line flag](https://peter.sh/experiments/chromium-command-line-switches/)\n\n- 右键 Chrome 或 Edge 浏览器，选择属性\n- 在目标(Target)属性末尾加上\n\n```js\n --disable-features=SameSiteByDefaultCookies,CookiesWithoutSameSiteMustBeSecure\n```\n\n并且官方说的到 94 版本会连 comman-line 也会移除\n\n官方的说法是任由开发者控制这两个选项，容易被攻击",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-03-15T15:50:15.000Z",
    "updateAt": "2023-02-21T08:58:23.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 446,
    "prev": "8313f0e7-db8e-4ecd-bf57-099dca7656fb",
    "next": "d27c3517-ab5a-49f5-91e9-fd973eb1cd11"
  },
  "post": {
    "exerciseKey": "56e56a05-99c7-4701-ae72-e06d2c6a4d42",
    "category": "QA",
    "title": "前端怎么实现跨域请求？",
    "level": 3,
    "updateAt": "2023-02-21T08:58:23+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}