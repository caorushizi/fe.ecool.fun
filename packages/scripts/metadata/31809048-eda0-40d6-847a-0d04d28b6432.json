{
  "data": {
    "id": 402,
    "exerciseKey": "31809048-eda0-40d6-847a-0d04d28b6432",
    "category": "QA",
    "renderType": "md",
    "title": "请说说cookie与session有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "* 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session。\n\n典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。\n\n在服务端保存Session的方法很多，内存、数据库、文件都有。\n\n集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n\n* 思考一下服务端如何识别特定的客户？\n\n这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。\n\n有人问，如果客户端的浏览器禁用了 Cookie 怎么办？\n\n一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n\n* Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？\n\n这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。\n\n这也是Cookie名称的由来，给用户的一点甜头。\n\n所以，**总结一下**：\n\n* Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；\n* Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-06T13:53:28.000Z",
    "updateAt": "2021-07-07T00:12:21.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 945,
    "prev": "73f7c98b-68fd-455b-bc85-e94e1aa20ac1",
    "next": "f1e6c221-11b8-4e5d-8e8b-f4c70d698291"
  },
  "post": {
    "exerciseKey": "31809048-eda0-40d6-847a-0d04d28b6432",
    "category": "QA",
    "title": "请说说cookie与session有什么区别？",
    "level": 1,
    "updateAt": "2021-07-07T00:12:21+00:00"
  },
  "tag": {
    "id": 16,
    "tagName": "计算机网络",
    "type": "1",
    "exerciseCount": 72
  }
}