{
  "data": {
    "id": 258,
    "exerciseKey": "3707a3b3-2330-4833-9c9b-b427887f8ee9",
    "category": "QA",
    "renderType": "md",
    "title": "Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？",
    "desc": null,
    "options": null,
    "explanation": "## 开始之前\n`Composition API` 可以说是`Vue3`的最大特点，那么为什么要推出`Composition Api`，解决了什么问题？\n\n通常使用`Vue2`开发的项目，普遍会存在以下问题：\n\n- 代码的可读性随着组件变大而变差\n- 每一种代码复用的方式，都存在缺点\n- TypeScript支持有限\n\n以上通过使用`Composition Api`都能迎刃而解\n\n## 正文\n### 一、Options Api\n\n`Options API`，即大家常说的选项API，即以`vue`为后缀的文件，通过定义`methods`，`computed`，`watch`，`data`等属性与方法，共同处理页面逻辑\n\n如下图：\n\n ![](https://static.ecool.fun//article/0d90d923-095d-4458-bef6-a004d604e541.png)\n\n可以看到`Options`代码编写方式，如果是组件状态，则写在`data`属性上，如果是方法，则写在`methods`属性上...\n\n用组件的选项 (`data`、`computed`、`methods`、`watch`) 组织逻辑在大多数情况下都有效\n\n然而，当组件变得复杂，导致对应属性的列表也会增长，这可能会导致组件难以阅读和理解\n\n\n### 二、Composition Api \n\n在 Vue3 Composition API 中，组件根据逻辑功能来组织的，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合）\n\n即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API\n\n\n ![](https://static.ecool.fun//article/5262c66c-648b-475e-b31e-8e114ff3ce6f.png)\n\n\n\n### 三、对比\n\n下面对`Composition Api `与`Options Api`进行两大方面的比较\n\n- 逻辑组织\n- 逻辑复用\n\n\n\n#### 逻辑组织\n\n##### Options API\n\n假设一个组件是一个大型组件，其内部有很多处理逻辑关注点（对应下图不用颜色）\n\n ![](https://static.ecool.fun//article/870e1f09-36ad-4ad9-9045-d2d3d453f8c8.png)\n\n\n\n可以看到，这种碎片化使得理解和维护复杂组件变得困难\n\n选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块\n\n\n\n##### Compostion API\n\n而`Compositon API`正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去\n\n下面举个简单例子，将处理`count`属性相关的代码放在同一个函数了\n\n```js\nfunction useCount() {\n    let count = ref(10);\n    let double = computed(() => {\n        return count.value * 2;\n    });\n\n    const handleConut = () => {\n        count.value = count.value * 2;\n    };\n\n    console.log(count);\n\n    return {\n        count,\n        double,\n        handleConut,\n    };\n}\n```\n\n组件上中使用`count`\n\n```js\nexport default defineComponent({\n    setup() {\n        const { count, double, handleConut } = useCount();\n        return {\n            count,\n            double,\n            handleConut\n        }\n    },\n});\n```\n\n再来一张图进行对比，可以很直观地感受到 `Composition API `在逻辑组织方面的优势，以后修改一个属性功能的时候，只需要跳到控制该属性的方法中即可\n\n![](https://static.ecool.fun//article/5f280222-fe00-4cda-8f88-32528e7c4d91.png)\n\n\n\n\n\n#### 逻辑复用\n\n在`Vue2`中，我们是用过`mixin`去复用相同的逻辑\n\n下面举个例子，我们会另起一个`mixin.js`文件\n\n```js\nexport const MoveMixin = {\n  data() {\n    return {\n      x: 0,\n      y: 0,\n    };\n  },\n\n  methods: {\n    handleKeyup(e) {\n      console.log(e.code);\n      // 上下左右 x y\n      switch (e.code) {\n        case \"ArrowUp\":\n          this.y--;\n          break;\n        case \"ArrowDown\":\n          this.y++;\n          break;\n        case \"ArrowLeft\":\n          this.x--;\n          break;\n        case \"ArrowRight\":\n          this.x++;\n          break;\n      }\n    },\n  },\n\n  mounted() {\n    window.addEventListener(\"keyup\", this.handleKeyup);\n  },\n\n  unmounted() {\n    window.removeEventListener(\"keyup\", this.handleKeyup);\n  },\n};\n\n```\n\n然后在组件中使用\n\n```js\n<template>\n  <div>\n    Mouse position: x {{ x }} / y {{ y }}\n  </div>\n</template>\n<script>\nimport mousePositionMixin from './mouse'\nexport default {\n  mixins: [mousePositionMixin]\n}\n</script>\n```\n\n使用单个` mixin `似乎问题不大，但是当我们一个组件混入大量不同的 `mixins` 的时候\n\n```js\nmixins: [mousePositionMixin, fooMixin, barMixin, otherMixin]\n```\n\n会存在两个非常明显的问题：\n\n- 命名冲突\n- 数据来源不清晰\n\n\n现在通过`Compositon API`这种方式改写上面的代码\n\n```js\nimport { onMounted, onUnmounted, reactive } from \"vue\";\nexport function useMove() {\n  const position = reactive({\n    x: 0,\n    y: 0,\n  });\n\n  const handleKeyup = (e) => {\n    console.log(e.code);\n    // 上下左右 x y\n    switch (e.code) {\n      case \"ArrowUp\":\n        // y.value--;\n        position.y--;\n        break;\n      case \"ArrowDown\":\n        // y.value++;\n        position.y++;\n        break;\n      case \"ArrowLeft\":\n        // x.value--;\n        position.x--;\n        break;\n      case \"ArrowRight\":\n        // x.value++;\n        position.x++;\n        break;\n    }\n  };\n\n  onMounted(() => {\n    window.addEventListener(\"keyup\", handleKeyup);\n  });\n\n  onUnmounted(() => {\n    window.removeEventListener(\"keyup\", handleKeyup);\n  });\n\n  return { position };\n}\n```\n\n在组件中使用\n\n```js\n<template>\n  <div>\n    Mouse position: x {{ x }} / y {{ y }}\n  </div>\n</template>\n\n<script>\nimport { useMove } from \"./useMove\";\nimport { toRefs } from \"vue\";\nexport default {\n  setup() {\n    const { position } = useMove();\n    const { x, y } = toRefs(position);\n    return {\n      x,\n      y,\n    };\n\n  },\n};\n</script>\n```\n\n可以看到，整个数据来源清晰了，即使去编写更多的 hook 函数，也不会出现命名冲突的问题\n\n\n### 小结\n\n- 在逻辑组织和逻辑复用方面，`Composition API`是优于`Options  API`\n- 因为`Composition API`几乎是函数，会有更好的类型推断。\n- `Composition API `对 `tree-shaking` 友好，代码也更容易压缩\n- `Composition API`中见不到`this`的使用，减少了`this`指向不明的情况\n- 如果是小型组件，可以继续使用`Options API`，也是十分友好的",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:54:22.000Z",
    "updateAt": "2024-01-25T17:39:09.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 118,
    "prev": "c1ee1a9b-5955-4dc1-a89d-2ce7b017616a",
    "next": "9f19f171-7071-42e6-82d5-35b19bd83928"
  },
  "post": {
    "exerciseKey": "3707a3b3-2330-4833-9c9b-b427887f8ee9",
    "category": "QA",
    "title": "Vue3.0 所采用的 Composition Api 与 Vue2.x 使用的 Options Api 有什么不同？",
    "level": 3,
    "updateAt": "2024-01-25T17:39:09+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
