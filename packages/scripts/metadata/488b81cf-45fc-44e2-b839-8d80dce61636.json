{
  "data": {
    "id": 1788,
    "exerciseKey": "488b81cf-45fc-44e2-b839-8d80dce61636",
    "category": "QA",
    "renderType": "md",
    "title": "搜索二维矩阵",
    "desc": "编写一个高效的算法来判断 `m x n` 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n\n* 每行中的整数从左到右按升序排列。\n* 每行的第一个整数大于前一行的最后一个整数。\n\n**示例 1：**\n\n![](https://pic.rmb.bdstatic.com/bjh/b55182231d6c4c2a26069ba9b80483ad.png) \n\n\n**输入：** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n\n**输出：** true\n\n**示例 2：**\n\n![](https://pic.rmb.bdstatic.com/bjh/c17493cc0065ece0f4fd02fbea646eee.png) \n\n**输入：** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n\n**输出：** false\n\n**提示：**\n\n* `m == matrix.length`\n* `n == matrix[i].length`\n* `1 <= m, n <= 100`\n* `-104 <= matrix[i][j], target <= 104`\n\n```js\n/**\n * @param {number[][]} matrix\n * @param {number} target\n * @return {boolean}\n */\nvar searchMatrix = function(matrix, target) {\n\n};\n```",
    "options": null,
    "explanation": " ## 方法一：两次二分查找\n\n**思路**\n\n由于每行的第一个元素大于前一行的最后一个元素，且每行元素是升序的，所以每行的第一个元素大于前一行的第一个元素，因此矩阵第一列的元素是升序的。\n\n我们可以对矩阵的第一列的元素二分查找，找到最后一个不大于目标值的元素，然后在该元素所在行中二分查找目标值是否存在。\n\n**代码**\n\n```JavaScript\nvar searchMatrix = function(matrix, target) {\n    const rowIndex = binarySearchFirstColumn(matrix, target);\n    if (rowIndex < 0) {\n        return false;\n    }\n    return binarySearchRow(matrix[rowIndex], target);\n};\n\nconst binarySearchFirstColumn = (matrix, target) => {\n    let low = -1, high = matrix.length - 1;\n    while (low < high) {\n        const mid = Math.floor((high - low + 1) / 2) + low;\n        if (matrix[mid][0] <= target) {\n            low = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst binarySearchRow = (row, target) => {\n    let low = 0, high = row.length - 1;\n    while (low <= high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (row[mid] == target) {\n            return true;\n        } else if (row[mid] > target) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(log m + log n)=O(log mn)，其中 m 和 n 分别是矩阵的行数和列数。\n\n- 空间复杂度：O(1)。\n\n## 方法二：一次二分查找\n\n**思路**\n\n若将矩阵每一行拼接在上一行的末尾，则会得到一个升序数组，我们可以在该数组上二分找到目标元素。\n\n代码实现时，可以二分升序数组的下标，将其映射到原矩阵的行和列上。\n\n**代码**\n\n\n```JavaScript\nvar searchMatrix = function(matrix, target) {\n    const m = matrix.length, n = matrix[0].length;\n    let low = 0, high = m * n - 1;\n    while (low <= high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        const x = matrix[Math.floor(mid / n)][mid % n];\n        if (x < target) {\n            low = mid + 1;\n        } else if (x > target) {\n            high = mid - 1;\n        } else {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(log mn)，其中 m 和 n 分别是矩阵的行数和列数。\n\n- 空间复杂度：O(1)。\n\n## 结语\n\n两种方法殊途同归，都利用了二分查找，在二维矩阵上寻找目标值。值得注意的是，若二维数组中的一维数组的元素个数不一，方法二将会失效，而方法一则能正确处理。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-06T14:18:16.000Z",
    "updateAt": "2022-05-06T22:22:05.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 552,
    "prev": "ed616567-30f4-45d4-b910-04bd4a92f53e",
    "next": "75ec49d8-f7a0-44e4-a16a-27f404a83d14"
  },
  "post": {
    "exerciseKey": "488b81cf-45fc-44e2-b839-8d80dce61636",
    "category": "QA",
    "title": "搜索二维矩阵",
    "level": 3,
    "updateAt": "2022-05-06T22:22:05+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}
