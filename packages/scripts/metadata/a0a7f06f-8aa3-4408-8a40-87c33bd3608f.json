{
  "data": {
    "id": 2774,
    "exerciseKey": "a0a7f06f-8aa3-4408-8a40-87c33bd3608f",
    "category": "QA",
    "renderType": "md",
    "title": "promise.race、promise.all、promise.allSettled 有哪些区别？",
    "desc": "",
    "options": "",
    "explanation": "`Promise.race`、`Promise.all` 和 `Promise.allSettled` 都是处理多个 `Promise` 对象的静态方法，它们的主要区别在于处理 `Promise` 的方式和返回结果。下面是这三者的详细比较：\n\n### **1. `Promise.all`**\n\n- **功能**：接受一个 `Promise` 对象的可迭代对象（通常是数组），并返回一个新的 `Promise` 对象。这个新的 `Promise` 对象在所有输入的 `Promise` 对象都成功时成功，并返回一个包含所有成功 `Promise` 结果的数组。如果其中任何一个 `Promise` 失败，则立即失败，并返回第一个失败的 `Promise` 的拒绝理由。\n  \n- **返回值**：一个 `Promise` 对象。成功时，返回一个数组，其中包含每个输入 `Promise` 对象的结果；失败时，返回第一个失败的 `Promise` 的拒绝原因。\n\n- **使用示例**：\n  ```javascript\n  Promise.all([\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3)\n  ]).then(results => {\n    console.log(results); // [1, 2, 3]\n  }).catch(error => {\n    console.error(error);\n  });\n  ```\n\n### **2. `Promise.race`**\n\n- **功能**：接受一个 `Promise` 对象的可迭代对象（通常是数组），并返回一个新的 `Promise` 对象。这个新的 `Promise` 对象将会在第一个输入的 `Promise` 对象解决或拒绝时解决或拒绝，而不管其他 `Promise` 对象的状态。\n\n- **返回值**：一个 `Promise` 对象。它的状态由第一个解决或拒绝的 `Promise` 决定。\n\n- **使用示例**：\n  ```javascript\n  Promise.race([\n    new Promise((resolve) => setTimeout(resolve, 500, 'first')),\n    new Promise((resolve) => setTimeout(resolve, 100, 'second'))\n  ]).then(result => {\n    console.log(result); // 'second' (因为它首先解决)\n  });\n  ```\n\n### **3. `Promise.allSettled`**\n\n- **功能**：接受一个 `Promise` 对象的可迭代对象（通常是数组），并返回一个新的 `Promise` 对象。这个新的 `Promise` 对象在所有输入的 `Promise` 对象都完成时解决（无论成功还是失败），并返回一个数组，其中每个元素是一个对象，描述了对应 `Promise` 对象的结果或拒绝原因。\n\n- **返回值**：一个 `Promise` 对象。成功时，返回一个包含每个输入 `Promise` 对象的结果的数组，每个结果对象有两个属性：`status`（\"fulfilled\" 或 \"rejected\"）和 `value`（如果成功）或 `reason`（如果失败）。\n\n- **使用示例**：\n  ```javascript\n  Promise.allSettled([\n    Promise.resolve(1),\n    Promise.reject(new Error('Failed')),\n    Promise.resolve(3)\n  ]).then(results => {\n    console.log(results);\n    /*\n    [\n      { status: 'fulfilled', value: 1 },\n      { status: 'rejected', reason: Error('Failed') },\n      { status: 'fulfilled', value: 3 }\n    ]\n    */\n  });\n  ```",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:41.000Z",
    "updateAt": "2024-08-14T20:02:13.000Z",
    "isCollected": false,
    "currentIndex": 54,
    "filterTotalNum": 1487,
    "prev": "3a3fd346-b19c-4c3c-bda9-573795286c36",
    "next": "13146206-837d-4eb6-9d47-c7152c4dae46"
  },
  "post": {
    "exerciseKey": "a0a7f06f-8aa3-4408-8a40-87c33bd3608f",
    "category": "QA",
    "title": "promise.race、promise.all、promise.allSettled 有哪些区别？",
    "level": 2,
    "createAt": "2024-08-13T08:30:41+00:00",
    "updateAt": "2024-08-14T20:02:13+00:00"
  },
  "tag": {
    "id": 24,
    "tagName": "ES6",
    "type": "1",
    "exerciseCount": 40
  }
}