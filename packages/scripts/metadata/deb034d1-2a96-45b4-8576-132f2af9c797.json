{
  "data": {
    "id": 1804,
    "exerciseKey": "deb034d1-2a96-45b4-8576-132f2af9c797",
    "category": "QA",
    "renderType": "md",
    "title": "async/await 怎么进行错误处理？\n",
    "desc": null,
    "options": null,
    "explanation": "一般情况下 async/await 在错误处理方面，主要使用 try/catch，像这样\n\n```js\nconst fetchData = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('fetch data is me')\n        }, 1000)\n    })\n}\n\n(async () => {\n    try {\n        const data = await fetchData()\n        console.log('data is ->', data)\n    } catch(err) {\n        console.log('err is ->', err)\n    }\n})()\n\n```\n\n这么看，感觉倒是没什么问题，如果是这样呢？有多个异步操作，需要对每个异步返回的 error 错误状态进行不同的处理，以下是示例代码\n\n```js\nconst fetchDataA = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('fetch data is A')\n        }, 1000)\n    })\n}\n\nconst fetchDataB = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('fetch data is B')\n        }, 1000)\n    })\n}\n\nconst fetchDataC = () => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve('fetch data is C')\n        }, 1000)\n    })\n}\n\n(async () => {\n    try {\n        const dataA = await fetchDataA()\n        console.log('dataA is ->', dataA)\n    } catch(err) {\n        console.log('err is ->', err)\n    }\n\n    try {\n        const dataB = await fetchDataB()\n        console.log('dataB is ->', dataB)\n    } catch(err) {\n        console.log('err is ->', err)\n    }\n\n    try {\n        const dataC = await fetchDataC()\n        console.log('dataC is ->', dataC)\n    } catch(err) {\n        console.log('err is ->', err)\n    }\n})()\n\n```\n\n这样写代码里充斥着 try/catch，有代码洁癖的你能忍受的了吗？这时可能会想到只用一个 try/catch。\n\n```js\n// ... 这里 fetch 函数省略\n\n(async () => {\n    try {\n        const dataA = await fetchDataA()\n        console.log('dataA is ->', dataA)\n        const dataB = await fetchDataB()\n        console.log('dataB is ->', dataB)\n        const dataC = await fetchDataC()\n        console.log('dataC is ->', dataC)\n    } catch(err) {\n        console.log('err is ->', err)\n        // 难道要定义 err 类型，然后判断吗？？\n        /**\n         * if (err.type === 'dataA') {\n         *  console.log('dataA err is', err)\n         * }\n         * ......\n         * */\n    }\n})()\n\n```\n\n如果是这样写只会增加编码的复杂度，而且要多写代码，这个时候就应该想想怎么优雅的解决，async/await 本质就是 promise 的语法糖，既然是 promise 那么就可以使用 then 函数了\n\n```js\n(async () => {\n    const fetchData = () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve('fetch data is me')\n            }, 1000)\n        })\n    }\n\n    const data = await fetchData().then(data => data ).catch(err => err)\n    console.log(data)\n})()\n\n```\n\n在上面写法中，如果 fetchData 返回 resolve 正确结果时，data 是我们要的结果，如果是 reject 了，发生错误了，那么 data 是错误结果，这显然是行不通的，再对其完善。\n\n```js\n(async () => {\n    const fetchData = () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve('fetch data is me')\n            }, 1000)\n        })\n    }\n\n    const [err, data] = await fetchData().then(data => [null, data] ).catch(err => [err, null])\n    console.log('err', err)\n    console.log('data', data)\n    // err null\n    // data fetch data is me\n})()\n\n```\n\n这样是不是好很多了呢，但是问题又来了，不能每个 await 都写这么长，写着也不方便也不优雅，再优化一下\n\n```js\n(async () => {\n    const fetchData = () => {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve('fetch data is me')\n            }, 1000)\n        })\n    }\n\n    // 抽离成公共方法\n    const awaitWrap = (promise) => {\n        return promise\n            .then(data => [null, data])\n            .catch(err => [err, null])\n    }\n\n    const [err, data] = await awaitWrap(fetchData())\n    console.log('err', err)\n    console.log('data', data)\n    // err null\n    // data fetch data is me\n})()\n\n```\n\n将对 await 处理的方法抽离成公共的方法，在使用 await 调用 awaitWrap 这样的方法是不是更优雅了呢。如果使用 typescript 实现大概是这个样子\n\n```ts\nfunction awaitWrap<T, U = any>(promise: Promise<T>): Promise<[U | null, T | null]> {\n    return promise\n        .then<[null, T]>((data: T) => [null, data])\n        .catch<[U, null]>(err => [err, null])\n}\n```\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-16T04:37:12.000Z",
    "updateAt": "2022-05-16T12:37:25.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 538,
    "prev": "c6530c46-d02f-40b2-8e6e-c11a6daf3f12",
    "next": "1cda0ef6-a1fa-45f7-b48f-f3784c45e9fa"
  },
  "post": {
    "exerciseKey": "deb034d1-2a96-45b4-8576-132f2af9c797",
    "category": "QA",
    "title": "async/await 怎么进行错误处理？\n",
    "level": 2,
    "updateAt": "2022-05-16T12:37:25+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
