{
  "data": {
    "id": 584,
    "exerciseKey": "0e7888d9-d8a4-41f8-a052-f94350ee0c15",
    "category": "QA",
    "renderType": "md",
    "title": "React有哪些性能优化的方法？",
    "desc": null,
    "options": null,
    "explanation": "React 渲染性能优化的三个方向，其实也适用于其他软件开发领域，这三个方向分别是:\n\n* 减少计算的量。 -> 对应到 React 中就是减少渲染的节点 或者 降低组件渲染的复杂度\n* 利用缓存。-> 对应到 React 中就是如何避免重新渲染，利用函数式编程的 memo 方式来避免组件重新渲染\n* 精确重新计算的范围。 对应到 React 中就是绑定组件和状态关系, 精确判断更新的'时机'和'范围'. 只重新渲染'脏'的组件，或者说降低渲染范围\n\n## 减少渲染的节点/降低渲染计算量(复杂度)\n\n首先从计算的量上下功夫，减少节点渲染的数量或者降低渲染的计算量可以显著的提高组件渲染性能。\n\n### 不要在渲染函数都进行不必要的计算\n\n比如不要在渲染函数(render)中进行数组排序、数据转换、订阅事件、创建事件处理器等等. 渲染函数中不应该放置太多副作用\n\n### 减少不必要的嵌套\n\n有些团队是重度的 styled-components 用户，其实大部分情况下我们都不需要这个玩意，比如纯静态的样式规则，以及需要重度性能优化的场景。除了性能问题，另外一个困扰我们的是它带来的节点嵌套地狱(如上图)。\n\n所以我们需要理性地选择一些工具，比如使用原生的 CSS，减少 React 运行时的负担.\n\n一般不必要的节点嵌套都是滥用高阶组件/RenderProps 导致的。所以还是那句话‘只有在必要时才使用 xxx’。 有很多种方式来代替高阶组件/RenderProps，例如优先使用 props、React Hooks\n\n### 虚拟列表\n\n虚拟列表是常见的‘长列表'和'复杂组件树'优化方式，它优化的本质就是减少渲染的节点。\n\n虚拟列表只渲染当前视口可见元素。\n\n虚拟列表常用于以下组件场景:\n\n* 无限滚动列表，grid, 表格，下拉列表，spreadsheets\n* 无限切换的日历或轮播图\n* 大数据量或无限嵌套的树\n* 聊天窗，数据流(feed), 时间轴\n* 等等\n\n### 惰性渲染\n\n惰性渲染的初衷本质上和虚表一样，也就是说我们只在必要时才去渲染对应的节点。\n\n举个典型的例子，我们常用 Tab 组件，我们没有必要一开始就将所有 Tab 的 panel 都渲染出来，而是等到该 Tab 被激活时才去惰性渲染。\n\n还有很多场景会用到惰性渲染，例如树形选择器，模态弹窗，下拉列表，折叠组件等等。\n\n### 选择合适的样式方案\n\n在样式运行时性能方面大概可以总结为：CSS > 大部分CSS-in-js > inline style\n\n## 避免重新渲染\n\n减少不必要的重新渲染也是 React 组件性能优化的重要方向. 为了避免不必要的组件重新渲染需要在做到两点:\n\n* 保证组件纯粹性。即控制组件的副作用，如果组件有副作用则无法安全地缓存渲染结果\n* 通过shouldComponentUpdate生命周期函数来比对 state 和 props, 确定是否要重新渲染。对于函数组件可以使用React.memo包装\n\n另外这些措施也可以帮助你更容易地优化组件重新渲染:\n\n### 简化 props\n\n如果一个组件的 props 太复杂一般意味着这个组件已经违背了‘单一职责’，首先应该尝试对组件进行拆解. ② 另外复杂的 props 也会变得难以维护, 比如会影响shallowCompare效率, 还会让组件的变动变得难以预测和调试.\n\n简化的 props 更容易理解, 且可以提高组件缓存的命中率\n\n### 不变的事件处理器\n\n避免使用箭头函数形式的事件处理器, 例如:\n\n```javascript\n<ComplexComponent onClick={evt => onClick(evt.id)} otherProps={values} />\n```\n\n假设 ComplexComponent 是一个复杂的 PureComponent, 这里使用箭头函数，其实每次渲染时都会创建一个新的事件处理器，这会导致 ComplexComponent 始终会被重新渲染.\n\n更好的方式是使用实例方法:\n\n```javascript\nclass MyComponent extends Component {\n  render() {\n    <ComplexComponent onClick={this.handleClick} otherProps={values} />;\n  }\n  handleClick = () => {\n    /*...*/\n  };\n}\n```\n\n即使现在使用hooks，我依然会使用useCallback来包装事件处理器，尽量给下级组件暴露一个静态的函数:\n\n```javascript\nconst handleClick = useCallback(() => {\n  /*...*/\n}, []);\n\nreturn <ComplexComponent onClick={handleClick} otherProps={values} />;\n```\n\n但是如果useCallback依赖于很多状态，你的useCallback可能会变成这样:\n\n```javascript\nconst handleClick = useCallback(() => {\n  /*...*/\n  // 🤭\n}, [foo, bar, baz, bazz, bazzzz]);\n```\n\n这种写法实在让人难以接受，这时候谁还管什么函数式非函数式的。我是这样处理的:\n\n```javascript\nfunction useRefProps<T>(props: T) {\n  const ref = useRef < T > props;\n  // 每次渲染更新props\n  useEffect(() => {\n    ref.current = props;\n  });\n}\n\nfunction MyComp(props) {\n  const propsRef = useRefProps(props);\n\n  // 现在handleClick是始终不变的\n  const handleClick = useCallback(() => {\n    const { foo, bar, baz, bazz, bazzzz } = propsRef.current;\n    // do something\n  }, []);\n}\n```\n\n设计更方便处理的 Event Props. 有时候我们会被逼的不得不使用箭头函数来作为事件处理器：\n\n```javascript\n<List>\n  {list.map(i => (\n    <Item key={i.id} onClick={() => handleDelete(i.id)} value={i.value} />\n  ))}\n</List>\n```\n\n上面的 onClick 是一个糟糕的实现，它没有携带任何信息来标识事件来源，所以这里只能使用闭包形式，更好的设计可能是这样的:\n\n```javascript\n// onClick传递事件来源信息\nconst handleDelete = useCallback((id: string) => {\n  /*删除操作*/\n}, []);\n\nreturn (\n  <List>\n    {list.map(i => (\n      <Item key={i.id} id={i.id} onClick={handleDelete} value={i.value} />\n    ))}\n  </List>\n);\n```\n\n如果是第三方组件或者 DOM 组件呢? 实在不行，看能不能传递data-*属性:\n\n```javascript\nconst handleDelete = useCallback(event => {\n  const id = event.currentTarget.dataset.id;\n  /*删除操作*/\n}, []);\n\nreturn (\n  <ul>\n    {list.map(i => (\n      <li key={i.id} data-id={i.id} onClick={handleDelete} value={i.value} />\n    ))}\n  </ul>\n);\n```\n\n### 不可变数据\n\n不可变数据可以让状态变得可预测，也让 shouldComponentUpdate '浅比较'变得更可靠和高效。\n\n相关的工具有Immutable.js、Immer、immutability-helper 以及 seamless-immutable。\n\n### 简化 state\n\n不是所有状态都应该放在组件的 state 中. 例如缓存数据。按照我的原则是：如果需要组件响应它的变动, 或者需要渲染到视图中的数据才应该放到 state 中。这样可以避免不必要的数据变动导致组件重新渲染.\n\n### 使用 recompose 精细化比对\n\n尽管 hooks 出来后，recompose 宣称不再更新了，但还是不影响我们使用 recompose 来控制shouldComponentUpdate方法, 比如它提供了以下方法来精细控制应该比较哪些 props:\n\n```javascript\n /* 相当于React.memo */\n pure()\n /* 自定义比较 */\n shouldUpdate(test: (props: Object, nextProps: Object) => boolean): HigherOrderComponent\n /* 只比较指定key */\n onlyUpdateForKeys( propKeys: Array<string>): HigherOrderComponent\n```\n\n其实还可以再扩展一下，比如omitUpdateForKeys忽略比对某些 key.\n\n## 精细化渲染\n\n\n所谓精细化渲染指的是只有一个数据来源导致组件重新渲染, 比如说 A 只依赖于 a 数据，那么只有在 a 数据变动时才渲染 A, 其他状态变化不应该影响组件 A。\n\nVue 和 Mobx 宣称自己性能好的一部分原因是它们的'响应式系统', 它允许我们定义一些‘响应式数据’，当这些响应数据变动时，依赖这些响应式数据视图就会重新渲染。\n\n### 响应式数据的精细化渲染\n\n大部分情况下，响应式数据可以实现视图精细化的渲染, 但它还是不能避免开发者写出低效的程序. 本质上还是因为组件违背‘单一职责’.\n\n举个例子，现在有一个 MyComponent 组件，依赖于 A、B、C 三个数据源，来构建一个 vdom 树。现在的问题是什么呢？现在只要 A、B、C 任意一个变动，那么 MyComponent 整个就会重新渲染。\n\n更好的做法是让组件的职责更单一，精细化地依赖响应式数据，或者说对响应式数据进行‘隔离’. 如下图, A、B、C 都抽取各自的组件中了，现在 A 变动只会渲染 A 组件本身，而不会影响父组件和 B、C 组件。\n\n对于 Vue 或者 Mobx 来说，一个组件的渲染函数就是一个依赖收集的上下文。上面 List 组件渲染函数内'访问'了所有的列表项数据，那么 Vue 或 Mobx 就会认为你这个组件依赖于所有的列表项，这样就导致，只要任意一个列表项的属性值变动就会重新渲染整个 List 组件。\n\n解决办法也很简单，就是将数据隔离抽取到单一职责的组件中。对于 Vue 或 Mobx 来说，越细粒度的组件，可以收获更高的性能优化效果。\n\n### 不要滥用 Context\n\n其实 Context 的用法和响应式数据正好相反。笔者也看过不少滥用 Context API 的例子, 说到底还是没有处理好‘状态的作用域问题’.\n\n首先要理解 Context API 的更新特点，它是可以穿透React.memo或者shouldComponentUpdate的比对的，也就是说，一旦 Context 的 Value 变动，所有依赖该 Context 的组件会全部 forceUpdate.\n\n这个和 Mobx 和 Vue 的响应式系统不同，Context API 并不能细粒度地检测哪些组件依赖哪些状态，所以说上节提到的‘精细化渲染’组件模式，在 Context 这里就成为了‘反模式’.\n\n\n\n\n\n\n\n  \n\n\n",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2021-08-10T07:03:29.000Z",
    "updateAt": "2021-08-15T15:28:34.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 789,
    "prev": "4c33c24c-2e00-49a8-9f70-14c9ed80bf32",
    "next": "e253151b-a880-448b-9cd1-d869971a63e4"
  },
  "post": {
    "exerciseKey": "0e7888d9-d8a4-41f8-a052-f94350ee0c15",
    "category": "QA",
    "title": "React有哪些性能优化的方法？",
    "level": 4,
    "updateAt": "2021-08-15T15:28:34+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
