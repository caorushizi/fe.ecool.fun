{
  "data": {
    "id": 206,
    "exerciseKey": "8d391a9c-0573-4edd-bd5d-84b9af70bad5",
    "category": "QA",
    "renderType": "md",
    "title": "bind、call、apply 有什么区别？如何实现一个bind?",
    "desc": null,
    "options": null,
    "explanation": "## 一、作用\n\n`call `、`apply `、`bind `作用是改变函数执行时的上下文，简而言之就是改变函数运行时的`this`指向\n\n那么什么情况下需要改变`this`的指向呢？下面举个例子\n\n```js\nvar name=\"lucy\";\nvar obj={\n    name:\"martin\",\n    say:function () {\n        console.log(this.name);\n    }\n};\nobj.say(); //martin，this指向obj对象\nsetTimeout(obj.say,0); //lucy，this指向window对象\n```\n\n从上面可以看到，正常情况`say`方法输出`martin`\n\n但是我们把`say`放在`setTimeout`方法中，在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候`this`指向`window`，所以输出`luck`\n\n> PS: 此处需要注意，如果外层改成 `const name=\"lucy\";`，那么`setTimeout(obj.say,0);`的输出会是 undefined，因为 var 声明的变量会挂载在 window 上，而 let 和 const 声明的变量不会挂载到 window 上。\n\n我们实际需要的是`this`指向`obj`对象，这时候就需要该改变`this`指向了\n\n```js\nsetTimeout(obj.say.bind(obj),0); //martin，this指向obj对象\n```\n\n\n\n## 二、区别\n\n下面再来看看`apply`、`call`、`bind`的使用\n\n### apply\n\n`apply`接受两个参数，第一个参数是`this`的指向，第二个参数是函数接受的参数，以数组的形式传入\n\n改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次\n\n```js\nfunction fn(...args){\n    console.log(this,args);\n}\nlet obj = {\n    myname:\"张三\"\n}\n\nfn.apply(obj,[1,2]); // this会变成传入的obj，传入的参数必须是一个数组；\nfn(1,2) // this指向window\n```\n\n当第一个参数为`null`、`undefined`的时候，默认指向`window`(在浏览器中)\n\n```js\nfn.apply(null,[1,2]); // this指向window\nfn.apply(undefined,[1,2]); // this指向window\n```\n\n\n\n### call\n\n`call`方法的第一个参数也是`this`的指向，后面传入的是一个参数列表\n\n跟`apply`一样，改变`this`指向后原函数会立即执行，且此方法只是临时改变`this`指向一次\n\n```js\nfunction fn(...args){\n    console.log(this,args);\n}\nlet obj = {\n    myname:\"张三\"\n}\n\nfn.call(obj,1,2); // this会变成传入的obj，传入的参数不是数组；\nfn(1,2) // this指向window\n```\n\n同样的，当第一个参数为`null`、`undefined`的时候，默认指向`window`(在浏览器中)\n\n```js\nfn.call(null,1,2]); // this指向window\nfn.call(undefined,1,2); // this指向window\n```\n\n\n\n### bind\n\nbind方法和call很相似，第一参数也是`this`的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入)\n\n改变`this`指向后不会立即执行，而是返回一个永久改变`this`指向的函数\n\n```js\nfunction fn(...args){\n    console.log(this,args);\n}\nlet obj = {\n    myname:\"张三\"\n}\n\nconst bindFn = fn.bind(obj); // this 也会变成传入的obj ，bind不是立即执行需要执行一次\nbindFn(1,2) // this指向obj\nfn(1,2) // this指向window\n```\n\n\n### 小结\n\n从上面可以看到，`apply`、`call`、`bind`三者的区别在于：\n\n- 三者都可以改变函数的`this`对象指向\n- 三者第一个参数都是`this`要指向的对象，如果如果没有这个参数或参数为`undefined`或`null`，则默认指向全局`window`\n- 三者都可以传参，但是`apply`是数组，而`call`是参数列表，且`apply`和`call`是一次性传入参数，而`bind`可以分为多次传入\n- `bind `是返回绑定this之后的函数，`apply `、`call` 则是立即执行 \n\n\n\n## 三、实现\n\n实现`bind`的步骤，我们可以分解成为三部分：\n\n- 修改`this`指向\n- 动态传递参数\n\n```js\n// 方式一：只在bind中传递函数参数\nfn.bind(obj,1,2)()\n\n// 方式二：在bind中传递函数参数，也在返回函数中传递参数\nfn.bind(obj,1)(2)\n```\n\n- 兼容`new`关键字\n\n整体实现代码如下：\n\n```js\nFunction.prototype.myBind = function (context) {\n    // 判断调用对象是否为函数\n    if (typeof this !== \"function\") {\n        throw new TypeError(\"Error\");\n    }\n\n    // 获取参数\n    const args = [...arguments].slice(1),\n          fn = this;\n\n    return function Fn() {\n\n        // 根据调用方式，传入不同绑定值\n        return fn.apply(this instanceof Fn ? new fn(...arguments) : context, args.concat(...arguments)); \n    }\n}\n```",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2021-07-03T13:55:41.000Z",
    "updateAt": "2024-08-10T21:45:06.000Z",
    "isCollected": false,
    "currentIndex": 1293,
    "filterTotalNum": 1487,
    "prev": "e3f52a7b-4c54-4b00-bd6c-b63f2b60421c",
    "next": "bbcedbfa-a74f-411f-a309-01f7e590ee50"
  },
  "post": {
    "exerciseKey": "8d391a9c-0573-4edd-bd5d-84b9af70bad5",
    "category": "QA",
    "title": "bind、call、apply 有什么区别？如何实现一个bind?",
    "level": 1,
    "createAt": "2021-07-03T13:55:41+00:00",
    "updateAt": "2024-08-10T21:45:06+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}