{
  "data": {
    "id": 2104,
    "exerciseKey": "7b8e4d40-609a-4e52-96e0-a4515709125c",
    "category": "QA",
    "renderType": "md",
    "title": "vue3 为什么要引入 Composition API ？\n",
    "desc": null,
    "options": null,
    "explanation": "Vue 3 引入 Composition API 的原因主要是为了更好地解决以下几个问题：\n\n### 1. 更好的代码组织和重用\n\n在 Vue 2 中，使用选项式 API（Options API）来定义组件的逻辑，通常将数据、方法、计算属性和生命周期钩子分开写在不同的配置对象中。当组件变得复杂时，不同功能的代码可能会散落在各个部分，难以维护和重用。\n\n#### 示例：\n\n```javascript\n// Vue 2 中使用 Options API\nexport default {\n  data() {\n    return {\n      count: 0,\n      message: 'Hello World'\n    };\n  },\n  computed: {\n    doubleCount() {\n      return this.count * 2;\n    }\n  },\n  methods: {\n    increment() {\n      this.count++;\n    }\n  },\n  created() {\n    console.log(this.message);\n  }\n};\n```\n\n通过 Composition API，可以将相关功能的逻辑组织在一起，从而提高代码的可读性和可维护性。\n\n#### 示例：\n\n```javascript\n// Vue 3 中使用 Composition API\nimport { ref, computed, onMounted } from 'vue';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    const message = ref('Hello World');\n    \n    const doubleCount = computed(() => count.value * 2);\n    \n    const increment = () => {\n      count.value++;\n    };\n    \n    onMounted(() => {\n      console.log(message.value);\n    });\n    \n    return {\n      count,\n      doubleCount,\n      increment,\n      message\n    };\n  }\n};\n```\n\n### 2. 更好的逻辑复用\n\n在 Vue 2 中，逻辑复用主要通过 mixins 和 scoped slots 实现，但它们都有一些缺点，比如命名冲突和代码可读性差。\n\nComposition API 通过组合函数（composable functions）来实现逻辑复用，这些函数可以在多个组件之间共享和复用逻辑，避免了 mixins 的缺点。\n\n#### 示例：\n\n```javascript\n// 一个组合函数，可以在多个组件中复用\nimport { ref, onMounted } from 'vue';\n\nexport function useMessage() {\n  const message = ref('Hello World');\n  \n  onMounted(() => {\n    console.log(message.value);\n  });\n  \n  return {\n    message\n  };\n}\n```\n\n#### 在组件中使用：\n\n```javascript\nimport { ref } from 'vue';\nimport { useMessage } from './useMessage';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    const { message } = useMessage();\n    \n    const increment = () => {\n      count.value++;\n    };\n    \n    return {\n      count,\n      message,\n      increment\n    };\n  }\n};\n```\n\n### 3. 更好的 TypeScript 支持\n\nComposition API 天然地支持 TypeScript，使得类型推断和类型检查更为自然和方便。相比于 Options API，通过 Composition API 定义的逻辑更容易进行类型声明和类型推断，提升了开发体验。\n\n#### 示例：\n\n```typescript\nimport { ref, computed } from 'vue';\n\nexport default {\n  setup() {\n    const count = ref<number>(0);\n    const doubleCount = computed<number>(() => count.value * 2);\n    \n    const increment = (): void => {\n      count.value++;\n    };\n    \n    return {\n      count,\n      doubleCount,\n      increment\n    };\n  }\n};\n```\n\n### 4. 适应函数式编程趋势\n\nComposition API 借鉴了函数式编程的思想，将逻辑封装成函数，使得代码更加简洁、模块化、可测试，同时也更符合现代 JavaScript 开发趋势。\n\n### 总结\n\nVue 3 引入 Composition API 主要是为了提升代码组织和复用性、提供更好的 TypeScript 支持、适应函数式编程趋势，并且解决 Vue 2 中存在的一些问题。通过 Composition API，可以让组件逻辑更加清晰、灵活和易于维护。",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2024-06-06T01:38:47.000Z",
    "updateAt": "2024-08-10T19:06:07.000Z",
    "isCollected": false,
    "currentIndex": 288,
    "filterTotalNum": 1487,
    "prev": "944d0ea6-53f8-426b-b583-7010d1639860",
    "next": "b63832ef-77c7-4507-baf5-1134957368c0"
  },
  "post": {
    "exerciseKey": "7b8e4d40-609a-4e52-96e0-a4515709125c",
    "category": "QA",
    "title": "vue3 为什么要引入 Composition API ？\n",
    "level": 2,
    "createAt": "2024-06-06T01:38:47+00:00",
    "updateAt": "2024-08-10T19:06:07+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}