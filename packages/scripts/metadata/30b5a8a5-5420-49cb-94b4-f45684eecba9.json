{
  "data": {
    "id": 2462,
    "exerciseKey": "30b5a8a5-5420-49cb-94b4-f45684eecba9",
    "category": "QA",
    "renderType": "md",
    "title": "JS 中的数组和函数在内存中是如何存储的？",
    "desc": "",
    "options": "",
    "explanation": "在 JavaScript 中，数组和函数在内存中的存储方式有所不同，但它们都遵循 JavaScript 引擎的内存管理机制。以下是对数组和函数在内存中存储的详细解释：\n\n### 1. **数组**\n\n- **内存存储**：\n  - **连续内存**：数组通常在内存中是以连续的内存块存储的。每个元素在内存中都有一个固定的位置，这使得可以快速访问特定索引的元素。\n  - **动态大小**：JavaScript 数组是动态的，即使在创建时给定了初始大小，数组的大小也可以根据需要自动增长或缩小。引擎内部会处理这种动态调整，但一般来说，数组的实际存储实现可能使用内存池或动态数组策略。\n\n- **内存开销**：\n  - 数组的元素是按照索引存储的，每个元素的内存开销取决于其数据类型（例如，整数、浮点数、对象等）。\n  - 数组的内存开销还包括存储数组元数据的空间，例如长度和容量。\n\n- **示例**：\n  ```javascript\n  let arr = [1, 2, 3];\n  ```\n\n  在内存中，`arr` 会有一个指向存储 `[1, 2, 3]` 的连续内存块的引用。\n\n### 2. **函数**\n\n- **内存存储**：\n  - **函数对象**：函数在内存中是作为一个对象存储的，包括函数的代码、作用域链和其他内部属性。\n  - **代码区**：函数的实际代码被存储在一个代码区域，通常由 JavaScript 引擎内部管理。这段代码是不可变的。\n  - **闭包**：如果函数创建了闭包（例如，引用了外部作用域的变量），这些引用的变量也会被存储在内存中，通常与函数对象一起存储在堆内存中。\n\n- **内存开销**：\n  - **函数体**：函数的代码块占用内存，且这部分内存通常是固定的，取决于函数的复杂性。\n  - **作用域链**：函数的作用域链或闭包变量会额外占用内存，用于保存函数执行时需要访问的外部变量。\n\n- **示例**：\n  ```javascript\n  function greet(name) {\n      console.log(`Hello, ${name}!`);\n  }\n  ```\n\n  在内存中，`greet` 函数会有一个指向其代码块的引用，还会包含作用域链信息以及可能的闭包变量。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-22T11:04:42.000Z",
    "isCollected": false,
    "currentIndex": 201,
    "filterTotalNum": 1487,
    "prev": "63516b0e-a270-459b-a84d-02e79a275639",
    "next": "112b5d92-47d7-40eb-9d8a-4321af6247bd"
  },
  "post": {
    "exerciseKey": "30b5a8a5-5420-49cb-94b4-f45684eecba9",
    "category": "QA",
    "title": "JS 中的数组和函数在内存中是如何存储的？",
    "level": 1.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-22T11:04:42+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}