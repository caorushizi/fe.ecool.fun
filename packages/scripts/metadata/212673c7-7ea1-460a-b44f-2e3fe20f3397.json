{
  "data": {
    "id": 325,
    "exerciseKey": "212673c7-7ea1-460a-b44f-2e3fe20f3397",
    "category": "QA",
    "renderType": "md",
    "title": "简单介绍下React中的 diff 算法\n",
    "desc": null,
    "options": null,
    "explanation": "diff 算法主要基于三个规律：\n\n* DOM 节点的跨层级移动的操作特别少，可以忽略不计\n* 拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构\n* 对于同一层级的一组子节点，可以通过唯一的 id 进行区分\n\n## tree diff\n\n因为上面的三个策略中的第一点， DOM 节点的跨级操作比较少，那么 diff 算法只会对相同层级的 DOM 节点进行比较。如果发现节点不存在 那么会将该节点以及其子节点完全删除，不会再继续比较。如果出现了 DOM 节点的跨层级的移动操作，那么会删除改节点以及其所有的子节点，然后再移动后的位置重新创建。\n\n## component diff\n\n如果是同一类型的组件，那么会继续对比 VM 数\n\n如果不是同一类型的组件，那么会将其和其子节点完全替换，不会再进行比对\n\n同一类型的组件，有可能 VM 没有任何的变化，如果可以确定的知道这点，那么就可以节省大量的 diff 时间，所以用户可以设置 shouldComponentUpdate() 来判断是否需要进行 diff 算法。\n\n## element diff\n\n当节点处于同一层级的时候时，有三种操作：INSERT_MAKEUP插入、 MOVE_EXISTING 移动、 REMOVE_NODE 删除\n\n这里 React 有一个优化策略，对于同一层级的同组子节点，添加唯一的 key 进行区分。这样的话，就可以判断出来是否是移动节点。通过 key 发现新旧集合中的节点都是相同的节点，就只需要进行移动操作就可以。\n\n",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T11:59:54.000Z",
    "updateAt": "2021-07-04T21:30:37.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 991,
    "prev": "eef587e7-d29b-4b32-b672-7f8fe2e84217",
    "next": "4caa6281-4592-4f6b-ac70-73effa2bcf0d"
  },
  "post": {
    "exerciseKey": "212673c7-7ea1-460a-b44f-2e3fe20f3397",
    "category": "QA",
    "title": "简单介绍下React中的 diff 算法\n",
    "level": 3.5,
    "updateAt": "2021-07-04T21:30:37+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}