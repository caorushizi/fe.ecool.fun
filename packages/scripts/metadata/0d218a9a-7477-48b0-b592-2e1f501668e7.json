{
  "data": {
    "id": 2407,
    "exerciseKey": "0d218a9a-7477-48b0-b592-2e1f501668e7",
    "category": "QA",
    "renderType": "md",
    "title": "如何判断一个单向链表是否是循环链表？",
    "desc": "",
    "options": "",
    "explanation": "判断一个单向链表是否是循环链表，常用的两种方法是**哈希表法**和**快慢指针法**（也称为**Floyd 判圈算法**）。这两种方法都能有效地检测链表是否有环，但它们的时间复杂度和空间复杂度不同。\n\n### 1. **哈希表法**\n\n**原理**：使用一个哈希表来记录链表中每个节点的引用。如果在遍历过程中遇到一个已经在哈希表中的节点，则说明链表有环。\n\n**步骤**：\n\n1. 创建一个空的哈希表。\n2. 遍历链表的每个节点：\n   - 如果当前节点已经存在于哈希表中，则链表有环。\n   - 否则，将当前节点加入哈希表。\n3. 如果遍历完链表没有发现重复的节点，则链表无环。\n\n**代码示例**（JavaScript）：\n\n```javascript\nfunction hasCycle(head) {\n  const visited = new Set();\n  let current = head;\n  \n  while (current) {\n    if (visited.has(current)) {\n      return true; // 链表有环\n    }\n    visited.add(current);\n    current = current.next;\n  }\n  \n  return false; // 链表无环\n}\n```\n\n**优点**：简单直观。\n\n**缺点**：需要额外的空间来存储哈希表，空间复杂度为 O(n)。\n\n### 2. **快慢指针法（Floyd 判圈算法）**\n\n**原理**：使用两个指针，一个快指针（每次移动两个节点）和一个慢指针（每次移动一个节点）。如果链表有环，快指针和慢指针最终会在环内相遇。如果链表无环，快指针会先到达链表末尾（即 `null`）。\n\n**步骤**：\n\n1. 初始化快指针和慢指针，都指向链表头部。\n2. 移动快指针两步，慢指针一步。\n3. 如果快指针和慢指针相遇，则链表有环。\n4. 如果快指针到达链表末尾（即 `null`），则链表无环。\n\n**代码示例**（JavaScript）：\n\n```javascript\nfunction hasCycle(head) {\n  let slow = head;\n  let fast = head;\n  \n  while (fast && fast.next) {\n    slow = slow.next;        // 慢指针每次走一步\n    fast = fast.next.next;   // 快指针每次走两步\n    \n    if (slow === fast) {\n      return true;  // 快慢指针相遇，链表有环\n    }\n  }\n  \n  return false; // 快指针到达末尾，链表无环\n}\n```\n\n**优点**：不需要额外的空间，空间复杂度为 O(1)。\n\n**缺点**：相对复杂一些，但更节省空间。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-09-03T01:42:36.000Z",
    "isCollected": false,
    "currentIndex": 228,
    "filterTotalNum": 1487,
    "prev": "d9ebcb10-02a4-448c-9a27-b5bcfacce4fa",
    "next": "467f7aeb-e452-421e-9404-da26f158adee"
  },
  "post": {
    "exerciseKey": "0d218a9a-7477-48b0-b592-2e1f501668e7",
    "category": "QA",
    "title": "如何判断一个单向链表是否是循环链表？",
    "level": 1.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-09-03T01:42:36+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 21
  }
}