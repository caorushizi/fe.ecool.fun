{
  "data": {
    "id": 2074,
    "exerciseKey": "b4fc51b1-88d0-4213-80a0-49a5d9c6b9f4",
    "category": "QA",
    "renderType": "md",
    "title": "说一下 vite 的构建流程",
    "desc": null,
    "options": null,
    "explanation": "Vite 是一个基于现代浏览器原生 ES 模块的开发服务器和构建工具，其构建流程相较于传统的打包工具有所不同。\n\n下面是 Vite 的构建流程简要说明：\n\n1. **启动开发服务器**：通过运行 `vite` 命令，Vite 启动一个开发服务器。\n2. **解析入口模块**：当用户访问应用程序时，Vite 会解析入口模块（通常是 `index.html`）。它会分析该模块的依赖关系，并将其作为构建的起点。\n3. **按需编译**：Vite 会根据需要实时编译每个模块。当浏览器请求某个模块时，Vite 会检查该模块是否已经被编译，如果没有，它将根据模块的类型（如 `.js`、`.vue`）采取不同的编译策略。\n    - 对于 JavaScript 文件，Vite 使用 esbuild 进行快速的原生 ES 模块转换，生成浏览器可直接执行的代码。\n    - 对于 Vue 单文件组件（`.vue` 文件），Vite 使用 `@vue/compiler-sfc` 解析并编译它们成为 JavaScript 代码。\n4. **提供虚拟模块**：完成编译后，Vite 会将模块包裹在一个虚拟模块中，并将该模块作为一个请求的响应返回给浏览器。这样浏览器可以直接加载这些虚拟模块，无需打包成独立文件。\n5. **处理静态资源**：Vite 会对静态资源（如 CSS、图片等）进行特殊处理，并返回给浏览器以供使用。\n6. **热模块替换（HMR）**：Vite 内置了热模块替换功能，使得在开发过程中修改代码后，可以实时更新浏览器中的页面，而无需刷新整个页面。\n\n总结起来，Vite 的构建流程主要是基于原生 ES 模块的按需编译，每个模块都被实时编译并返回给浏览器。它采用了虚拟模块的概念，使得浏览器可以直接加载这些模块，提升了开发的速度和效率。此外，Vite 还支持热模块替换，可以在开发过程中实时更新代码。",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2023-12-17T10:51:38.000Z",
    "updateAt": "2024-08-10T17:07:36.000Z",
    "isCollected": false,
    "currentIndex": 317,
    "filterTotalNum": 1487,
    "prev": "d39feeb7-a118-4a67-b164-8af8c3fdd73a",
    "next": "b11685c7-d458-4225-a5b1-40a34631a8d1"
  },
  "post": {
    "exerciseKey": "b4fc51b1-88d0-4213-80a0-49a5d9c6b9f4",
    "category": "QA",
    "title": "说一下 vite 的构建流程",
    "level": 2,
    "createAt": "2023-12-17T10:51:38+00:00",
    "updateAt": "2024-08-10T17:07:36+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 33
  }
}