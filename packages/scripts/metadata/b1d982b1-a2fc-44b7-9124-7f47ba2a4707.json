{
  "data": {
    "id": 1536,
    "exerciseKey": "b1d982b1-a2fc-44b7-9124-7f47ba2a4707",
    "category": "QA",
    "renderType": "md",
    "title": "最长回文子串",
    "desc": "给你一个字符串 s，找到 s 中最长的回文子串。\n\n* 示例 1：\n\n```\n输入：s = \"babad\"\n输出：\"bab\"\n解释：\"aba\" 同样是符合题意的答案。\n```\n\n* 示例 2：\n\n```\n输入：s = \"cbbd\"\n输出：\"bb\"\n```\n\n* 示例 3：\n\n```\n输入：s = \"a\"\n输出：\"a\"\n```\n\n* 示例 4：\n\n```\n输入：s = \"ac\"\n输出：\"a\"\n```\n\n* 提示：\n\n```\n1 <= s.length <= 1000\ns 仅由数字和英文字母（大写和/或小写）组成\n```\n",
    "options": null,
    "explanation": "# 暴力枚举法\n\n## 思路\n\n暴力解法虽然时间复杂度高，但是思路清晰、编写简单，因为编写的正确性高，完全可以使用暴力匹配算法检验我们编写的算法的正确性。\n\n## 代码\n\n```js\nvar longestPalindrome_bf = function(s) {\n  if (!s) return '';\n  var longest = s[0], str, i, j, len;\n  var isPalindrom = function (left, right) {\n    while (left < right && s[left] === s[right]) {\n      left++;\n      right--;\n    }\n    return left >= right;\n  }\n  for (len = 2; len <= s.length; len++) {\n    for (i = 0; i < s.length; i++) {\n      j = i + len - 1;\n      if (isPalindrom(i, j)) {\n        str = s.slice(i, j + 1);\n        if (longest.length < str.length) longest = str;\n      }\n    }\n  }\n  return longest;\n}\n```\n\n## 复杂度\n\n* 时间复杂度O(n^3)\n* 空间复杂度O(1)\n\n# 中心扩散法\n\n## 思路\n\n暴力法时间复杂度比较高，除此之外，还容易想到的是枚举可能出现的回文子串的“中心位置”，从“中心位置”尝试尽可能扩散出去，得到一个回文串。\n\n遍历原字符串，每个字符或每两个字符中间，都可能被当成回文子串的中心，利用回文串的中心对称的特点，尽量往两边扩散，获取最大的“扩散面积”\n\n因此，中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用“回文串”中心对称的特点，往两边扩散，看最多能扩散多远。\n\n枚举“中心位置”时间复杂度为 O(n) ，从“中心位置”扩散得到“回文子串”的时间复杂度为 O(n) ，因此时间复杂度可以降到 O(n^2)。\n\n在这里要注意一个细节：回文串在长度为奇数和偶数的时候，“回文中心”的形式是不一样的。\n\n* 奇数回文串的“中心”是一个具体的字符，例如：回文串 \"aba\" 的中心是字符 \"a\"；\n* 偶数回文串的“中心”是位于中间的两个字符的“空隙”，例如：回文串串 \"abba\" 的中心是两个 \"b\" 中间的那个“空隙”。\n\n## 代码\n\n```js\n/**\n* @param {string} s\n* @return {string}\n*/\nvar longestPalindrome = function (s) {\n    if (!s) return ''\n    if (s.length === 1) return s;\n    if (s.length === 2) return s[0] === s[1] ? s : s[1];\n    let maxStr = '',\n        len = s.length;\n    for (let i = 0; i < len; i++) {\n        let even = '', // 定义偶数中心回文\n            odd = ''; // 定义奇数中心回文\n        if (s[i] === s[i + 1]) { // 若是偶数中心回文\n            let evenIndex = center(s, i - 1, i + 2); // 比较中心的前一项和后一项\n            even = s.slice(evenIndex.left, evenIndex.right)\n        }\n        let oddIndex = center(s, i - 1, i + 1); // 奇数中心回文\n        odd = s.slice(oddIndex.left, oddIndex.right);\n        let longer = even.length > odd.length ? even : odd; // 比较奇、偶\n        maxStr = maxStr.length > longer.length ? maxStr : longer\n    }\n    return maxStr\n}\n// 中心扩展\nfunction center(s, left, right) {\n    let len = s.length;\n    while (left >= 0 && right < len && s[left] === s[right]) {\n        left--;\n        right++;\n    }\n    return { left: left + 1, right: right }\n}\n```\n\n# 动态规划\n\nDP可能是解这个问题的一个好方法，然而算法复杂度依然是 O(N^2) 的，而且空间复杂度也是 O(N^2)。\n\n我们假设用 P[i][j] 来表示 s[i..j] 是否是一个回文子串。\n\n它的计算公式长这样：\n\n> P[i][j] = s[i] === s[j] && P[i + 1][j - 1] ? true : false;\n\n```js\nvar longestPalindrome_dp = function(s) {\n  var i, j, len;\n  // isPalindrom[i][j] represent s[i..j] is a parlindrom string or not.\n  var isPalindrom = new Array(s.length);\n  for (i = 0; i < s.length; i++) {\n    isPalindrom[i] = new Array(s.length).fill(false);\n  }\n  var maxLen = 1, longestBegin = 0;\n  // initialize\n  for (i = 0; i < s.length; i++) {\n    isPalindrom[i][i] = true;\n    if (i < s.length - 1 && s[i] === s[i + 1]) {\n      isPalindrom[i][i + 1] = true;\n      maxLen = 2;\n      longestBegin = i;\n    }\n  }\n  // compute\n  for (len = 3; len <= s.length; len++) {\n    for (i = 0; i < s.length; i++) {\n      j = len + i - 1;\n      if (s[i] === s[j] && isPalindrom[i + 1][j - 1]) {\n        isPalindrom[i][j] = true;\n        maxLen = len;\n        longestBegin = i;\n      }\n    }\n  }\n  return s.slice(longestBegin, longestBegin + maxLen);\n}\n\n```\n\n# 动态规划 2\n\n## 思路\n\nDP 的空间复杂度是 O(N^2) 的，主要用来保存二维数组 P[i][j]，而且只用了一半。\n\n我们可以把空间复杂度降到 O(1)，只存找到的最长回文串即可。枚举轴心位置，并进行扩展。如果是回文，则轴心两边的字符应该对称相等。\n\n需要考虑到长度奇偶情况的不同，如果是奇数长度，轴心就是一个字符；如果是偶数长度，轴心则不在字符串中\n\n## 实现\n\n```js\nvar longestPalindrome_enum = function(s) {\n  if (!s) return '';\n  var longest = s[0];\n  var expandAroundCenter = function (left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      left--;\n      right++;\n    }\n    return s.slice(left + 1, right);\n  }\n  for (var i = 0; i < s.length; i++) {\n    // 奇数\n    var odd = expandAroundCenter(i, i);\n    if (odd.length > longest.length) longest = odd;\n    // 偶数\n    var even = expandAroundCenter(i, i + 1);\n    if (longest.length < even.length) longest = even;\n  }\n  return longest;\n}\n\n```\n\n# Manacher 算法\n\n相比降低空间复杂度，降低时间复杂度要难得多。这里有一个 O(N) 时间复杂度的算法，叫做 Manacher 算法。\n\n能够从 O(N^2) 降到 O(N)，这个算法很巧妙。它首先解决了长度奇偶不同的问题。\n\n通过向字符串中加入一些特殊字符来使长度均为奇数。特殊字符即为原字符串的字符集中没有的字符。如 'aba' 中插入 '#'，变成'#a#b#a#'。\n\n然后提出了一个回文半径（P）的概念：\n\n```\nT = # a # b # a # a # b # a #\nP = 0 1 0 3 0 1 6 1 0 3 0 1 0\n```\n\n它代表了以该字符为轴心的回文串对折后的长度。由于插入了特殊字符，如果最长回文字符串的长度为偶数，则轴心会出现在 '#' 上。\n\n容易看出上面的例子中，最大回文子串的轴心就是 P 为 6 的字符。最大回文子串为 'abaaba' ，长度刚好为 6.\n\n这显然不是巧合，接下来就是要计算 P，记下其最大值及对应下标，即可。目标时间复杂度 O(N)。当然，这个算法最难的部分，就是计算 P。\n\n正常计算 P 的话，时间复杂度依然是 O(N^2)，但是如果利用回文串的对称特性，减少搜索，就可以将复杂度降至 O(N)。\n\n计算 P 就是以每一个字符为轴心计算回文半径，也就是从每一个字符开始向两边搜索，那么右边必然会搜索到尚未遍历到的字符，如果我们记下最大能搜索到的右边界 R\n。在后面的遍历搜索中，如果当前 T[i] 在边界内，即比最大右边界小，那么也就是在一个已搜索的回文子串中，假设 i' 是 i 对应当前最大 R 的轴心 C 的对称位置（即 T[i] == T[i']）， 可以做出下面的结论：\n\n```\nif P[i'] < R-i\nthen P[i] = P[i']\nelse P[i] >= P[i'] （需要进一步扩展搜索得出）\n```\n\n另一种情况，如果当前字符 T[i] 不在边界内，即我们不能得出任何结论，所以 P[i] = 0。\n\n## 代码\n\n```js\nvar longestPalindrome_manacher = function(s) {\n  s = '^#' + s.split('').join('#') + '#$';\n  var radius = new Array(s.length).fill(0);\n  var C = 0, centerIndex = 0, maxRight = 0, maxLen = 0;\n\n  for (var i = 1; i < s.length - 1; i++) {\n    // 计算初始回文半径, i' = 2 * C - i\n    radius[i] = (maxRight > i) ? Math.min(maxRight - i, radius[2 * C - i]) : 0;\n    // 扩展半径\n    while (s[i + 1 + radius[i]] && s[i - 1 - radius[i]] && s[i + 1 + radius[i]] === s[i - 1 - radius[i]]) radius[i]++;\n    // 更新当前搜索的最大右边界和位置\n    if (i + radius[i] > maxRight) {\n      C = i;\n      maxRight = i + radius[i];\n    }\n    // 更新最大回文串长度及位置\n    if (maxLen < radius[i]) {\n      maxLen = radius[i];\n      centerIndex = i;\n    }\n  }\n\n  return s.slice((centerIndex - maxLen), (centerIndex + maxLen + 1)).split('#').join('');\n};\n\n```\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-11-08T11:10:42.000Z",
    "updateAt": "2021-11-18T21:08:14.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 708,
    "prev": "602703b0-63fc-4725-b5b1-e223b86a8443",
    "next": "bde6a595-899a-453a-85c4-0b774b75fb9e"
  },
  "post": {
    "exerciseKey": "b1d982b1-a2fc-44b7-9124-7f47ba2a4707",
    "category": "QA",
    "title": "最长回文子串",
    "level": 3,
    "updateAt": "2021-11-18T21:08:14+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}
