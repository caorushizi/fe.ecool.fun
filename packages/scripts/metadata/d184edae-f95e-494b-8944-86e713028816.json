{
  "data": {
    "id": 304,
    "exerciseKey": "d184edae-f95e-494b-8944-86e713028816",
    "category": "QA",
    "renderType": "md",
    "title": "什么是受控组件？",
    "desc": null,
    "options": null,
    "explanation": "**受控组件**（Controlled Component）是指一个表单元素的值由 React 组件的状态（`state`）控制，而不是由 DOM 元素自身控制。也就是说，表单元素的值和状态都是由 React 组件的 `state` 进行管理的，表单元素的值由组件的 `state` 决定，并通过事件处理函数来更新 `state`。\n\n### **受控组件的特点**\n\n1. **状态管理**：\n   - **由组件状态控制**：受控组件的表单元素（如 `<input>`、`<textarea>` 和 `<select>`）的值由 React 组件的 `state` 控制。表单元素的值始终与组件的 `state` 保持同步。\n\n2. **单向数据流**：\n   - **从上到下**：表单元素的值由组件的 `state` 决定，当用户输入或选择时，事件处理函数会更新组件的 `state`，进而重新渲染表单元素。数据流是单向的，即数据从组件的 `state` 流向表单元素。\n\n3. **事件处理**：\n   - **更新状态**：每当用户对表单元素进行交互时（如输入文本、选择选项），会触发相应的事件处理函数，这些函数会更新组件的 `state`。组件的 `render` 方法会根据更新后的 `state` 重新渲染表单元素。\n\n### **受控组件的示例**\n\n以下是一个使用受控组件的示例，其中 `<input>` 元素的值由组件的 `state` 控制：\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction ControlledForm() {\n  // 初始化状态\n  const [value, setValue] = useState('');\n\n  // 处理输入变化的函数\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  // 处理表单提交的函数\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert('提交的值: ' + value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        输入内容:\n        {/* 受控组件 */}\n        <input type=\"text\" value={value} onChange={handleChange} />\n      </label>\n      <button type=\"submit\">提交</button>\n    </form>\n  );\n}\n\nexport default ControlledForm;\n```\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2.5,
    "appId": 7,
    "createAt": "2021-07-04T10:45:54.000Z",
    "updateAt": "2024-08-10T17:04:55.000Z",
    "isCollected": false,
    "currentIndex": 1196,
    "filterTotalNum": 1487,
    "prev": "5bdf6ed5-2178-4bef-8690-c04dcdf46930",
    "next": "a67eec57-8dc1-40ee-9c8a-ccfbe25ca58d"
  },
  "post": {
    "exerciseKey": "d184edae-f95e-494b-8944-86e713028816",
    "category": "QA",
    "title": "什么是受控组件？",
    "level": 2.5,
    "createAt": "2021-07-04T10:45:54+00:00",
    "updateAt": "2024-08-10T17:04:55+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}