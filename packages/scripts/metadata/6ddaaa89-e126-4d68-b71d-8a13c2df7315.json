{
  "data": {
    "id": 1986,
    "exerciseKey": "6ddaaa89-e126-4d68-b71d-8a13c2df7315",
    "category": "QA",
    "renderType": "md",
    "title": "两个字符串对比, 得出结论都做了什么操作, 比如插入或者删除",
    "desc": "```js\npre = 'abcde123'\nnow = '1abc123'\n```\n\na前面插入了1, c后面删除了de",
    "options": null,
    "explanation": "## 思路：编辑距离\n\n* 动态规划求编辑距离\n* 倒着将变化输出。dp\\[i\\] === dp\\[i - 1\\] + 1\n\n\n```js\nfunction compareStrings(pre, now) {\n  const m = pre.length;\n  const n = now.length;\n  const dp = new Array(m + 1).fill().map(() => new Array(n + 1).fill(0));\n  for (let i = 0; i <= m; i++) {\n    dp[i][0] = i;\n  }\n  for (let j = 0; j <= n; j++) {\n    dp[0][j] = j;\n  }\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (pre[i - 1] === now[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1];\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n      }\n    }\n  }\n  let i = m;\n  let j = n;\n  let diff = \"\";\n  while (i > 0 || j > 0) {\n    if (i > 0 && dp[i][j] === dp[i - 1][j] + 1) {\n      diff = `删除${pre[i - 1]}, ${diff}`;\n      i--;\n    } else if (j > 0 && dp[i][j] === dp[i][j - 1] + 1) {\n      diff = `插入${now[j - 1]}, ${diff}`;\n      j--;\n    } else {\n      i--;\n      j--;\n    }\n  }\n  return diff;\n}\nconst pre = 'abcde123';\nconst now = '1abc123';\nconst diff = compareStrings(pre, now);\nconsole.log(diff); // 输出：插入1, 删除d, 删除e\n```\n\n解释：\n\n我们将一个字符串转换成另一个字符串的操作分为三种：插入、删除、替换。在这个函数中，我们将删除操作定义为从 `pre` 字符串中删除一个字符，使得 `pre` 的前缀变为 `now` 的前缀。因此，在 `dp` 数组中，`dp[i][j]` 表示 `pre` 的前缀 `pre[0...i-1]` 变为 `now` 的前缀 `now[0...j-1]` 所需的最小操作次数。如果我们想要将 `pre` 的前缀 `pre[0...i-1]` 变为 `now` 的前缀 `now[0...j-1]`，可以有三种操作方式：\n\n1. 插入一个字符：我们可以在 `pre` 的前缀 `pre[0...i-1]` 的末尾插入一个字符 `now[j-1]`，这样就将 `pre` 的前缀变为 `now` 的前缀。此时，`dp[i][j]` 的值应该为 `dp[i][j-1] + 1`。\n2. 删除一个字符：我们可以将 `pre` 的前缀 `pre[0...i-2]` 变为 `now` 的前缀 `now[0...j-1]`，然后再删除字符 `pre[i-1]`，这样也能将 `pre` 的前缀变为 `now` 的前缀。此时，`dp[i][j]` 的值应该为 `dp[i-1][j] + 1`。\n3. 替换一个字符：我们可以将 `pre` 的前缀 `pre[0...i-2]` 变为 `now` 的前缀 `now[0...j-2]`，然后再将字符 `pre[i-1]` 替换为字符 `now[j-1]`，这样也能将 `pre` 的前缀变为 `now` 的前缀。此时，`dp[i][j]` 的值应该为 `dp[i-1][j-1] + 1`。 在这个函数中，我们根据 `dp` 数组的值，逆推出从 `pre` 转换成 `now` 的具体操作。如果 `dp[i][j]` 的值是由 `dp[i-1][j]` 转移而来，那么说明我们需要删除字符 `pre[i-1]`，以使得 `pre` 的前缀变为 `now` 的前缀。因此，我们在返回字符串中加入 `删除pre[i-1]` 的操作。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-15T13:39:28.000Z",
    "updateAt": "2023-05-23T09:20:32.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 373,
    "prev": "97758079-03f4-40ce-9b71-8c3c4e5db338",
    "next": "9764b6d2-511b-40e3-9430-34b62711396c"
  },
  "post": {
    "exerciseKey": "6ddaaa89-e126-4d68-b71d-8a13c2df7315",
    "category": "QA",
    "title": "两个字符串对比, 得出结论都做了什么操作, 比如插入或者删除",
    "level": 3,
    "updateAt": "2023-05-23T09:20:32+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}
