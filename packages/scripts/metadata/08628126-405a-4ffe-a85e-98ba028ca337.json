{
  "data": {
    "id": 2504,
    "exerciseKey": "08628126-405a-4ffe-a85e-98ba028ca337",
    "category": "QA",
    "renderType": "md",
    "title": " 说说对 XMLHttpRequest 对象的了解",
    "desc": "",
    "options": "",
    "explanation": "`XMLHttpRequest` 对象用于在浏览器中发起异步 HTTP 请求，以便与服务器进行数据交换，而无需重新加载整个页面。\n\n**主要功能**：\n1. **发起请求**：支持 GET、POST、PUT、DELETE 等 HTTP 方法。\n2. **异步处理**：可以以异步方式发送请求，避免阻塞用户界面。\n3. **处理响应**：能够接收服务器返回的数据，并根据需要处理，比如更新页面内容。\n4. **事件处理**：支持 `onreadystatechange` 事件，用于在请求状态变化时执行回调函数。常用的 `readyState` 属性值包括 0（未初始化）、1（加载中）、2（加载完成）、3（交互中）、4（完成）。\n\n**常用方法**：\n- `open(method, url, async, user, password)`：配置请求。\n- `send(body)`：发送请求，可以包含数据。\n- `setRequestHeader(header, value)`：设置请求头部。\n- `abort()`：取消请求。\n\n**常用属性**：\n- `status`：返回 HTTP 状态码（如 200、404）。\n- `statusText`：返回状态文本描述。\n- `responseText`：返回响应内容（文本形式）。\n- `responseXML`：返回响应内容（XML 形式）。\n\n**优缺点**：\n- **优点**：\n  - **异步处理**：提高用户体验，不需要刷新页面。\n  - **灵活性**：支持多种 HTTP 方法和数据格式。\n- **缺点**：\n  - **复杂性**：处理异步请求时，代码可能变得复杂。\n  - **安全性**：容易受跨域问题影响，需要处理跨域请求。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-21T01:09:22.000Z",
    "isCollected": false,
    "currentIndex": 183,
    "filterTotalNum": 1487,
    "prev": "288dff7b-c027-4c10-9a1c-7efcecaaf650",
    "next": "8ac65ba5-f7d5-4d01-a6eb-2e8259850ef7"
  },
  "post": {
    "exerciseKey": "08628126-405a-4ffe-a85e-98ba028ca337",
    "category": "QA",
    "title": " 说说对 XMLHttpRequest 对象的了解",
    "level": 1,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-21T01:09:22+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}