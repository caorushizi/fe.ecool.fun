{
  "data": {
    "id": 429,
    "exerciseKey": "13f1b2b9-725c-4c16-ada0-fb050fdafe28",
    "category": "QA",
    "renderType": "html",
    "title": "设计模式的六大原则",
    "desc": null,
    "options": null,
    "explanation": "<p><strong>开放封闭原则（Open Close Principle）</strong><br/> </p><ul><li>原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化</li><li>描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。</li><li>优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</li></ul><p></p><p><strong> 里氏代换原则（Liskov Substitution Principle）</strong><br/> </p><ul><li>原则思想：使用的基类可以在任何地方使用继承的子类，完美的替换基类。</li><li>大概意思是：子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。</li><li>优点：增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</li></ul><p></p><p><strong> 依赖倒转原则（Dependence Inversion Principle）</strong><br/> </p><ul><li> 依赖倒置原则的核心思想是面向接口编程.<br/> </li><li> 依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，<br/> </li><li> 这个是开放封闭原则的基础，具体内容是：对接口编程，依赖于抽象而不依赖于具体。<br/> </li></ul><p> <strong>接口隔离原则（Interface Segregation Principle）</strong><br/> </p><ul><li>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>例如：支付类的接口和订单类的接口，需要把这俩个类别的接口变成俩个隔离的接口</li></ul><p></p><p><strong> 迪米特法则（最少知道原则）（Demeter Principle）</strong><br/> </p><ul><li>原则思想：一个对象应当对其他对象有尽可能少地了解，简称类间解耦</li><li>大概意思就是一个类尽量减少自己对其他对象的依赖，原则是低耦合，高内聚，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。</li><li>优点：低耦合，高内聚。</li></ul><p></p><p><strong> 单一职责原则（Principle of single responsibility）</strong><br/> </p><ul><li>原则思想：一个方法只负责一件事情。</li><li>描述：单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 这是常识，几乎所有程序员都会遵循这个原则。</li><li>优点：降低类和类的耦合，提高可读性，增加可维护性和可拓展性，降低可变性的风险。</li></ul><p><br/></p>",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-06T15:32:23.000Z",
    "updateAt": "2021-07-11T10:52:53.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 902,
    "prev": "879ca17c-91e6-488d-a835-d89715f382c0",
    "next": "fda596ab-16db-41ab-9e81-5a567a373d42"
  },
  "post": {
    "exerciseKey": "13f1b2b9-725c-4c16-ada0-fb050fdafe28",
    "category": "QA",
    "title": "设计模式的六大原则",
    "level": 3,
    "updateAt": "2021-07-11T10:52:53+00:00"
  },
  "tag": {
    "id": 27,
    "tagName": "设计模式",
    "type": "1",
    "exerciseCount": 7
  }
}
