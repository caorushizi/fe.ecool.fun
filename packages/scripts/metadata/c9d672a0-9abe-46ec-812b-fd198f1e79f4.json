{
  "data": {
    "id": 187,
    "exerciseKey": "c9d672a0-9abe-46ec-812b-fd198f1e79f4",
    "category": "QA",
    "renderType": "md",
    "title": "你是怎么理解ES6中Module的？使用场景有哪些？",
    "desc": null,
    "options": null,
    "explanation": "## 一、介绍\n\n模块，（Module），是能够单独命名并独立地完成一定功能的程序语句的**集合（即程序代码和数据结构的集合体）**。\n\n两个基本的特征：外部特征和内部特征\n\n- 外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能\n\n- 内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）\n\n### 为什么需要模块化\n\n- 代码抽象\n- 代码封装\n- 代码复用\n- 依赖管理\n\n如果没有模块化，我们代码会怎样？\n\n- 变量和方法不容易维护，容易污染全局作用域\n- 加载资源的方式通过script标签从上到下。\n- 依赖的环境主观逻辑偏重，代码较多就会比较复杂。\n- 大型项目资源难以维护，特别是多人合作的情况下，资源的引入会让人奔溃\n\n因此，需要一种将` JavaScript `程序模块化的机制，如\n\n- CommonJs (典型代表：node.js早期)\n- AMD (典型代表：require.js)\n- CMD (典型代表：sea.js)\n\n\n### AMD\n\n`Asynchronous ModuleDefinition`（AMD），异步模块定义，采用异步方式加载模块。所有依赖模块的语句，都定义在一个回调函数中，等到模块加载完成之后，这个回调函数才会运行\n\n代表库为`require.js`\n\n```js\n/** main.js 入口文件/主模块 **/\n// 首先用config()指定各模块路径和引用名\nrequire.config({\n  baseUrl: \"js/lib\",\n  paths: {\n    \"jquery\": \"jquery.min\",  //实际路径为js/lib/jquery.min.js\n    \"underscore\": \"underscore.min\",\n  }\n});\n// 执行基本操作\nrequire([\"jquery\",\"underscore\"],function($,_){\n  // some code here\n});\n```\n\n\n\n### CommonJs\n\n`CommonJS` 是一套 `Javascript` 模块规范，用于服务端\n\n```js\n// a.js\nmodule.exports={ foo , bar}\n\n// b.js\nconst { foo,bar } = require('./a.js')\n```\n\n其有如下特点：\n\n- 所有代码都运行在模块作用域，不会污染全局作用域\n- 模块是同步加载的，即只有加载完成，才能执行后面的操作\n- 模块在首次执行后就会缓存，再次加载只返回缓存结果，如果想要再次执行，可清除缓存\n- `require`返回的值是被输出的值的拷贝，模块内部的变化也不会影响这个值\n\n\n既然存在了`AMD`以及`CommonJs`机制，`ES6`的`Module`又有什么不一样？\n\nES6 在语言标准的层面上，实现了`Module`，即模块功能，完全可以取代 `CommonJS `和 `AMD `规范，成为浏览器和服务器通用的模块解决方案\n\n`CommonJS` 和` AMD` 模块，都只能在运行时确定这些东西。比如，`CommonJS `模块就是对象，输入时必须查找对象属性\n\n```javascript\n// CommonJS模块\nlet { stat, exists, readfile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n```\n\n`ES6`设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量\n\n```js\n// ES6模块\nimport { stat, exists, readFile } from 'fs';\n```\n\n上述代码，只加载3个方法，其他方法不加载，即 `ES6` 可以在编译时就完成模块加载\n\n由于编译加载，使得静态分析成为可能。包括现在流行的`typeScript`也是依靠静态分析实现功能\n\n\n\n## 二、使用\n\n`ES6`模块内部自动采用了严格模式，这里就不展开严格模式的限制，毕竟这是`ES5`之前就已经规定好\n\n模块功能主要由两个命令构成：\n\n- `export`：用于规定模块的对外接口\n- `import`：用于输入其他模块提供的功能\n\n\n\n### export\n\n一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用`export`关键字输出该变量\n\n```javascript\n// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n\n或 \n// 建议使用下面写法，这样能瞬间确定输出了哪些变量\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n```\n\n输出函数或类\n\n```js\nexport function multiply(x, y) {\n  return x * y;\n};\n```\n\n通过`as`可以进行输出变量的重命名\n\n```js\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n```\n\n\n\n### import\n\n使用`export`命令定义了模块的对外接口以后，其他 JS 文件就可以通过`import`命令加载这个模块\n\n```javascript\n// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n```\n\n同样如果想要输入变量起别名，通过`as`关键字\n\n```javascript\nimport { lastName as surname } from './profile.js';\n```\n\n当加载整个模块的时候，需要用到星号`*`\n\n```js\n// circle.js\nexport function area(radius) {\n  return Math.PI * radius * radius;\n}\n\nexport function circumference(radius) {\n  return 2 * Math.PI * radius;\n}\n\n// main.js\nimport * as circle from './circle';\nconsole.log(circle)   // {area:area,circumference:circumference}\n```\n\n输入的变量都是只读的，不允许修改，但是如果是对象，允许修改属性\n\n```js\nimport {a} from './xxx.js'\n\na.foo = 'hello'; // 合法操作\na = {}; // Syntax Error : 'a' is read-only;\n```\n\n不过建议即使能修改，但我们不建议。因为修改之后，我们很难差错\n\n`import`后面我们常接着`from`关键字，`from`指定模块文件的位置，可以是相对路径，也可以是绝对路径\n\n```js\nimport { a } from './a';\n```\n\n如果只有一个模块名，需要有配置文件，告诉引擎模块的位置\n\n```javascript\nimport { myMethod } from 'util';\n```\n\n在编译阶段，`import`会提升到整个模块的头部，首先执行\n\n```javascript\nfoo();\n\nimport { foo } from 'my_module';\n```\n\n多次重复执行同样的导入，只会执行一次\n\n```js\nimport 'lodash';\nimport 'lodash';\n```\n\n上面的情况，大家都能看到用户在导入模块的时候，需要知道加载的变量名和函数，否则无法加载\n\n如果不需要知道变量名或函数就完成加载，就要用到`export default`命令，为模块指定默认输出\n\n```js\n// export-default.js\nexport default function () {\n    console.log('foo');\n}\n```\n\n加载该模块的时候，`import`命令可以为该函数指定任意名字\n\n```js\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n```\n\n\n\n### 动态加载\n\n允许您仅在需要时动态加载模块，而不必预先加载所有模块，这存在明显的性能优势\n\n这个新功能允许您将`import()`作为函数调用，将其作为参数传递给模块的路径。 它返回一个 `promise`，它用一个模块对象来实现，让你可以访问该对象的导出\n\n```js\nimport('/modules/myModule.mjs')\n  .then((module) => {\n    // Do something with the module.\n  });\n```\n\n\n\n### 复合写法\n\n如果在一个模块之中，先输入后输出同一个模块，`import`语句可以与`export`语句写在一起\n\n```javascript\nexport { foo, bar } from 'my_module';\n\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n```\n\n同理能够搭配`as`、`*`搭配使用\n\n\n\n## 三、使用场景\n\n如今，`ES6`模块化已经深入我们日常项目开发中，像`vue`、`react`项目搭建项目，组件化开发处处可见，其也是依赖模块化实现\n\n`vue`组件\n\n```js\n<template>\n  <div class=\"App\">\n      组件化开发 ---- 模块化\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n</script>\n```\n\n`react`组件\n\n```js\nfunction App() {\n  return (\n    <div className=\"App\">\n\t\t组件化开发 ---- 模块化\n    </div>\n  );\n}\n\nexport default App;\n```\n\n包括完成一些复杂应用的时候，我们也可以拆分成各个模块\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:38:15.000Z",
    "updateAt": "2024-01-24T17:32:17.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 172,
    "prev": "5116f1a8-f1b2-49ec-bbfc-5550861762da",
    "next": "70db8e81-b858-4f3a-8bf9-d2bd1eb142e2"
  },
  "post": {
    "exerciseKey": "c9d672a0-9abe-46ec-812b-fd198f1e79f4",
    "category": "QA",
    "title": "你是怎么理解ES6中Module的？使用场景有哪些？",
    "level": 3,
    "updateAt": "2024-01-24T17:32:17+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}