{
  "data": {
    "id": 1868,
    "exerciseKey": "be48725a-798c-4ae8-bd7e-47197b789802",
    "category": "QA",
    "renderType": "md",
    "title": "非递归遍历二叉树",
    "desc": null,
    "options": null,
    "explanation": "二叉树使用递归实现前中后序遍历是非常容易的，本文给出非递归实现前中后序遍历的方法，核心的思想是使用一个栈，通过迭代来模拟递归的实现过程。\n\n下面实现中root代表二叉树根节点，每个节点都具有left,right两个指针，分别指向当前节点左右子树，一个val属性代表当前节点的值\n\n# 前序遍历（preorderTraversal）\n\n```javascript\nconst preorderTraversal = function(root) {\n    const stack = [], res = []\n    root && stack.push(root)\n    // 使用一个栈stack，每次首先输出栈顶元素，也就是当前二叉树根节点，之后依次输出二叉树的左孩子和右孩子\n    while(stack.length > 0) {\n        let cur = stack.pop()\n        res.push(cur.val)\n        // 先入栈的元素后输出，所以先入栈当前节点右孩子，再入栈左孩子\n        cur.right && stack.push(cur.right)\n        cur.left && stack.push(cur.left)\n    }\n    return res\n};\n```\n\n# 中序遍历（inorderTraversal）\n\n## 第一种方法\n\n```javascript\nconst inorderTraversal = function(root) {\n    const res = [], stack = []\n    while(root || stack.length) {\n        // 中序遍历，首先迭代左孩子，左孩子依次入栈\n        if(root.left) {\n            stack.push(root)\n            root = root.left\n        // 如果左孩子为空了，输出节点，去右孩子中迭代，\n        } else if(root.right) {\n            res.push(root.val)\n            root = root.right\n        // 如果左右孩子都为空了，输出当前节点，栈顶元素出栈，也就是回退到上一层，此时置空节点左孩子，防止while循环重复进入\n        } else if(!root.left && !root.right) {\n            res.push(root.val)\n            root = stack.pop()\n            root && (root.left = null)\n        }\n    }\n    return res\n};\n```\n\n## 第二种方法（第一种优化）\n\n我们在上一种方法里，条件判断`root.left`,`root.right`,其实我们可以只考虑当前节点node，这样我们只需要判断node是否存在，简化代码\n\n```javascript\n const inorderTraversal = function(root) {\n    const res = [], stack = []\n    let node = root;\n    while (stack.length > 0 || node !== null) {\n        // 这里用当前节点node是否存在，简化代码，\n        if (node) {\n            stack.push(node);\n            node = node.left\n        } else {\n            node = stack.pop();\n            res.push(node.val);\n            node = node.right;\n        }\n    }\n    return res;\n};\n```\n\n# 后序遍历（postorderTraversal）\n\n## 第一种方法\n\n```javascript\n// 1, 先依次遍历左孩子, 在栈中依次记录，当左孩子为空时，遍历到叶子节点 //跳回上一层节点, 为防止while循环重复进入，将上一层左孩子置为空\n// 2, 接着遍历右孩子, 在栈中依次记录值，当右孩子为空时, 遍历到叶子节点\n// 跳回上一层节点, 为防止while循环重复进入，将上一层右孩子置为空\nconst postorderTraversal = function(root) {\n    let res = [], stack = []\n    while (root || stack.length) {\n        if (root.left) {\n            stack.push(root)\n            root = root.left\n        } else if (root.right) {\n            stack.push(root)\n            root = root.right\n        } else {\n            res.push(root.val)\n            root = stack.pop()\n            if (root && root.left) root.left = null\n            else if (root && root.right) root.right = null\n        }\n    }\n    return res\n};\n```\n\n## 第二种方法（逆序思维）\n\n再回头看看前序遍历的代码，实际上后序遍历和前序遍历是一个逆序过程\n\n```javascript\n// 结果数组中依次进入的是节点的左孩子，右孩子，节点本身，注意使用的是\n// unshift，与前序遍历push不同，每次数组头部添加元素，实际上就是前序 遍历的逆序过程\nconst postorderTraversal = function(root) {\n    const res = [], stack = []\n    while (root || stack.length) {\n        res.unshift(root.val)\n        root.left && stack.push(root.left)\n        root.right && stack.push(root.right)\n        root = stack.pop()\n    }\n    return res\n};\n```\n\n## 第三种方法（逆序思维的另一种写法）\n\n```javascript\n// 和前序遍历区别在于，结果数组res中入栈顺序是当前节点，右孩子，左孩子，最后\n// 使用js数组reverse方法反转（逆序），使得输出顺序变为左孩子，右孩子，当前节点，实现后序遍历\nconst postorderTraversal = function(root) {\n    let stack = [], res = []\n    root && stack.push(root)\n    while(stack.length > 0) {\n        let cur = stack.pop()\n        res.push(cur.val)\n        cur.left && stack.push(cur.left)\n        cur.right && stack.push(cur.right)\n    }\n    return res.reverse()\n};\n```\n\n本文详细介绍了二叉树前中后序遍历的非递归实现，核心是借助一个栈stack,使用迭代的方式模拟递归过程",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-08-07T14:42:03.000Z",
    "updateAt": "2022-10-12T09:09:23.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 471,
    "prev": "d281c552-c5d1-4d42-b2fa-0e0774884bbf",
    "next": "45f892d7-8da0-4fd9-8550-8a7865cfcd43"
  },
  "post": {
    "exerciseKey": "be48725a-798c-4ae8-bd7e-47197b789802",
    "category": "QA",
    "title": "非递归遍历二叉树",
    "level": 2,
    "updateAt": "2022-10-12T09:09:23+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
