{
  "data": {
    "id": 1643,
    "exerciseKey": "d7dc9c83-0fa2-4510-b098-e92de7637209",
    "category": "QA",
    "renderType": "md",
    "title": "为什么 useState 返回的是数组而不是对象？",
    "desc": null,
    "options": null,
    "explanation": "useState 的用法：\n\n```js\nconst [count, setCount] = useState(0)\n```\n\n可以看到 useState 返回的是一个数组，那么为什么是返回数组而不是返回对象呢？\n\n要回答这个问题得弄明白 ES6 的解构赋值(destructring assignment)语法 , 来看 2 个简单的示例：\n\n* 数组的解构赋值：\n\n```js\nconst foo = ['one', 'two', 'three'];\n\nconst [red, yellow, green] = foo;\nconsole.log(red); // \"one\"\nconsole.log(yellow); // \"two\"\nconsole.log(green); // \"three\"\n```\n\n* 对象的解构赋值：\n\n```js\nconst user = {\n    id: 42,\n    is_verified: true\n};\n\nconst { id, is_verified } = user;\n\nconsole.log(id); // 42\nconsole.log(is_verified); // true \n```\n\n搞清楚了解构赋值，那上面的问题就比较好解释了。\n\n如果 `useState` 返回数组，那么你可以顺便对数组中的变量命名，代码看起来也比较干净。而如果是对象的话返回的值必须和 `useState` 内部实现返回的对象同名，这样你只能在 `function component` 中使用一次，想要多次使用 `useState` 必须得重命名返回值。\n\n```js\n// 第一次使用\nconst { state, setState } = useState(false)\n// 第二次使用\nconst { state: counter, setState: setCounter} = useState(0)\n```\n\n当然事情总是有两面性的，使用 array 也存在一些问题：\n\n* 返回值强顺序，灵活性比较低。array[0] 为值，array[1] 为改变值的方法。\n* 返回的值基本都得使用，对于有些返回值不想使用的话代码看起来有些怪，比如只想用 setState, 就得这么写：`const [, setState] = useState(false)`。\n* 返回的参数不能太多，否则处理上面 2 个场景会很麻烦。\n\n如果在自定义的Hook中遇到了以上几个问题，不妨试试返回 object。\n\n简单总结一下，在自定义 hook 的时候可以遵循一个简单原则：当参数大于 2 个的时候返回值的类型返回 `object`， 否则返回数组。\n\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 3.5,
    "appId": 7,
    "createAt": "2022-01-16T14:55:35.000Z",
    "updateAt": "2024-08-10T19:51:02.000Z",
    "isCollected": false,
    "currentIndex": 726,
    "filterTotalNum": 1487,
    "prev": "559aab33-1ef2-4fb1-bdba-2233423fb845",
    "next": "2476ee50-e484-4416-88a7-4c506f84de9a"
  },
  "post": {
    "exerciseKey": "d7dc9c83-0fa2-4510-b098-e92de7637209",
    "category": "QA",
    "title": "为什么 useState 返回的是数组而不是对象？",
    "level": 3.5,
    "createAt": "2022-01-16T14:55:35+00:00",
    "updateAt": "2024-08-10T19:51:02+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}