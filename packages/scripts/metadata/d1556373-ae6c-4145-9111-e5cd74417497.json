{
  "data": {
    "id": 1906,
    "exerciseKey": "d1556373-ae6c-4145-9111-e5cd74417497",
    "category": "QA",
    "renderType": "md",
    "title": "只出现一次的数字",
    "desc": "给定一个**非空**整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\n**说明：**\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n**示例 1:**\n\n**输入:** [2,2,1]\n\n**输出:** 1\n\n**示例 2:**\n\n**输入:** [4,1,2,1,2]\n\n**输出:** 4\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n\n};\n```",
    "options": null,
    "explanation": " ### 思路\n\n- 标签：位运算\n- 本题根据题意，线性时间复杂度 `O(n)`，很容易想到使用 Hash 映射来进行计算，遍历一次后结束得到结果，但是在空间复杂度上会达到 `O(n)`，需要使用较多的额外空间\n- 既满足时间复杂度又满足空间复杂度，就要提到位运算中的异或运算 XOR，主要因为异或运算有以下几个特点：\n  - 一个数和 0 做 XOR 运算等于本身：a⊕0 = a\n  - 一个数和其本身做 XOR 运算等于 0：a⊕a = 0\n  - XOR 运算满足交换律和结合律：a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b\n- 故而在以上的基础条件上，将所有数字按照顺序做抑或运算，最后剩下的结果即为唯一的数字\n- 时间复杂度：`O(n)`，空间复杂度：`O(1)`\n\n### 代码\n\n```JavaScript\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    let ans = 0;\n    for(const num of nums) {\n        ans ^= num;\n    }\n    return ans;\n};\n```\n",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2022-10-10T12:40:15.000Z",
    "updateAt": "2023-05-30T09:45:14.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 356,
    "prev": "01c53308-5633-49ba-b528-7d55cee5aa12",
    "next": "e414a927-8d10-41e9-a56d-70493aff652d"
  },
  "post": {
    "exerciseKey": "d1556373-ae6c-4145-9111-e5cd74417497",
    "category": "QA",
    "title": "只出现一次的数字",
    "level": 1,
    "updateAt": "2023-05-30T09:45:14+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}