{
  "data": {
    "id": 1954,
    "exerciseKey": "b9ca2e1f-d720-4b6a-ab77-acc5edd03c99",
    "category": "QA",
    "renderType": "md",
    "title": "树转数组",
    "desc": "将以下结构的数据转成数组。\n\n```js\nconst listTree = [\n  {\n    id: 1,\n    name: '部门1',\n    pid: 0,\n    children: [\n      {\n        id: 2,\n        name: '部门1-1',\n        pid: 1,\n        children: [\n          {\n            id: 4, \n            name: '部门1-1-1', \n            pid: 2,\n            children: []\n          }\n        ]\n      },\n      {\n        id: 3,\n        name: '部门1-2',\n        pid: 1,\n        children: [\n          {\n            id: 5, \n            name: '部门1-2-1', \n            pid: 3,\n            children: []\n          }\n        ]\n      }\n    ]\n  },\n  {\n    id: 6,\n    name: '部门2',\n    pid: 0,\n    children: [\n      {\n        id: 7, \n        name: '部门2-1', \n        pid: 6,\n        children: []\n      }\n    ]\n  },\n  {\n    id: 8,\n    name: '部门3',\n    pid: 0,\n    children: []\n  }\n]\n```\n\n期望结果：\n\n```js\nconst list = [\n  {id: 1, name: '部门1', pid: 0},\n  {id: 2, name: '部门1-1', pid: 1},\n  {id: 3, name: '部门1-2', pid: 1},\n  {id: 4, name: '部门1-1-1', pid: 2},\n  {id: 5, name: '部门1-2-1', pid: 3},\n  {id: 6, name: '部门2', pid: 0},\n  {id: 7, name: '部门2-1', pid: 6},\n  {id: 8, name: '部门3', pid: 0},\n]\n```",
    "options": null,
    "explanation": "## reduce取树行数据的所有子集\n```js\nfunction treeTransList(tree, key) {\n  return tree.reduce(function(con, item) {\n    var callee = arguments.callee;\n    con.push(item);\n    if (item[key] && item[key].length >0)\n      item[key].reduce(callee, con);\n    return con;\n  }, []).map(function(item){\n    item[key] = [];\n    return item;\n  })\n}\ntreeTransList(listTree, 'children')\n```\n## 递归实现\n```js\nfunction getItem(tree, result) {\n  for (let i = 0; i < tree.length; i++) {\n    if(tree[i].children) {\n      getItem(tree[i].children, result)\n      delete tree[i].children;\n    }\n    result.push(tree[i])\n  }\n  return result;\n}\n\nfunction treeToList(tree) {\n  const result = [];\n  getItem(tree, result);\n  return result;\n}\ntreeToList(listTree)\n```\n\n## 广度优先遍历法\n```js\nfunction treeToList(tree, childName = 'children') {\n  // 设置临时数组，用来存放队列\n  let queen = [];\n  // 设置输出数组，用来存放要输出的一维数组\n  const result = [];\n  queen = queen.concat(tree);\n  // 对树对象进行广度优先的遍历\n  while(queen.length) {\n    const first = queen.shift();\n    if (first[childName]) {\n      queen = queen.concat(first[childName]);\n      delete first[childName]\n    }\n    result.push(first);\n  }\n  return result;\n}  \ntreeToList(listTree, 'children')\n```",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2023-03-27T01:41:55.000Z",
    "updateAt": "2023-08-20T21:21:17.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 296,
    "prev": "94b843ea-1ede-4fa4-81ae-a92e612b4439",
    "next": "1ea3a239-c8a8-4922-83a6-00e311bb6df3"
  },
  "post": {
    "exerciseKey": "b9ca2e1f-d720-4b6a-ab77-acc5edd03c99",
    "category": "QA",
    "title": "树转数组",
    "level": 2,
    "updateAt": "2023-08-20T21:21:17+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}
