{
  "data": {
    "id": 259,
    "exerciseKey": "c1ee1a9b-5955-4dc1-a89d-2ce7b017616a",
    "category": "QA",
    "renderType": "md",
    "title": "Vue 3.0中Treeshaking特性是什么，并举例进行说明？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n`Tree shaking` 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 `Dead code elimination`\n\n简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码\n\n如果把代码打包比作制作蛋糕，传统的方式是把鸡蛋（带壳）全部丢进去搅拌，然后放入烤箱，最后把（没有用的）蛋壳全部挑选并剔除出去\n\n而` treeshaking `则是一开始就把有用的蛋白蛋黄（import）放入搅拌，最后直接作出蛋糕\n\n也就是说 ，`tree shaking` 其实是找出使用的代码\n\n在`Vue2`中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是`Vue`实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到\n\n```js\nimport Vue from 'vue'\n \nVue.nextTick(() => {})\n```\n\n而`Vue3`源码引入`tree shaking`特性，将全局 API 进行分块。如果您不使用其某些功能，它们将不会包含在您的基础包中\n\n```js\nimport { nextTick, observable } from 'vue'\n \nnextTick(() => {})\n```\n\n\n\n## 二、如何做\n\n`Tree shaking`是基于`ES6`模板语法（`import`与`export`），主要是借助`ES6`模块的静态编译思想，在编译时就能确定模块的依赖关系，以及输入和输出的变量\n\n`Tree shaking`无非就是做了两件事：\n\n- 编译阶段利用`ES6 Module`判断哪些模块已经加载\n- 判断那些模块和变量未被使用或者引用，进而删除对应代码\n\n下面就来举个例子：\n\n通过脚手架`vue-cli`安装`Vue2`与`Vue3`项目\n\n```c\nvue create vue-demo\n```\n\n### Vue2 项目\n\n组件中使用`data`属性\n\n```vue\n<script>\n    export default {\n        data: () => ({\n            count: 1,\n        }),\n    };\n</script>\n```\n\n对项目进行打包，体积如下图\n\n![](https://static.ecool.fun//article/e298c1f6-7390-4d24-a25a-8d93cdb45fec.png)\n\n为组件设置其他属性（`compted`、`watch`）\n\n```js\nexport default {\n    data: () => ({\n        question:\"\", \n        count: 1,\n    }),\n    computed: {\n        double: function () {\n            return this.count * 2;\n        },\n    },\n    watch: {\n        question: function (newQuestion, oldQuestion) {\n            this.answer = 'xxxx'\n        }\n};\n```\n\n再一次打包，发现打包出来的体积并没有变化\n\n![](https://static.ecool.fun//article/a6a130d6-001e-4ef4-b347-59cdeb6b2d63.png)\n\n\n\n### Vue3 项目\n\n组件中简单使用\n\n```js\nimport { reactive, defineComponent } from \"vue\";\nexport default defineComponent({\n  setup() {\n    const state = reactive({\n      count: 1,\n    });\n    return {\n      state,\n    };\n  },\n});\n```\n\n将项目进行打包\n\n![](https://static.ecool.fun//article/b8da6cec-2639-4cda-a399-920d0863ebe5.png)\n\n在组件中引入`computed`和`watch`\n\n```js\nimport { reactive, defineComponent, computed, watch } from \"vue\";\nexport default defineComponent({\n  setup() {\n    const state = reactive({\n      count: 1,\n    });\n    const double = computed(() => {\n      return state.count * 2;\n    });\n\n    watch(\n      () => state.count,\n      (count, preCount) => {\n        console.log(count);\n        console.log(preCount);\n      }\n    );\n    return {\n      state,\n      double,\n    };\n  },\n});\n```\n\n再次对项目进行打包，可以看到在引入`computer`和`watch`之后，项目整体体积变大了\n\n ![](https://static.ecool.fun//article/fb53f810-4993-409a-b295-20ae93c11028.png)\n\n\n\n## 三、作用\n\n通过`Tree shaking`，`Vue3`给我们带来的好处是：\n\n- 减少程序体积（更小）\n- 减少程序执行时间（更快）\n- 便于将来对程序架构进行优化（更友好）\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:55:04.000Z",
    "updateAt": "2024-01-25T17:39:31.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 117,
    "prev": "55ba9331-1165-4b0e-baba-dc9a6378a8fb",
    "next": "3707a3b3-2330-4833-9c9b-b427887f8ee9"
  },
  "post": {
    "exerciseKey": "c1ee1a9b-5955-4dc1-a89d-2ce7b017616a",
    "category": "QA",
    "title": "Vue 3.0中Treeshaking特性是什么，并举例进行说明？",
    "level": 3,
    "updateAt": "2024-01-25T17:39:31+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
