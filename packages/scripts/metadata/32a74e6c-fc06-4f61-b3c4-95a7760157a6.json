{
  "data": {
    "id": 2455,
    "exerciseKey": "32a74e6c-fc06-4f61-b3c4-95a7760157a6",
    "category": "QA",
    "renderType": "md",
    "title": "原型链的终点是什么？",
    "desc": "",
    "options": "",
    "explanation": "原型链的终点是 `Object.prototype`。\n\n在 JavaScript 中，所有对象的原型链最终都会归结到 `Object.prototype`，这是原型链的最后一个环节。\n\n### 原型链的结构\n\n1. **对象实例**：每个 JavaScript 对象都有一个内部属性 `[[Prototype]]`（在代码中通过 `__proto__` 或 `Object.getPrototypeOf` 可以访问），这个属性指向该对象的原型。\n\n2. **构造函数的原型**：构造函数创建的对象实例的原型指向构造函数的 `prototype` 对象。例如：\n   ```javascript\n   function Person(name) {\n       this.name = name;\n   }\n\n   const john = new Person('John');\n   ```\n\n   在这个例子中，`john` 的原型指向 `Person.prototype`。\n\n3. **`Object.prototype`**：每个对象的原型链最终都会指向 `Object.prototype`。这是 JavaScript 原型链的终点。`Object.prototype` 是所有对象的共同祖先，它提供了所有对象共有的属性和方法，如 `toString`, `hasOwnProperty` 等。\n\n4. **`null`**：`Object.prototype` 的 `[[Prototype]]` 是 `null`，这是原型链的终点。`null` 表示没有更多的原型链。\n\n### 原型链的终点示例\n\n```javascript\nconst obj = {};\n\n// 访问 obj 的原型\nconsole.log(Object.getPrototypeOf(obj)); // 输出: {}\nconsole.log(Object.getPrototypeOf(Object.getPrototypeOf(obj))); // 输出: null\n```\n\n在上面的代码中，`Object.getPrototypeOf(obj)` 返回 `Object.prototype`，而 `Object.getPrototypeOf(Object.prototype)` 返回 `null`，标志着原型链的终点。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-23T05:17:17.000Z",
    "isCollected": false,
    "currentIndex": 207,
    "filterTotalNum": 1487,
    "prev": "55beb2ca-b7a6-4c28-8f75-14d43e2bda4a",
    "next": "56ea667a-50f3-424e-9ed7-9ac28cddf197"
  },
  "post": {
    "exerciseKey": "32a74e6c-fc06-4f61-b3c4-95a7760157a6",
    "category": "QA",
    "title": "原型链的终点是什么？",
    "level": 1,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-23T05:17:17+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}