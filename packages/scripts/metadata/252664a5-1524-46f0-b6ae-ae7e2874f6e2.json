{
  "data": {
    "id": 1858,
    "exerciseKey": "252664a5-1524-46f0-b6ae-ae7e2874f6e2",
    "category": "QA",
    "renderType": "md",
    "title": "开发的过程中你用到过哪些设计模式？",
    "desc": null,
    "options": null,
    "explanation": "设计模式是一种被广泛接受并经过验证的面向对象软件开发中的最佳实践。它们提供了一套解决常见问题的可重用设计方案。\n\n以下是一些常用的设计模式：\n\n1. **单例模式（Singleton）**：确保一个类只有一个实例，并提供全局访问点来获取该实例。\n\n2. **工厂模式（Factory）**：通过工厂方法创建对象，而不是直接使用`new`操作符。这样可以隐藏具体实现，并根据需要创建所需类型的对象。\n\n3. **观察者模式（Observer）**：定义了一种一对多的依赖关系，当一个对象状态发生改变时，它的所有依赖者（观察者）都会收到通知并自动更新。\n\n4. **装饰器模式（Decorator）**：动态地将责任附加到对象上。通过将对象包装在装饰器对象中，可以在运行时为对象添加新的行为。\n\n5. **策略模式（Strategy）**：定义了一系列算法，将每个算法封装起来并使它们可以相互替换。策略模式可以让算法独立于客户端而变化。\n\n6. **适配器模式（Adapter）**：将一个类的接口转换成客户端所期望的另一个接口。适配器模式使得原本由于接口不匹配而无法一起工作的类可以协同工作。\n\n每个设计模式都有其特定的应用场景和优缺点，可以根据具体情况来选择使用。设计模式可以提高代码结构的灵活性、可维护性和可扩展性，并促进重用和解耦。然而，需要根据实际需求慎重选择和应用设计模式，避免过度设计或不必要的复杂性。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-07-24T02:49:59.000Z",
    "updateAt": "2023-12-17T18:13:23.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 265,
    "prev": "7ae57c4b-d6e0-443b-a7f6-8f2a1fdec82c",
    "next": "c7505e46-4e58-4d34-b27d-b022c244cfad"
  },
  "post": {
    "exerciseKey": "252664a5-1524-46f0-b6ae-ae7e2874f6e2",
    "category": "QA",
    "title": "开发的过程中你用到过哪些设计模式？",
    "level": 3,
    "updateAt": "2023-12-17T18:13:23+00:00"
  },
  "tag": {
    "id": 27,
    "tagName": "设计模式",
    "type": "1",
    "exerciseCount": 7
  }
}
