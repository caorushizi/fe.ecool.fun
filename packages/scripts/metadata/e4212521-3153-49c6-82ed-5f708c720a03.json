{
  "data": {
    "id": 2533,
    "exerciseKey": "e4212521-3153-49c6-82ed-5f708c720a03",
    "category": "QA",
    "renderType": "md",
    "title": "Object.prototype.hasOwnProperty() 作用是什么？",
    "desc": "",
    "options": "",
    "explanation": "`Object.prototype.hasOwnProperty()` 是一个用于检查对象是否具有某个指定的自有属性的方法。这个方法的作用是确认对象自身是否包含某个属性，而不是通过原型链继承的属性。\n\n### **作用**\n\n- **检查自有属性**：`hasOwnProperty` 只检查对象自身是否具有指定的属性，不会检查原型链上的属性。\n- **防止属性冲突**：在遍历对象属性时（如使用 `for...in` 循环），可以使用 `hasOwnProperty` 来过滤掉从原型链继承来的属性，确保只处理对象自身的属性。\n\n### **用法示例**\n\n```javascript\nconst obj = {\n  name: 'John',\n  age: 30\n};\n\nconsole.log(obj.hasOwnProperty('name')); // true\nconsole.log(obj.hasOwnProperty('age'));  // true\nconsole.log(obj.hasOwnProperty('toString')); // false, 'toString' 是从原型链继承来的属性\n```\n\n### **注意**\n\n- 这个方法不检查属性的值，只检查属性的存在性。\n- `hasOwnProperty` 也是 `Object.prototype` 上的方法，因此可以在任何对象上使用，前提是不要重写或遮蔽这个方法。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-16T12:07:26.000Z",
    "isCollected": false,
    "currentIndex": 173,
    "filterTotalNum": 1487,
    "prev": "aca0e222-cb95-4ea8-a763-fd9a0fa65f28",
    "next": "9c1de688-32b0-4672-9ac7-c30c86b70b79"
  },
  "post": {
    "exerciseKey": "e4212521-3153-49c6-82ed-5f708c720a03",
    "category": "QA",
    "title": "Object.prototype.hasOwnProperty() 作用是什么？",
    "level": 1,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-16T12:07:26+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}