{
  "data": {
    "id": 149,
    "exerciseKey": "8313f0e7-db8e-4ecd-bf57-099dca7656fb",
    "category": "Choice",
    "renderType": "md",
    "title": "向对象 person 添加什么时，可以通过执行 [...person] 获得类似 [\"Lydia Hallie\", 21] 的输出？",
    "desc": "```javascript\nconst person = {\n  name: \"Lydia Hallie\",\n  age: 21\n}\n\n[...person] // [\"Lydia Hallie\", 21]\n```",
    "options": "{\"options\":[\"不需要，对象默认就是可迭代的\",\"*[Symbol.iterator]() { for (let x in this) yield this[x] }\",\"*[Symbol.iterator]() { for (let x in this) yield* Object.values(this) }\",\"*[Symbol.iterator]() { for (let x in this) yield this }\"],\"isMulti\":false,\"answer\":[1]}",
    "explanation": "对象默认并不是可迭代的。\n\n如果迭代规则被定义，则一个对象是可迭代的（An iterable is an iterable if the iterator protocol is present）。\n\n我们可以通过添加迭代器symbol `[Symbol.iterator]` 来定义迭代规则，其返回一个 generator 对象，比如说构建一个 generator 函数 `*[Symbol.iterator]() {}`。\n\n如果我们想要返回数组 `[\"Lydia Hallie\", 21]`: `yield* Object.values(this)`，这个 generator 函数一定要 yield 对象 `person` 的 values 。\n\n另外，本题还需要注意的一个点：\n\n* yield 关键字用来暂停和恢复一个生成器函数（function*）\n* yield* 表达式用于委托给另一个 generator 或可迭代对象。\n\n```js\nconst person = {\n  name: 'lzh',\n  age: 21\n}\n\n// 方法一\nperson[Symbol.iterator] = function* () {\n    yield* Object.values(this)\n}\n\n// 方法二\nperson[Symbol.iterator] = function* () {\n  for (let x in this) {\n  \tyield this[x] \n  }\n}\n\nconsole.log([...person]); //['lzh', 21]\n```",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-02T15:33:04.000Z",
    "updateAt": "2023-03-03T20:23:41.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 445,
    "prev": "17555ccc-83cf-4f7e-9834-8c1bb749e7d7",
    "next": "56e56a05-99c7-4701-ae72-e06d2c6a4d42"
  },
  "post": {
    "exerciseKey": "8313f0e7-db8e-4ecd-bf57-099dca7656fb",
    "category": "Choice",
    "title": "向对象 person 添加什么时，可以通过执行 [...person] 获得类似 [\"Lydia Hallie\", 21] 的输出？",
    "level": 2,
    "updateAt": "2023-03-03T20:23:41+00:00"
  },
  "tag": {
    "id": 32,
    "tagName": "选择题",
    "type": "1",
    "exerciseCount": 151
  }
}