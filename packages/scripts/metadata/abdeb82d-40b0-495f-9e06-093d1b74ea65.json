{
  "data": {
    "id": 2871,
    "exerciseKey": "abdeb82d-40b0-495f-9e06-093d1b74ea65",
    "category": "QA",
    "renderType": "md",
    "title": "async/await 原理， 手写 async 函数？",
    "desc": "",
    "options": "",
    "explanation": "## async/await 的本质\n\nasync/await 是 ECMAScript 2017（ES8）中引入的一个语言特性，用于处理异步编程。async/await 实际上是对 Promise 的封装，通过让开发者以同步的方式编写异步代码，使得代码更加易读和易于维护。\n\nasync/await 是一种更加高级的异步编程方式，它使用了 Promise 作为底层实现，可以更好地处理异步编程中的错误和异常，避免了回调地狱和代码可读性差的问题。\n\n## 手写 async/await 实现\n\nasync/await 的实现可以通过封装 Promise 和 Generator 函数来实现，下面是一个简单的手写实现示例：\n```js\nfunction delay(ms) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n}\n\nfunction* generator() {\n  console.log(\"start\");\n  yield delay(1000);\n  console.log(\"after 1 second\");\n  yield delay(2000);\n  console.log(\"after 2 more seconds\");\n}\n\nfunction async(generatorFunc) {\n  const iterator = generatorFunc();\n\n  function handle(iteratorResult) {\n    if (iteratorResult.done) {\n      return Promise.resolve(iteratorResult.value);\n    }\n\n    return Promise.resolve(iteratorResult.value).then((res) => {\n      return handle(iterator.next(res));\n    });\n  }\n\n  return handle(iterator.next());\n}\n\nasync(function () {\n  return generator();\n}).then(() => {\n  console.log(\"all done\");\n});\n```\n\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:45.000Z",
    "updateAt": "2024-08-14T12:03:19.000Z",
    "isCollected": false,
    "currentIndex": 15,
    "filterTotalNum": 1487,
    "prev": "d0fd3a52-1ddf-42b2-b9d8-f36fc885d237",
    "next": "5ee52126-6153-4409-a930-a01d2d313605"
  },
  "post": {
    "exerciseKey": "abdeb82d-40b0-495f-9e06-093d1b74ea65",
    "category": "QA",
    "title": "async/await 原理， 手写 async 函数？",
    "level": 3,
    "createAt": "2024-08-13T08:30:45+00:00",
    "updateAt": "2024-08-14T12:03:19+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}