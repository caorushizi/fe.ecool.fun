{
  "data": {
    "id": 1958,
    "exerciseKey": "212703a8-43a2-426e-b9c4-b51053436d23",
    "category": "QA",
    "renderType": "md",
    "title": "页面加载的过程中，JS 文件是不是一定会阻塞 DOM 和 CSSOM 的构建？\n\n",
    "desc": null,
    "options": null,
    "explanation": "答案：**不一定**\n\nJavaScript阻塞DOM和CSSOM的构建的情况主要集中在以下两个方面：\n\n* JavaScript文件被放置在head标签内部\n\n当JavaScript文件被放置在head标签内部时，浏览器会先加载JavaScript文件并执行它，然后才会继续解析HTML文档。因此，如果JavaScript文件过大或服务器响应时间过长，就会导致页面一直处于等待状态，进而影响DOM和CSSOM的构建。\n\n* JavaScript代码修改了DOM结构\n\n在JavaScript代码执行时，如果对DOM结构进行了修改，那么浏览器需要重新计算布局（reflow）和重绘（repaint），这个过程会较为耗时，并且会阻塞DOM和CSSOM的构建。\n\n除此之外，还有一些情况下JavaScript并不会阻塞DOM和CSSOM的构建：\n\n* 通过设置 script 标签的 async 、defer 属性避免阻塞DOM和CSSOM的构建\n\t* **async**：异步加载JavaScript文件，脚本的下载和执行将与其他工作同时进行（例如从服务器请求其他资源、渲染页面等），而不必等到脚本下载完成才开始这些操作。因此，在使用 async 属性时，脚本的加载和执行是异步的，并且不保证脚本在页面中的顺序。\n\t* **defer属性** ：属性也告诉浏览器立即下载脚本文件，但有一个重要的区别：当文档解析时，脚本不会执行，直到文档解析完成后才执行。这意味着脚本将按照它们在页面上出现的顺序执行，并且在执行之前，整个文档已经被解析完毕了。\n* Web Workers ：Web Workers 是一种运行在后台线程的JavaScript脚本，它不会阻塞DOM和CSSOM的构建，并且可以利用多核CPU提高JavaScript代码执行速度。\n\n## 总结\n\n在一定情况下，JavaScript的执行会阻塞DOM和CSSOM的构建。\n\n但是，在实际应用中，我们可以通过设置 script 标签的 async、defer 属性、使用Web Workers等方式来避免这个问题。",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2023-04-23T12:23:40.000Z",
    "updateAt": "2024-08-10T17:07:13.000Z",
    "isCollected": false,
    "currentIndex": 431,
    "filterTotalNum": 1487,
    "prev": "0e76f42e-3479-4aea-b00b-2388fd5ed8de",
    "next": "e0f87b60-68d6-4ac6-9db9-eb35a0a6bc62"
  },
  "post": {
    "exerciseKey": "212703a8-43a2-426e-b9c4-b51053436d23",
    "category": "QA",
    "title": "页面加载的过程中，JS 文件是不是一定会阻塞 DOM 和 CSSOM 的构建？\n\n",
    "level": 3,
    "createAt": "2023-04-23T12:23:40+00:00",
    "updateAt": "2024-08-10T17:07:13+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}