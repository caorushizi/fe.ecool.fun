{
  "data": {
    "id": 63,
    "exerciseKey": "5fd03a9b-274c-4ea1-be11-e9b042022693",
    "category": "Choice",
    "renderType": "md",
    "title": "输出是什么?",
    "desc": "```javascript\nconst name = \"Lydia\";\nage = 21;\n\nconsole.log(delete name);\nconsole.log(delete age);\n```",
    "options": "{\"options\":[\"false, true\",\"\\\"Lydia\\\", 21\",\"true, true\",\"undefined, undefined\"],\"isMulti\":false,\"answer\":[0]}",
    "explanation": "`delete` 操作符用于删除对象的某个属性；如果没有指向这个属性的引用，那它最终会被释放。\n\n`delete`操作符返回一个布尔值： `true`指删除成功，否则返回`false`。但是通过 `var`, `const` 或 `let` 关键字声明的变量无法用 `delete` 操作符来删除。\n\n`name`变量由`const`关键字声明，所以删除不成功:返回 `false`。\n\n而我们设定`age`等于`21`时,我们实际上添加了一个名为`age`的属性给全局对象。对象中的属性是可以删除的，全局对象也是如此，所以`delete age`返回`true`.\n\n----\n\n20230201 更新：\n\n有同学反馈， ”var 定义的变量可以使用 delete 操作符删除“，其实这个理解是错误的，大家可以直接试验，\n\n```js\nvar a = 2\ndelete a  // false\n```\n\n而且 MDN 上也对 delete 的一些特殊情况有说明：\n\n* 如果你试图删除的属性不存在，那么 delete 将不会起任何作用，但仍会返回 true\n* 如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性（也就是说，`delete` 操作只会在自身的属性上起作用）\n* 任何使用 var 声明的属性不能从全局作用域或函数的作用域中删除。\n\t* 这样的话，delete 操作不能删除任何在全局作用域中的函数（无论这个函数是来自于函数声明或函数表达式）\n\t* 除了在全局作用域中的函数不能被删除，在对象 (`object`) 中的函数是能够用 delete 操作删除的。\n* 任何用 `let` 或 `const` 声明的属性不能够从它被声明的作用域中删除。\n* 不可设置的 (`Non-configurable`) 属性不能被移除。这意味着像 `Math, Array, Object` 内置对象的属性以及使用`Object.defineProperty()` 方法设置为不可设置的属性不能被删除。",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-02T15:33:04.000Z",
    "updateAt": "2023-02-01T17:43:51.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 454,
    "prev": "6c0d11e8-a6cf-4f70-af8b-17f0490f36e2",
    "next": "79fe443f-0556-4359-8e05-804161ac48ef"
  },
  "post": {
    "exerciseKey": "5fd03a9b-274c-4ea1-be11-e9b042022693",
    "category": "Choice",
    "title": "输出是什么?",
    "level": 1,
    "updateAt": "2023-02-01T17:43:51+00:00"
  },
  "tag": {
    "id": 32,
    "tagName": "选择题",
    "type": "1",
    "exerciseCount": 151
  }
}
