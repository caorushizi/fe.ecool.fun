{
  "data": {
    "id": 428,
    "exerciseKey": "fda596ab-16db-41ab-9e81-5a567a373d42",
    "category": "QA",
    "renderType": "md",
    "title": "css加载会造成阻塞吗？",
    "desc": null,
    "options": null,
    "explanation": "先说下结论：\n\n* css加载不会阻塞DOM树的解析\n* css加载会阻塞DOM树的渲染\n* css加载会阻塞后面js语句的执行\n\n为了避免让用户看到长时间的白屏时间，我们应该尽可能的提高css加载速度，比如可以使用以下几种方法:\n\n* 使用CDN(因为CDN会根据你的网络状况，替你挑选最近的一个具有缓存内容的节点为你提供资源，因此可以减少加载时间)\n* 对css进行压缩(可以用很多打包工具，比如webpack,gulp等，也可以通过开启gzip压缩)\n* 合理的使用缓存(设置cache-control,expires,以及E-tag都是不错的，不过要注意一个问题，就是文件更新后，你要避免缓存而带来的影响。其中一个解决防范是在文件名字后面加一个版本号)\n* 减少http请求数，将多个css文件合并，或者是干脆直接写成内联样式(内联样式的一个缺点就是不能缓存)\n\n## 原理解析\n\n浏览器渲染的流程如下：\n\n* HTML解析文件，生成DOM Tree，解析CSS文件生成CSSOM Tree\n* 将Dom Tree和CSSOM Tree结合，生成Render Tree(渲染树)\n* 根据Render Tree渲染绘制，将像素渲染到屏幕上。\n\n从流程我们可以看出来:\n\n* DOM解析和CSS解析是两个并行的进程，所以这也解释了为什么CSS加载不会阻塞DOM的解析。\n* 然而，由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。\n* 由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，样式表会在后面的js执行前先加载执行完毕。所以css会阻塞后面js的执行。\n\n",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-06T15:30:02.000Z",
    "updateAt": "2021-07-11T10:52:48.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 903,
    "prev": "13f1b2b9-725c-4c16-ada0-fb050fdafe28",
    "next": "b97ddbf9-57fd-493f-888d-1ffb7981f10a"
  },
  "post": {
    "exerciseKey": "fda596ab-16db-41ab-9e81-5a567a373d42",
    "category": "QA",
    "title": "css加载会造成阻塞吗？",
    "level": 2.5,
    "updateAt": "2021-07-11T10:52:48+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 90
  }
}
