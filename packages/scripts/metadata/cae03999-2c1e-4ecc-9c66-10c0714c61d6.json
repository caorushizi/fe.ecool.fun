{
  "data": {
    "id": 172,
    "exerciseKey": "cae03999-2c1e-4ecc-9c66-10c0714c61d6",
    "category": "QA",
    "renderType": "md",
    "title": "如何实现单行／多行文本溢出的省略样式？",
    "desc": null,
    "options": null,
    "explanation": "## 一、前言\n\n在日常开发展示页面，如果一段文本的数量过长，受制于元素宽度的因素，有可能不能完全显示，为了提高用户的使用体验，这个时候就需要我们把溢出的文本显示成省略号\n\n对于文本的溢出，我们可以分成两种形式：\n\n- 单行文本溢出\n- 多行文本溢出\n\n\n\n## 二、实现方式\n\n\n\n### 单行文本溢出省略\n\n理解也很简单，即文本在一行内显示，超出部分以省略号的形式展现\n\n实现方式也很简单，涉及的`css`属性有：\n\n- text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本\n- white-space：设置文字在一行显示，不能换行\n- overflow：文字长度超出限定宽度，则隐藏超出的内容\n\n`overflow`设为`hidden`，普通情况用在块级元素的外层隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略\n\n`white-space:nowrap`，作用是设置文本不换行，是`overflow:hidden`和`text-overflow：ellipsis`生效的基础\n\n`text-overflow`属性值有如下：\n\n- clip：当对象内文本溢出部分裁切掉\n- ellipsis：当对象内文本溢出时显示省略标记（...）\n\n`text-overflow`只有在设置了`overflow:hidden`和`white-space:nowrap`才能够生效的\n\n举个例子\n\n```html\n<style>\n    p{\n        overflow: hidden;\n        line-height: 40px;\n        width:400px;\n        height:40px;\n        border:1px solid red;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n</style>\n<p 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</p >\n```\n\n效果如下：\n\n ![](https://static.ecool.fun//article/cd51e486-ac1d-40d9-aa97-0846d54b925c.png)\n\n可以看到，设置单行文本溢出较为简单，并且省略号显示的位置较好\n\n\n\n### 多行文本溢出省略\n\n多行文本溢出的时候，我们可以分为两种情况：\n\n- 基于高度截断\n- 基于行数截断\n\n\n\n#### 基于高度截断\n\n#### 伪元素 + 定位\n\n核心的`css`代码结构如下：\n\n- position: relative：为伪元素绝对定位\n- overflow: hidden：文本溢出限定的宽度就隐藏内容）\n- position: absolute：给省略号绝对定位\n- line-height: 20px：结合元素高度,高度固定的情况下,设定行高, 控制显示行数\n- height: 40px：设定当前元素高度\n- ::after {} ：设置省略号样式\n\n代码如下所示：\n\n```html\n<style>\n    .demo {\n        position: relative;\n        line-height: 20px;\n        height: 40px;\n        overflow: hidden;\n    }\n    .demo::after {\n        content: \"...\";\n        position: absolute;\n        bottom: 0;\n        right: 0;\n        padding: 0 20px 0 10px;\n    }\n</style>\n\n<body>\n    <div class='demo'>这是一段很长的文本</div>\n</body>\n```\n\n实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 `overflow: hidden` 隐藏多余文字\n\n这种实现具有以下优点：\n\n- 兼容性好，对各大主流浏览器有好的支持\n- 响应式截断，根据不同宽度做出调整\n\n一般文本存在英文的时候，可以设置`word-break: break-all`使一个单词能够在换行时进行拆分\n\n\n\n#### 基于行数截断\n\n纯`css`实现也非常简单，核心的`css`代码如下：\n\n- -webkit-line-clamp: 2：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性）\n- display: -webkit-box：和1结合使用，将对象作为弹性伸缩盒子模型显示 \n- -webkit-box-orient: vertical：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 \n- overflow: hidden：文本溢出限定的宽度就隐藏内容\n- text-overflow: ellipsis：多行文本的情况下，用省略号“…”隐藏溢出范围的文本\n\n```html\n<style>\n    p {\n        width: 400px;\n        border-radius: 1px solid red;\n        -webkit-line-clamp: 2;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n</style>\n<p>\n    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本\n    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本\n</p >\n```\n\n可以看到，上述使用了`webkit`的`CSS`属性扩展，所以兼容浏览器范围是`PC`端的`webkit`内核的浏览器，由于移动端大多数是使用`webkit`，所以移动端常用该形式\n\n需要注意的是，如果文本为一段很长的英文或者数字，则需要添加`word-wrap: break-word`属性\n\n还能通过使用`javascript`实现配合`css`，实现代码如下所示：\n\ncss结构如下：\n\n```css\np {\n    position: relative;\n    width: 400px;\n    line-height: 20px;\n    overflow: hidden;\n\n}\n.p-after:after{\n    content: \"...\"; \n    position: absolute; \n    bottom: 0; \n    right: 0; \n    padding-left: 40px;\n    background: -webkit-linear-gradient(left, transparent, #fff 55%);\n    background: -moz-linear-gradient(left, transparent, #fff 55%);\n    background: -o-linear-gradient(left, transparent, #fff 55%);\n    background: linear-gradient(to right, transparent, #fff 55%);\n}\n```\n\njavascript代码如下：\n\n```js\n$(function(){\n //获取文本的行高，并获取文本的高度，假设我们规定的行数是五行，那么对超过行数的部分进行限制高度，并加上省略号\n   $('p').each(function(i, obj){\n        var lineHeight = parseInt($(this).css(\"line-height\"));\n        var height = parseInt($(this).height());\n        if((height / lineHeight) >3 ){\n            $(this).addClass(\"p-after\")\n            $(this).css(\"height\",\"60px\");\n        }else{\n            $(this).removeClass(\"p-after\");\n        }\n    });\n})\n```\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:27:39.000Z",
    "updateAt": "2024-01-24T17:27:23.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 185,
    "prev": "6f841b28-be0d-413f-9b7a-70e740fa7621",
    "next": "fad85622-728a-4c93-bf22-d91f8902837d"
  },
  "post": {
    "exerciseKey": "cae03999-2c1e-4ecc-9c66-10c0714c61d6",
    "category": "QA",
    "title": "如何实现单行／多行文本溢出的省略样式？",
    "level": 2,
    "updateAt": "2024-01-24T17:27:23+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 90
  }
}