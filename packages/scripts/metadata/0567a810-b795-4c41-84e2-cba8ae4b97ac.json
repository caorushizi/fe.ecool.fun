{
  "data": {
    "id": 220,
    "exerciseKey": "0567a810-b795-4c41-84e2-cba8ae4b97ac",
    "category": "QA",
    "renderType": "md",
    "title": "如何实现上拉加载，下拉刷新？",
    "desc": null,
    "options": null,
    "explanation": "## 一、前言\n\n下拉刷新和上拉加载这两种交互方式通常出现在移动端中\n\n本质上等同于PC网页中的分页，只是交互形式不同\n\n开源社区也有很多优秀的解决方案，如`iscroll`、`better-scroll`、`pulltorefresh.js`库等等\n\n这些第三方库使用起来非常便捷\n\n我们通过原生的方式实现一次上拉加载，下拉刷新，有助于对第三方库有更好的理解与使用\n\n## 二、实现原理\n\n上拉加载及下拉刷新都依赖于用户交互\n\n最重要的是要理解在什么场景，什么时机下触发交互动作\n\n### 上拉加载\n\n首先可以看一张图\n\n ![](https://static.ecool.fun//article/2b902391-514d-4b1f-87e5-c5b4f17e7871.png)\n\n上拉加载的本质是页面触底，或者快要触底时的动作\n\n判断页面触底我们需要先了解一下下面几个属性\n\n- `scrollTop`：滚动视窗的高度距离`window`顶部的距离，它会随着往上滚动而不断增加，初始值是0，它是一个变化的值\n\n- `clientHeight`:它是一个定值，表示屏幕可视区域的高度；\n- `scrollHeight`：页面不能滚动时是不存在的，`body`长度超过`window`时才会出现，所表示`body`所有元素的长度\n\n综上我们得出一个触底公式：\n\n```js\nscrollTop + clientHeight >= scrollHeight\n```\n\n简单实现\n\n```js\nlet clientHeight  = document.documentElement.clientHeight; //浏览器高度\nlet scrollHeight = document.body.scrollHeight;\nlet scrollTop = document.documentElement.scrollTop;\n \nlet distance = 50;  //距离视窗还用50的时候，开始触发；\n\nif ((scrollTop + clientHeight) >= (scrollHeight - distance)) {\n    console.log(\"开始加载数据\");\n}\n```\n\n\n### 下拉刷新\n\n下拉刷新的本质是页面本身置于顶部时，用户下拉时需要触发的动作\n\n关于下拉刷新的原生实现，主要分成三步：\n\n- 监听原生`touchstart`事件，记录其初始位置的值，`e.touches[0].pageY`；\n- 监听原生`touchmove`事件，记录并计算当前滑动的位置值与初始位置值的差值，大于`0`表示向下拉动，并借助CSS3的`translateY`属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值；\n- 监听原生`touchend`事件，若此时元素滑动达到最大值，则触发`callback`，同时将`translateY`重设为`0`，元素回到初始位置\n\n举个例子：\n\n`Html`结构如下：\n\n```js\n<main>\n    <p class=\"refreshText\"></p >\n    <ul id=\"refreshContainer\">\n        <li>111</li>\n        <li>222</li>\n        <li>333</li>\n        <li>444</li>\n        <li>555</li>\n        ...\n    </ul>\n</main>\n```\n\n监听`touchstart`事件，记录初始的值\n\n```js\nvar _element = document.getElementById('refreshContainer'),\n    _refreshText = document.querySelector('.refreshText'),\n    _startPos = 0,  // 初始的值\n    _transitionHeight = 0; // 移动的距离\n\n_element.addEventListener('touchstart', function(e) {\n    _startPos = e.touches[0].pageY; // 记录初始位置\n    _element.style.position = 'relative';\n    _element.style.transition = 'transform 0s';\n}, false);\n```\n\n监听`touchmove`移动事件，记录滑动差值\n\n```js\n_element.addEventListener('touchmove', function(e) {\n    // e.touches[0].pageY 当前位置\n    _transitionHeight = e.touches[0].pageY - _startPos; // 记录差值\n\n    if (_transitionHeight > 0 && _transitionHeight < 60) { \n        _refreshText.innerText = '下拉刷新'; \n        _element.style.transform = 'translateY('+_transitionHeight+'px)';\n\n        if (_transitionHeight > 55) {\n            _refreshText.innerText = '释放更新';\n        }\n    }                \n}, false);\n```\n\n最后，就是监听`touchend`离开的事件\n\n```js\n_element.addEventListener('touchend', function(e) {\n    _element.style.transition = 'transform 0.5s ease 1s';\n    _element.style.transform = 'translateY(0px)';\n    _refreshText.innerText = '更新中...';\n    // todo...\n\n}, false);\n```\n\n从上面可以看到，在下拉到松手的过程中，经历了三个阶段：\n\n- 当前手势滑动位置与初始位置差值大于零时，提示正在进行下拉刷新操作\n- 下拉到一定值时，显示松手释放后的操作提示\n- 下拉到达设定最大值松手时，执行回调，提示正在进行更新操作\n\n\n\n## 三、案例\n\n在实际开发中，我们更多的是使用第三方库，下面以`better-scroll`进行举例：\n\nHTML结构\n\n```js\n<div id=\"position-wrapper\">\n    <div>\n        <p class=\"refresh\">下拉刷新</p >\n        <div class=\"position-list\">\n   <!--列表内容-->\n        </div>\n        <p class=\"more\">查看更多</p >\n    </div>\n</div>\n```\n\n实例化上拉下拉插件，通过`use`来注册插件\n\n```js\nimport BScroll from \"@better-scroll/core\";\nimport PullDown from \"@better-scroll/pull-down\";\nimport PullUp from '@better-scroll/pull-up';\nBScroll.use(PullDown);\nBScroll.use(PullUp);\n```\n\n实例化`BetterScroll`，并传入相关的参数\n\n```js\nlet pageNo = 1,pageSize = 10,dataList = [],isMore = true;  \nvar scroll= new BScroll(\"#position-wrapper\",{\n    scrollY:true,//垂直方向滚动\n    click:true,//默认会阻止浏览器的原生click事件，如果需要点击，这里要设为true\n    pullUpLoad:true,//上拉加载更多\n    pullDownRefresh:{\n        threshold:50,//触发pullingDown事件的位置\n        stop:0//下拉回弹后停留的位置\n    }\n});\n//监听下拉刷新\nscroll.on(\"pullingDown\",pullingDownHandler);\n//监测实时滚动\nscroll.on(\"scroll\",scrollHandler);\n//上拉加载更多\nscroll.on(\"pullingUp\",pullingUpHandler);\n\nasync function pullingDownHandler(){\n    dataList=[];\n    pageNo=1;\n    isMore=true;\n    $(\".more\").text(\"查看更多\");\n    await getlist();//请求数据\n    scroll.finishPullDown();//每次下拉结束后，需要执行这个操作\n    scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作\n}\nasync function pullingUpHandler(){\n    if(!isMore){\n        $(\".more\").text(\"没有更多数据了\");\n        scroll.finishPullUp();//每次上拉结束后，需要执行这个操作\n        return;\n    }\n    pageNo++;\n    await this.getlist();//请求数据\n    scroll.finishPullUp();//每次上拉结束后，需要执行这个操作\n    scroll.refresh();//当滚动区域的dom结构有变化时，需要执行这个操作    \n}\nfunction scrollHandler(){\n    if(this.y>50) $('.refresh').text(\"松手开始加载\");\n    else $('.refresh').text(\"下拉刷新\");\n}\nfunction getlist(){\n    //返回的数据\n    let result=....;\n    dataList=dataList.concat(result);\n    //判断是否已加载完\n    if(result.length<pageSize) isMore=false;\n    //将dataList渲染到html内容中\n}    \n```\n\n注意点：\n\n使用`better-scroll `实现下拉刷新、上拉加载时要注意以下几点：\n\n- `wrapper`里必须只有一个子元素\n- 子元素的高度要比`wrapper`要高\n- 使用的时候，要确定`DOM`元素是否已经生成，必须要等到`DOM`渲染完成后，再`new BScroll()`\n- 滚动区域的`DOM`元素结构有变化后，需要执行刷新 `refresh() `\n- 上拉或者下拉，结束后，需要执行`finishPullUp()`或者`finishPullDown()`，否则将不会执行下次操作\n- `better-scroll`，默认会阻止浏览器的原生`click`事件，如果滚动内容区要添加点击事件，需要在实例化属性里设置`click:true`\n\n### 小结\n\n下拉刷新、上拉加载原理本身都很简单，真正复杂的是封装过程中，要考虑的兼容性、易用性、性能等诸多细节\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T14:05:23.000Z",
    "updateAt": "2024-01-25T14:29:31.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 144,
    "prev": "20d4a56b-719b-47ba-b29b-f8a61e226958",
    "next": "7b63d3a8-32c4-4561-95fc-77755ea629f1"
  },
  "post": {
    "exerciseKey": "0567a810-b795-4c41-84e2-cba8ae4b97ac",
    "category": "QA",
    "title": "如何实现上拉加载，下拉刷新？",
    "level": 2,
    "updateAt": "2024-01-25T14:29:31+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}