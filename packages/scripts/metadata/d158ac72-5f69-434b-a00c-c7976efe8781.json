{
  "data": {
    "id": 2643,
    "exerciseKey": "d158ac72-5f69-434b-a00c-c7976efe8781",
    "category": "QA",
    "renderType": "md",
    "title": "如何设计一套统计全站请求耗时的工具",
    "desc": "",
    "options": "",
    "explanation": "以下是一个解决方案的示例：\n\n### **1. 需求分析**\n\n- **统计请求时间**：记录每个请求的发起和完成时间，计算耗时。\n- **统计请求数量**：记录总请求数量，分类型统计（如 GET、POST）。\n- **错误监控**：监控失败的请求及其错误信息。\n- **展示统计信息**：提供统计数据的可视化界面，如图表、表格等。\n- **报警机制**：在请求超时或异常时发出警报。\n\n### **2. 实现步骤**\n\n#### **前端实现**\n\n1. **拦截请求**\n\n   使用 `XMLHttpRequest` 和 `fetch` 的拦截器，捕获请求和响应。\n\n   ```javascript\n   // 对 XMLHttpRequest 的封装\n   (function() {\n     const originalSend = XMLHttpRequest.prototype.send;\n     XMLHttpRequest.prototype.send = function(...args) {\n       const xhr = this;\n       const startTime = performance.now();\n       xhr.addEventListener('loadend', () => {\n         const endTime = performance.now();\n         const duration = endTime - startTime;\n         logRequest(xhr.responseURL, xhr.method, duration, xhr.status);\n       });\n       originalSend.apply(xhr, args);\n     };\n   })();\n\n   // 对 fetch 的封装\n   (function() {\n     const originalFetch = window.fetch;\n     window.fetch = function(...args) {\n       const startTime = performance.now();\n       return originalFetch(...args).then(response => {\n         const endTime = performance.now();\n         const duration = endTime - startTime;\n         logRequest(response.url, args[1]?.method || 'GET', duration, response.status);\n         return response;\n       });\n     };\n   })();\n   ```\n\n2. **记录日志**\n\n   实现 `logRequest` 函数，将请求信息记录到服务器端。\n\n   ```javascript\n   function logRequest(url, method, duration, status) {\n     navigator.sendBeacon('/log', JSON.stringify({\n       url,\n       method,\n       duration,\n       status,\n       timestamp: new Date().toISOString()\n     }));\n   }\n   ```\n\n3. **显示统计数据**\n\n   通过发送定期的请求，将收集的数据发送到服务器，并在服务器端生成统计报告。\n\n#### **后端实现**\n\n1. **数据存储**\n\n   选择合适的存储方式（如数据库、日志文件），存储请求日志。\n\n   ```javascript\n   const express = require('express');\n   const app = express();\n   const fs = require('fs');\n   \n   app.use(express.json());\n   \n   app.post('/log', (req, res) => {\n     const logEntry = req.body;\n     fs.appendFile('request_logs.json', JSON.stringify(logEntry) + '\\n', (err) => {\n       if (err) {\n         console.error('Failed to write log:', err);\n       }\n     });\n     res.status(200).send('Logged');\n   });\n   \n   app.listen(3000, () => {\n     console.log('Server running on port 3000');\n   });\n   ```\n\n2. **数据分析**\n\n   实现数据分析和可视化工具，生成统计报告和图表。\n\n   ```javascript\n   // 数据分析示例（伪代码）\n   const logs = readLogs('request_logs.json');\n   const stats = analyzeLogs(logs);\n   renderStatsToDashboard(stats);\n   ```\n\n3. **报警机制**\n\n   根据设置的阈值（如请求耗时、错误率）进行报警。\n\n   ```javascript\n   function checkAlerts(stats) {\n     if (stats.averageDuration > THRESHOLD_DURATION) {\n       sendAlert('High average request duration');\n     }\n     if (stats.errorRate > THRESHOLD_ERROR_RATE) {\n       sendAlert('High error rate');\n     }\n   }\n   ```\n\n#### **数据可视化**\n\n1. **前端展示**\n\n   使用图表库（如 Chart.js、D3.js）展示统计数据。\n\n   ```html\n   <canvas id=\"request-chart\"></canvas>\n   <script>\n     const ctx = document.getElementById('request-chart').getContext('2d');\n     const chart = new Chart(ctx, {\n       type: 'line',\n       data: {\n         labels: ['Jan', 'Feb', 'Mar', 'Apr'], // Example labels\n         datasets: [{\n           label: 'Request Duration',\n           data: [30, 40, 35, 50], // Example data\n           borderColor: 'rgba(75, 192, 192, 1)',\n           borderWidth: 1\n         }]\n       }\n     });\n   </script>\n   ```\n\n2. **报告生成**\n\n   生成详细的性能报告，并提供下载或在线查看的功能。",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:36.000Z",
    "updateAt": "2024-08-15T09:33:51.000Z",
    "isCollected": false,
    "currentIndex": 113,
    "filterTotalNum": 1487,
    "prev": "6230fdac-bad1-4a20-aca7-69b7ce01ca25",
    "next": "5926a5ad-e62b-42c7-a747-676ca6c0ad57"
  },
  "post": {
    "exerciseKey": "d158ac72-5f69-434b-a00c-c7976efe8781",
    "category": "QA",
    "title": "如何设计一套统计全站请求耗时的工具",
    "level": 3,
    "createAt": "2024-08-13T08:30:36+00:00",
    "updateAt": "2024-08-15T09:33:51+00:00"
  },
  "tag": {
    "id": 75,
    "tagName": "场景题",
    "type": "1",
    "exerciseCount": 39
  }
}