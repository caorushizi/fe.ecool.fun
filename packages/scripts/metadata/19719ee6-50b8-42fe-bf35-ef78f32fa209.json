{
  "data": {
    "id": 2047,
    "exerciseKey": "19719ee6-50b8-42fe-bf35-ef78f32fa209",
    "category": "QA",
    "renderType": "md",
    "title": "是否有使用过空值合并运算符（??），举几个可以使用的场景。",
    "desc": null,
    "options": null,
    "explanation": "**空值合并操作符（??）** 是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。\n\n与**逻辑或操作符（||）** 不同，逻辑或操作符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 || 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，'' 或 0）时。见下面的例子。\n\n```js\nconst foo = null ?? 'default string';  \nconsole.log(foo);  \n// expected output: \"default string\"  \n  \nconst baz = 0 ?? 42;  \nconsole.log(baz);  \n// expected output: 0  \n```\n\n## 示例场景\n\n### 使用空值合并操作符\n\n在这个例子中，我们使用空值合并操作符为常量提供默认值，保证常量不为 null 或者 undefined。\n\n```js\nconst nullValue = null;  \nconst emptyText = \"\"; // 空字符串，是一个假值，Boolean(\"\") === false  \nconst someNumber = 42;  \n  \nconst valA = nullValue ?? \"valA 的默认值\";  \nconst valB = emptyText ?? \"valB 的默认值\";  \nconst valC = someNumber ?? 0;  \n  \nconsole.log(valA); // \"valA 的默认值\"  \nconsole.log(valB); // \"\"（空字符串虽然是假值，但不是 null 或者 undefined）  \nconsole.log(valC); // 42  \n```\n\n### 为变量赋默认值\n\n以前，如果想为一个变量赋默认值，通常的做法是使用逻辑或操作符（||）：\n\n```js\n\nlet foo;  \n  \n//  foo is never assigned any value so it is still undefined  \nlet someDummyText = foo || 'Hello!';  \n```\n\n然而，由于 || 是一个布尔逻辑运算符，左侧的操作数会被强制转换成布尔值用于求值。任何假值（0， ''， NaN， null， undefined）都不会被返回。这导致如果你使用0，''或NaN作为有效值，就会出现不可预料的后果。\n\n```js\nlet count = 0;  \nlet text = \"\";  \n  \nlet qty = count || 42;  \nlet message = text || \"hi!\";  \nconsole.log(qty);     // 42，而不是 0  \nconsole.log(message); // \"hi!\"，而不是 \"\"  \n```\n\n空值合并操作符可以避免这种陷阱，其只在第一个操作数为null 或 undefined 时（而不是其它假值）返回第二个操作数：\n\n```\nlet myText = ''; // An empty string (which is also a falsy value)  \n  \nlet notFalsyText = myText || 'Hello world';  \nconsole.log(notFalsyText); // Hello world  \n  \nlet preservingFalsy = myText ?? 'Hi neighborhood';  \nconsole.log(preservingFalsy); // '' (as myText is neither undefined nor null)  \n```\n\n### 短路\n\n与 OR 和 AND 逻辑操作符相似，当左表达式不为 null 或 undefined 时，不会对右表达式进行求值。\n\n```js\nfunction A() { console.log('函数 A 被调用了'); return undefined; }  \nfunction B() { console.log('函数 B 被调用了'); return false; }  \nfunction C() { console.log('函数 C 被调用了'); return \"foo\"; }  \n  \nconsole.log( A() ?? C() );  \n// 依次打印 \"函数 A 被调用了\"、\"函数 C 被调用了\"、\"foo\"  \n// A() 返回了 undefined，所以操作符两边的表达式都被执行了  \n  \nconsole.log( B() ?? C() );  \n// 依次打印 \"函数 B 被调用了\"、\"false\"  \n// B() 返回了 false（既不是 null 也不是 undefined）  \n// 所以右侧表达式没有被执行  \n```\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2023-09-24T10:25:14.000Z",
    "updateAt": "2024-07-19T10:29:44.000Z",
    "isCollected": false,
    "currentIndex": 342,
    "filterTotalNum": 1487,
    "prev": "8cbb58f4-7fb1-4c88-9e15-ed38eb0bd283",
    "next": "6a451db6-ddbe-4f76-8519-8ce6d47af8b3"
  },
  "post": {
    "exerciseKey": "19719ee6-50b8-42fe-bf35-ef78f32fa209",
    "category": "QA",
    "title": "是否有使用过空值合并运算符（??），举几个可以使用的场景。",
    "level": 1,
    "createAt": "2023-09-24T10:25:14+00:00",
    "updateAt": "2024-07-19T10:29:44+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}