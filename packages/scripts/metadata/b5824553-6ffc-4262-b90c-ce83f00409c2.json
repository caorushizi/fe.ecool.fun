{
  "data": {
    "id": 520,
    "exerciseKey": "b5824553-6ffc-4262-b90c-ce83f00409c2",
    "category": "QA",
    "renderType": "md",
    "title": "请手写“快速排序”",
    "desc": null,
    "options": null,
    "explanation": "## 算法简介\n\n快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。\n\n## 算法描述和实现\n\n快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：\n\n* 从数列中挑出一个元素，称为 “基准”（pivot）；\n* 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n* 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n## 代码实现\n\n```javascript\n/*方法说明：快速排序\n@param  array 待排序数组*/\n//方法一\nfunction quickSort(array, left, right) {\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array' && typeof left === 'number' && typeof right === 'number') {\n        if (left < right) {\n            var x = array[right], i = left - 1, temp;\n            for (var j = left; j <= right; j++) {\n                if (array[j] <= x) {\n                    i++;\n                    temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n            }\n            quickSort(array, left, i - 1);\n            quickSort(array, i + 1, right);\n        }\n        return array;\n    } else {\n        return 'array is not an Array or left or right is not a number!';\n    }\n}\n\n//方法二\nvar quickSort2 = function(arr) {\n    if (arr.length <= 1) {\n    return arr;\n  }\n\n  const pivotIndex = Math.floor(arr.length / 2);\n  const pivot = arr[pivotIndex];\n  const less = [];\n  const greater = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (i === pivotIndex) {\n      continue;\n    }\n\n    if (arr[i] < pivot) {\n      less.push(arr[i]);\n    } else {\n      greater.push(arr[i]);\n    }\n  }\n\n  return [...quickSort2(less), pivot, ...quickSort2(greater)];\n};\n\nvar arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];\nconsole.log(quickSort(arr,0,arr.length-1));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\nconsole.log(quickSort2(arr));//[2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(nlogn)\n* 最差情况：T(n) = O(n2)\n* 平均情况：T(n) = O(nlogn)",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-17T12:06:34.000Z",
    "updateAt": "2023-07-05T15:32:42.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 321,
    "prev": "17f833d6-5312-4150-abb8-f3a320581109",
    "next": "02cde100-0c41-4036-b224-31895cd8c339"
  },
  "post": {
    "exerciseKey": "b5824553-6ffc-4262-b90c-ce83f00409c2",
    "category": "QA",
    "title": "请手写“快速排序”",
    "level": 3,
    "updateAt": "2023-07-05T15:32:42+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 19
  }
}