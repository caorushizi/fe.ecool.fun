{
  "data": {
    "id": 1740,
    "exerciseKey": "5652afd0-efdc-4f2d-a5e2-e4cc0669638a",
    "category": "QA",
    "renderType": "md",
    "title": "请按以下要求实现 compose 方法",
    "desc": "```js\nvar list = [['热', '冷', '冰'], ['大', '中', '小'], ['重辣', '微辣'], ['重麻', '微麻']];\n\n// 输出所有维度的组合，如 [['热', '冷''], ['大', '中']]  => 热+大，热+中，冷+大，冷+中\n\nfunction compose(list) {\n  console.log('hello world');\n}\n\ncompose(list);\n```",
    "options": null,
    "explanation": "## 实现思路\n\n本题是个 `全组合` 的问题。\n\n在介绍实现思路前先介绍一下笛卡尔积（摘自百度百科）：\n\n> 笛卡尔乘积是指在数学中，两个集合X和Y的笛卡尔积（Cartesian product），又称直积，表示为X×Y，第一个对象是X的成员而第二个对象是Y的所有可能有序对的其中一个成员。假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。\n\n全组合的实现，可以借鉴笛卡尔积的求法，实现思路如下：\n\n* 如果输入list长度为0，则直接返回空数组\n* 如果输入list长度大于等于1，则直接返回list[0]的每一项构成的单元素数组组成的数组，比如[[1,2]] => [[1],[2]]，记为result。对于list的第二项以及以后的每一项，都依次和result做笛卡尔积，并把笛卡尔积的每一项（类似[[ 1 ],'a' ]）中的第二项（值）追加到第一项（数组）后面，收集到一个新数组里，用这个数组替换result，只到list遍历完成。\n\n## 代码实现\n\n* for循环实现\n\n```\nfunction combination (list) {\n\tlet result = []  \n  if (!list.length) return result\n  for (let subList of list) {\n    if (!result.length) {\n      result = subList.map(item => [item])\n    } else {\n      let subResult = []\n      for (let r of result) {\n        let tailList = subList.map(item => [...r, item])\n        subResult.push(...tailList)\n      }\n      result = subResult\n    }\n  }\n  return result\n}\n```\n\n* 函数式编程实现\n\n```js\nfunction combination(list) {\n  return list.reduce((result, subList) => {\n    return subList.reduce((subResult, item) => {\n      let tail = result.length ? result.map(l => [...l, item]) : [[item]]\n      return subResult.concat(tail)\n    }, [])\n  }, [])\n}\n```\n\n## 最终实现：\n\n```js\nfunction compose(list){\n  var res = list.reduce( (result, property) => {\n    return property.reduce( (acc, value) => {\n        return acc.concat(result.map( ele => [].concat(ele, value)));\n    }, []);\n  });\n  return res.map(arr=>arr.join('+'))\n}\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-04-05T10:14:49.000Z",
    "updateAt": "2022-04-05T18:14:59.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 578,
    "prev": "3925cf74-ee93-49fd-8896-8bc7221f32a4",
    "next": "1a143475-08ab-49cc-abc9-62a4bb9249c0"
  },
  "post": {
    "exerciseKey": "5652afd0-efdc-4f2d-a5e2-e4cc0669638a",
    "category": "QA",
    "title": "请按以下要求实现 compose 方法",
    "level": 3,
    "updateAt": "2022-04-05T18:14:59+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}
