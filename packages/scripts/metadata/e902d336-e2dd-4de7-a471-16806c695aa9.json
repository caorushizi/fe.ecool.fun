{
  "data": {
    "id": 2411,
    "exerciseKey": "e902d336-e2dd-4de7-a471-16806c695aa9",
    "category": "QA",
    "renderType": "md",
    "title": "如何封装一个请求，让其多次调用的时候，实际只发起一个请求的时候，返回同一份结果？",
    "desc": "",
    "options": "",
    "explanation": "封装一个请求使其在多次调用时只发起一次请求，并返回相同结果，通常是通过请求去重（debouncing）来实现的。这种功能对于避免重复的网络请求、提高性能和减少不必要的负载非常有用。\n\n同时，我们需要确保在请求完成之前，对相同请求的重复调用都会共享相同的请求 Promise。避免出现连续发出相同的请求，在第一个请求尚未完成时，那么可能会发出多个请求的情况。\n\n可以通过以下步骤来实现这个功能：\n\n### 1. **使用一个缓存机制**\n\n我们可以使用 JavaScript 对象或 Map 来缓存已经发起的请求，并在 subsequent 请求中返回缓存的结果。缓存的关键是确保相同的请求参数对应同一个缓存条目。\n\n### 2. **创建请求缓存封装**\n\n以下是一个基于 `axios` 的请求去重的封装示例：\n\n```javascript\nimport axios from 'axios';\n\n// 请求缓存\nconst requestCache = new Map();\n\nasync function fetchData(url, params) {\n  // 生成缓存 key\n  const cacheKey = `${url}?${new URLSearchParams(params).toString()}`;\n\n  // 检查缓存中是否已有数据\n  if (requestCache.has(cacheKey)) {\n    return requestCache.get(cacheKey);\n  }\n\n  // 创建请求 Promise\n  const requestPromise = axios.get(url, { params })\n    .then(response => {\n      // 请求成功，存储结果\n      requestCache.delete(cacheKey); // 请求完成后，移除缓存\n      return response.data;\n    })\n    .catch(error => {\n      // 请求失败，清除缓存\n      requestCache.delete(cacheKey);\n      throw error;\n    });\n\n  // 存储请求 Promise\n  requestCache.set(cacheKey, requestPromise);\n\n  // 返回 Promise\n  return requestPromise;\n}\n\nexport default fetchData;\n```\n\n注意事项：\n\n* **缓存请求 Promise**：每个请求的 Promise 被缓存到 requestCache 中。后续的相同请求会返回这个缓存的 Promise。\n\n* **请求完成后移除缓存**：请求成功或失败后，删除缓存，以防止缓存中的 Promise 长时间存在，避免内存泄漏。\n\n* **请求失败处理**：如果请求失败，清理缓存并抛出错误，以便后续调用可以重新发起请求。\n\n### 3. **使用请求缓存**\n\n使用封装好的 `fetchData` 函数来发起请求。多次调用相同的请求 URL 和参数只会发起一次网络请求，并返回相同的结果。\n\n```javascript\nimport fetchData from './fetchData';\n\n// 使用示例\nfetchData('https://api.example.com/data', { id: 1 })\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n\n// 再次调用相同的请求\nfetchData('https://api.example.com/data', { id: 1 })\n  .then(data => console.log(data)) // 共享相同的请求结果\n  .catch(error => console.error(error));\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 3.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-09-03T01:33:47.000Z",
    "isCollected": false,
    "currentIndex": 226,
    "filterTotalNum": 1487,
    "prev": "2b8e3ddf-b8cb-464b-8af4-0efed5b911b0",
    "next": "d9ebcb10-02a4-448c-9a27-b5bcfacce4fa"
  },
  "post": {
    "exerciseKey": "e902d336-e2dd-4de7-a471-16806c695aa9",
    "category": "QA",
    "title": "如何封装一个请求，让其多次调用的时候，实际只发起一个请求的时候，返回同一份结果？",
    "level": 3.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-09-03T01:33:47+00:00"
  },
  "tag": {
    "id": 75,
    "tagName": "场景题",
    "type": "1",
    "exerciseCount": 39
  }
}