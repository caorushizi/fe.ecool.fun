{
  "data": {
    "id": 198,
    "exerciseKey": "21144fa1-41b7-4077-97cd-b0c6030b10e0",
    "category": "QA",
    "renderType": "md",
    "title": "Javascript如何实现继承？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n继承（inheritance）是面向对象软件技术当中的一个概念。\n\n如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”\n\n- 继承的优点 \n\n继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码\n\n在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能\n\n虽然`JavaScript`并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富\n\n关于继承，我们举个形象的例子：\n\n定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等\n\n```js\nclass Car{\n    constructor(color,speed){\n        this.color = color\n        this.speed = speed\n        // ...\n    }\n}\n```\n\n由汽车这个类可以派生出“轿车”和“货车”两个类，在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱\n\n```js\n// 货车\nclass Truck extends Car{\n    constructor(color,speed){\n        super(color,speed)\n        this.Container = true // 货箱\n    }\n}\n```\n\n这样轿车和货车就是不一样的，但是二者都属于汽车这个类，汽车、轿车继承了汽车的属性，而不需要再次在“轿车”中定义汽车已经有的属性\n\n在“轿车”继承“汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与“汽车”这个父类不同的属性和方法\n\n```js\nclass Truck extends Car{\n    constructor(color,speed){\n        super(color,speed)\n        this.color = \"black\" //覆盖\n        this.Container = true // 货箱\n    }\n}\n```\n\n从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系\n\n\n\n## 二、实现方式\n\n下面给出`JavaScripy`常见的继承方式：\n\n- 原型链继承\n\n- 构造函数继承（借助 call）\n- 组合继承\n- 原型式继承\n- 寄生式继承\n- 寄生组合式继承\n\n\n\n### 原型链继承\n\n原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针\n\n举个例子\n\n```js\n function Parent() {\n    this.name = 'parent1';\n    this.play = [1, 2, 3]\n  }\n  function Child() {\n    this.type = 'child2';\n  }\n  Child1.prototype = new Parent();\n  console.log(new Child())\n```\n\n上面代码看似没问题，实际存在潜在问题\n\n```js\nvar s1 = new Child2();\nvar s2 = new Child2();\ns1.play.push(4);\nconsole.log(s1.play, s2.play); // [1,2,3,4]\n```\n\n改变`s1`的`play`属性，会发现`s2`也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的\n\n\n\n### 构造函数继承\n\n借助 `call `调用`Parent`函数\n\n```js\nfunction Parent(){\n    this.name = 'parent1';\n}\n\nParent.prototype.getName = function () {\n    return this.name;\n}\n\nfunction Child(){\n    Parent1.call(this);\n    this.type = 'child'\n}\n\nlet child = new Child();\nconsole.log(child);  // 没问题\nconsole.log(child.getName());  // 会报错\n```\n\n可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法\n\n相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法\n\n\n\n### 组合继承\n\n前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来\n\n```js\nfunction Parent3 () {\n    this.name = 'parent3';\n    this.play = [1, 2, 3];\n}\n\nParent3.prototype.getName = function () {\n    return this.name;\n}\nfunction Child3() {\n    // 第二次调用 Parent3()\n    Parent3.call(this);\n    this.type = 'child3';\n}\n\n// 第一次调用 Parent3()\nChild3.prototype = new Parent3();\n// 手动挂上构造器，指向自己的构造函数\nChild3.prototype.constructor = Child3;\nvar s3 = new Child3();\nvar s4 = new Child3();\ns3.play.push(4);\nconsole.log(s3.play, s4.play);  // 不互相影响\nconsole.log(s3.getName()); // 正常输出'parent3'\nconsole.log(s4.getName()); // 正常输出'parent3'\n```\n\n这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到` Parent3` 执行了两次，造成了多构造一次的性能开销\n\n\n\n### 原型式继承\n\n这里主要借助`Object.create`方法实现普通对象的继承\n\n同样举个例子\n\n```js\nlet parent4 = {\n    name: \"parent4\",\n    friends: [\"p1\", \"p2\", \"p3\"],\n    getName: function() {\n      return this.name;\n    }\n  };\n\n  let person4 = Object.create(parent4);\n  person4.name = \"tom\";\n  person4.friends.push(\"jerry\");\n\n  let person5 = Object.create(parent4);\n  person5.friends.push(\"lucy\");\n\n  console.log(person4.name); // tom\n  console.log(person4.name === person4.getName()); // true\n  console.log(person5.name); // parent4\n  console.log(person4.friends); // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n  console.log(person5.friends); // [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]\n```\n\n这种继承方式的缺点也很明显，因为`Object.create `方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能\n\n\n\n### 寄生式继承\n\n寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法\n\n```js\nlet parent5 = {\n    name: \"parent5\",\n    friends: [\"p1\", \"p2\", \"p3\"],\n    getName: function() {\n        return this.name;\n    }\n};\n\nfunction clone(original) {\n    let clone = Object.create(original);\n    clone.getFriends = function() {\n        return this.friends;\n    };\n    return clone;\n}\n\nlet person5 = clone(parent5);\n\nconsole.log(person5.getName()); // parent5\nconsole.log(person5.getFriends()); // [\"p1\", \"p2\", \"p3\"]\n```\n\n其优缺点也很明显，跟上面讲的原型式继承一样\n\n\n\n### 寄生组合式继承\n\n寄生组合式继承，借助解决普通对象的继承问题的` Object.create` 方法，在亲全面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式\n\n```js\nfunction clone (parent, child) {\n    // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程\n    child.prototype = Object.create(parent.prototype);\n    child.prototype.constructor = child;\n}\n\nfunction Parent6() {\n    this.name = 'parent6';\n    this.play = [1, 2, 3];\n}\nParent6.prototype.getName = function () {\n    return this.name;\n}\nfunction Child6() {\n    Parent6.call(this);\n    this.friends = 'child5';\n}\n\nclone(Parent6, Child6);\n\nChild6.prototype.getFriends = function () {\n    return this.friends;\n}\n\nlet person6 = new Child6(); \nconsole.log(person6); //{friends:\"child5\",name:\"child5\",play:[1,2,3],__proto__:Parent6}\nconsole.log(person6.getName()); // parent6\nconsole.log(person6.getFriends()); // child5\n```\n\n可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题\n\n\n\n文章一开头，我们是使用`ES6` 中的`extends `关键字直接实现 `JavaScript `的继承\n\n```js\nclass Person {\n  constructor(name) {\n    this.name = name\n  }\n  // 原型方法\n  // 即 Person.prototype.getName = function() { }\n  // 下面可以简写为 getName() {...}\n  getName = function () {\n    console.log('Person:', this.name)\n  }\n}\nclass Gamer extends Person {\n  constructor(name, age) {\n    // 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。\n    super(name)\n    this.age = age\n  }\n}\nconst asuna = new Gamer('Asuna', 20)\nasuna.getName() // 成功访问到父类的方法\n```\n\n利用`babel`工具进行转换，我们会发现`extends`实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式\n\n\n\n## 三、总结\n\n下面以一张图作为总结：\n\n ![](https://static.ecool.fun//article/c15679e3-2c26-4aef-a14f-8d6a68179bce.png)\n\n通过`Object.create` 来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而 `extends` 的语法糖和寄生组合继承的方式基本类似\n",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:50:49.000Z",
    "updateAt": "2024-01-24T17:34:44.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 164,
    "prev": "fe97f51f-1d7d-49b7-acd2-83f345014633",
    "next": "d1bb4169-cd53-4398-b4a1-5e0c533c87dc"
  },
  "post": {
    "exerciseKey": "21144fa1-41b7-4077-97cd-b0c6030b10e0",
    "category": "QA",
    "title": "Javascript如何实现继承？",
    "level": 2.5,
    "updateAt": "2024-01-24T17:34:44+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
