{
  "data": {
    "id": 231,
    "exerciseKey": "7e8c5dd0-90cc-451b-afdb-0c4150704768",
    "category": "QA",
    "renderType": "md",
    "title": "为什么Vue中的data属性是一个函数而不是一个对象？",
    "desc": null,
    "options": null,
    "explanation": "## 一、实例和组件定义data的区别\n\n`vue`实例的时候定义`data`属性既可以是一个对象，也可以是一个函数\n\n```js\nconst app = new Vue({\n    el:\"#app\",\n    // 对象格式\n    data:{\n        foo:\"foo\"\n    },\n    // 函数格式\n    data(){\n        return {\n             foo:\"foo\"\n        }\n    }\n})\n```\n\n组件中定义`data`属性，只能是一个函数\n\n如果为组件`data`直接定义为一个对象\n\n```js\nVue.component('component1',{\n    template:`<div>组件</div>`,\n    data:{\n        foo:\"foo\"\n    }\n})\n```\n\n则会得到警告信息\n\n\n ![image.png](https://static.ecool.fun//article/c401c122-b612-4693-bc1a-5d4744f89d8b.png)\n\n\n警告说明：返回的`data`应该是一个函数在每一个组件实例中\n\n## 二、组件data定义函数与对象的区别\n\n上面讲到组件`data`必须是一个函数，不知道大家有没有思考过这是为什么呢？\n\n在我们定义好一个组件的时候，`vue`最终都会通过`Vue.extend()`构成组件实例\n\n这里我们模仿组件构造函数，定义`data`属性，采用对象的形式\n\n```js\nfunction Component(){\n \n}\nComponent.prototype.data = {\n\tcount : 0\n}\n```\n\n创建两个组件实例\n\n```\nconst componentA = new Component()\nconst componentB = new Component()\n```\n\n修改`componentA`组件`data`属性的值，`componentB`中的值也发生了改变\n\n```js\nconsole.log(componentB.data.count)  // 0\ncomponentA.data.count = 1\nconsole.log(componentB.data.count)  // 1\n```\n\n产生这样的原因这是两者共用了同一个内存地址，`componentA`修改的内容，同样对`componentB`产生了影响\n\n如果我们采用函数的形式，则不会出现这种情况（函数返回的对象内存地址并不相同）\n\n```js\nfunction Component(){\n\tthis.data = this.data()\n}\nComponent.prototype.data = function (){\n    return {\n   \t\tcount : 0\n    }\n}\n```\n\n修改`componentA`组件`data`属性的值，`componentB`中的值不受影响\n\n```js\nconsole.log(componentB.data.count)  // 0\ncomponentA.data.count = 1\nconsole.log(componentB.data.count)  // 0\n```\n\n`vue`组件可能会有很多个实例，采用函数返回一个全新`data`形式，使每个实例对象的数据不会受到其他实例对象数据的污染\n\n## 三、原理分析\n\n首先可以看看`vue`初始化`data`的代码，`data`的定义可以是函数也可以是对象\n\n源码位置：`/vue-dev/src/core/instance/state.js`\n\n```js\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n    ...\n}\n```\n`data`既能是`object`也能是`function`，那为什么还会出现上文警告呢？\n\n别急，继续看下文\n\n组件在创建的时候，会进行选项的合并\n\n源码位置：`/vue-dev/src/core/util/options.js`\n\n自定义组件会进入`mergeOptions`进行选项合并\n\n```js\nVue.prototype._init = function (options?: Object) {\n    ...\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options)\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      )\n    }\n    ...\n  }\n```\n\n定义`data`会进行数据校验\n\n源码位置：`/vue-dev/src/core/instance/init.js`\n\n这时候`vm`实例为`undefined`，进入`if`判断，若`data`类型不是`function`，则出现警告提示\n\n```js\nstrats.data = function (\n  parentVal: any,\n  childVal: any,\n  vm?: Component\n): ?Function {\n  if (!vm) {\n    if (childVal && typeof childVal !== \"function\") {\n      process.env.NODE_ENV !== \"production\" &&\n        warn(\n          'The \"data\" option should be a function ' +\n            \"that returns a per-instance value in component \" +\n            \"definitions.\",\n          vm\n        );\n\n      return parentVal;\n    }\n    return mergeDataOrFn(parentVal, childVal);\n  }\n  return mergeDataOrFn(parentVal, childVal, vm);\n};\n```\n\n### 四、结论\n\n- 根实例对象`data`可以是对象也可以是函数（根实例是单例），不会产生数据污染情况\n- 组件实例对象`data`必须为函数，目的是为了防止多个组件实例对象之间共用一个`data`，产生数据污染。采用函数的形式，`initData`时会将其作为工厂函数都会返回全新`data`对象",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:34:53.000Z",
    "updateAt": "2024-01-25T14:34:06.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 137,
    "prev": "51699bda-02be-4433-b2bf-450c2655594f",
    "next": "cf1e843f-9005-42dc-b204-194dd3d1fc42"
  },
  "post": {
    "exerciseKey": "7e8c5dd0-90cc-451b-afdb-0c4150704768",
    "category": "QA",
    "title": "为什么Vue中的data属性是一个函数而不是一个对象？",
    "level": 2,
    "updateAt": "2024-01-25T14:34:06+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
