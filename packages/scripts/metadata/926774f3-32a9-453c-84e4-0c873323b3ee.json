{
  "data": {
    "id": 2067,
    "exerciseKey": "926774f3-32a9-453c-84e4-0c873323b3ee",
    "category": "QA",
    "renderType": "md",
    "title": "Vue是怎么把template模版编译成render函数的？",
    "desc": null,
    "options": null,
    "explanation": "Vue的编译过程将模板转换为渲染函数，这是Vue在运行时动态编译和渲染组件的关键步骤。下面是Vue将模板编译成渲染函数的大致过程：\n\n1. **解析模板**：首先，Vue会解析模板字符串，将其转化为抽象语法树（AST）。AST是一个表示模板结构和内容的树状数据结构。\n\n2. **优化AST**：接下来，Vue会对AST进行优化处理，以提升渲染性能。这包括标记静态节点、静态属性和静态文本等。\n\n3. **生成渲染函数**：利用优化后的AST，Vue会生成渲染函数。渲染函数是一个JavaScript函数，它接收一个上下文对象作为参数，并返回一个虚拟DOM树（VNode）。\n\n4. **渲染虚拟DOM**：当执行渲染函数时，它将生成一个新的虚拟DOM树。如果之前已经存在真实的DOM树，Vue将通过比较新旧VNode来计算最小的更新操作并应用在真实DOM上，从而进行局部更新，提高效率。\n\n5. **生成DOM**：最后，Vue将根据最新的VNode生成真实的DOM元素，并将其插入到页面中，完成渲染。\n\nVue的编译过程通常在构建时（比如使用Vue CLI）或运行时的初始阶段完成，以便在实际渲染组件时获得更好的性能。这样一来，渲染函数会被缓存并重复使用，而不需要每次重新编译模板。\n\nVue还可以使用`render`函数直接编写组件而不依赖于模板。这种情况下，手动编写的`render`函数会跳过模板解析和优化的步骤，直接生成渲染函数并进行渲染。这种方式可以在需要更高级别的动态和灵活性时使用。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-12-17T10:28:48.000Z",
    "updateAt": "2023-12-17T18:28:53.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 260,
    "prev": "4b1c17f5-a42b-4853-9ff5-792a23d45050",
    "next": "a19c5526-dc2d-43ac-bda7-c4b2948839a4"
  },
  "post": {
    "exerciseKey": "926774f3-32a9-453c-84e4-0c873323b3ee",
    "category": "QA",
    "title": "Vue是怎么把template模版编译成render函数的？",
    "level": 3,
    "updateAt": "2023-12-17T18:28:53+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
