{
  "data": {
    "id": 224,
    "exerciseKey": "da1881cc-64b9-40f8-8a25-a6256c1349ed",
    "category": "QA",
    "renderType": "md",
    "title": "谈谈对Vue中双向绑定的理解",
    "desc": null,
    "options": null,
    "explanation": "## 一、什么是双向绑定\n\n我们先从单向绑定切入单向绑定非常简单，就是把`Model`绑定到`View`，当我们用`JavaScript`代码更新`Model`时，`View`就会自动更新双向绑定就很容易联想到了，在单向绑定的基础上，用户更新了`View`，`Model`的数据也自动被更新了，这种情况就是双向绑定举个栗子\n\n ![](https://static.ecool.fun//article/129e9076-eae0-4f4c-87e5-3330cbb35e23.png)\n\n当用户填写表单时，`View`的状态就被更新了，如果此时可以自动更新`Model`的状态，那就相当于我们把`Model`和`View`做了双向绑定关系图如下\n\n ![](https://static.ecool.fun//article/042320e1-1cc9-4439-ac9d-bf6a7ababccf.png)\n\n## 二、双向绑定的原理是什么\n\n我们都知道 `Vue` 是数据双向绑定的框架，双向绑定由三个重要部分构成\n\n- 数据层（Model）：应用的数据及业务逻辑\n- 视图层（View）：应用的展示效果，各类UI组件\n- 业务逻辑层（ViewModel）：框架封装的核心，它负责将数据与视图关联起来\n\n而上面的这个分层的架构方案，可以用一个专业术语进行称呼：`MVVM`这里的控制层的核心功能便是 “数据双向绑定” 。自然，我们只需弄懂它是什么，便可以进一步了解数据绑定的原理\n\n### 理解ViewModel\n\n它的主要职责就是：\n\n- 数据变化后更新视图\n- 视图变化后更新数据\n\n当然，它还有两个主要部分组成\n\n- 监听器（Observer）：对所有数据的属性进行监听\n- 解析器（Compiler）：对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数\n\n### 三、实现双向绑定\n\n我们还是以`Vue`为例，先来看看`Vue`中的双向绑定流程是什么的\n\n1.  `new Vue()`首先执行初始化，对`data`执行响应化处理，这个过程发生`Observe`中\n2.  同时对模板执行编译，找到其中动态绑定的数据，从`data`中获取并初始化视图，这个过程发生在`Compile`中\n3.  同时定义⼀个更新函数和`Watcher`，将来对应数据变化时`Watcher`会调用更新函数\n4.  由于`data`的某个`key`在⼀个视图中可能出现多次，所以每个`key`都需要⼀个管家`Dep`来管理多个`Watcher`\n5.  将来data中数据⼀旦发生变化，会首先找到对应的`Dep`，通知所有`Watcher`执行更新函数\n\n流程图如下：\n\n ![](https://static.ecool.fun//article/7e2d907a-e80d-4e00-ab72-4f829010bd47.png)\n\n### 实现\n\n先来一个构造函数：执行初始化，对`data`执行响应化处理\n\n```js\nclass Vue {  \n  constructor(options) {  \n    this.$options = options;  \n    this.$data = options.data;  \n        \n    // 对data选项做响应式处理  \n    observe(this.$data);  \n        \n    // 代理data到vm上  \n    proxy(this);  \n        \n    // 执行编译  \n    new Compile(options.el, this);  \n  }  \n}  \n```\n\n对`data`选项执行响应化具体操作\n\n```js\nfunction observe(obj) {  \n  if (typeof obj !== \"object\" || obj == null) {  \n    return;  \n  }  \n  new Observer(obj);  \n}  \n  \nclass Observer {  \n  constructor(value) {  \n    this.value = value;  \n    this.walk(value);  \n  }  \n  walk(obj) {  \n    Object.keys(obj).forEach((key) => {  \n      defineReactive(obj, key, obj[key]);  \n    });  \n  }  \n}  \n```\n\n#### 编译`Compile`\n\n对每个元素节点的指令进行扫描跟解析,根据指令模板替换数据,以及绑定相应的更新函数\n\n ![](https://static.ecool.fun//article/81fac2e4-25a8-4a51-adff-143803d0099a.png)\n\n```\nclass Compile {  \n  constructor(el, vm) {  \n    this.$vm = vm;  \n    this.$el = document.querySelector(el);  // 获取dom  \n    if (this.$el) {  \n      this.compile(this.$el);  \n    }  \n  }  \n  compile(el) {  \n    const childNodes = el.childNodes;   \n    Array.from(childNodes).forEach((node) => { // 遍历子元素  \n      if (this.isElement(node)) {   // 判断是否为节点  \n        console.log(\"编译元素\" + node.nodeName);  \n      } else if (this.isInterpolation(node)) {  \n        console.log(\"编译插值⽂本\" + node.textContent);  // 判断是否为插值文本 {{}}  \n      }  \n      if (node.childNodes && node.childNodes.length > 0) {  // 判断是否有子元素  \n        this.compile(node);  // 对子元素进行递归遍历  \n      }  \n    });  \n  }  \n  isElement(node) {  \n    return node.nodeType == 1;  \n  }  \n  isInterpolation(node) {  \n    return node.nodeType == 3 && /\\{\\{(.*)\\}\\}/.test(node.textContent);  \n  }  \n}  \n  \n```\n\n#### 依赖收集\n\n视图中会用到`data`中某`key`，这称为依赖。同⼀个`key`可能出现多次，每次都需要收集出来用⼀个`Watcher`来维护它们，此过程称为依赖收集多个`Watcher`需要⼀个`Dep`来管理，需要更新时由`Dep`统⼀通知\n\n ![](https://static.ecool.fun//article/7a337c07-fe16-4da1-ba47-28c28a4a61c6.png)\n\n实现思路\n\n 1. `defineReactive`时为每⼀个`key`创建⼀个`Dep`实例\n 2. 初始化视图时读取某个`key`，例如`name1`，创建⼀个`watcher1`\n 3. 由于触发`name1`的`getter`方法，便将`watcher1`添加到`name1`对应的Dep中\n 4. 当`name1`更新，`setter`触发时，便可通过对应`Dep`通知其管理所有`Watcher`更新\n\n```js\n// 负责更新视图  \nclass Watcher {  \n  constructor(vm, key, updater) {  \n    this.vm = vm  \n    this.key = key  \n    this.updaterFn = updater  \n  \n    // 创建实例时，把当前实例指定到Dep.target静态属性上  \n    Dep.target = this  \n    // 读一下key，触发get  \n    vm[key]  \n    // 置空  \n    Dep.target = null  \n  }  \n  \n  // 未来执行dom更新函数，由dep调用的  \n  update() {  \n    this.updaterFn.call(this.vm, this.vm[this.key])  \n  }  \n}  \n```\n\n声明`Dep`\n\n```js\nclass Dep {  \n  constructor() {  \n    this.deps = [];  // 依赖管理  \n  }  \n  addDep(dep) {  \n    this.deps.push(dep);  \n  }  \n  notify() {   \n    this.deps.forEach((dep) => dep.update());  \n  }  \n}  \n```\n\n创建`watcher`时触发`getter`\n\n```js\nclass Watcher {  \n  constructor(vm, key, updateFn) {  \n    Dep.target = this;  \n    this.vm[this.key];  \n    Dep.target = null;  \n  }  \n}  \n  \n```\n\n依赖收集，创建`Dep`实例\n\n```js\nfunction defineReactive(obj, key, val) {  \n  this.observe(val);  \n  const dep = new Dep();  \n  Object.defineProperty(obj, key, {  \n    get() {  \n      Dep.target && dep.addDep(Dep.target);// Dep.target也就是Watcher实例  \n      return val;  \n    },  \n    set(newVal) {  \n      if (newVal === val) return;  \n      dep.notify(); // 通知dep执行更新方法  \n    },  \n  });  \n}  \n```\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:27:36.000Z",
    "updateAt": "2024-01-25T14:31:29.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 141,
    "prev": "73413861-0e94-4d71-bff3-65e8515ddc17",
    "next": "947278fd-7485-4e8c-a704-83d48280e05a"
  },
  "post": {
    "exerciseKey": "da1881cc-64b9-40f8-8a25-a6256c1349ed",
    "category": "QA",
    "title": "谈谈对Vue中双向绑定的理解",
    "level": 2,
    "updateAt": "2024-01-25T14:31:29+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
