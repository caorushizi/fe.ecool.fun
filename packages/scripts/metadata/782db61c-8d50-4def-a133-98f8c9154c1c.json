{
  "data": {
    "id": 2797,
    "exerciseKey": "782db61c-8d50-4def-a133-98f8c9154c1c",
    "category": "QA",
    "renderType": "md",
    "title": "Vue 是如何实现 MVVM 的？",
    "desc": "",
    "options": "",
    "explanation": "Vue.js 实现 MVVM（Model-View-ViewModel）模式的方式可以通过以下几个核心部分来理解：\n\n### **1. MVVM 架构概述**\n\n- **Model**：数据层，代表应用的状态。\n- **View**：视图层，用户界面部分，展示数据。\n- **ViewModel**：中介层，负责处理视图与模型之间的绑定和交互。\n\n### **2. Vue 的实现机制**\n\n**Vue.js** 通过以下技术和机制实现了 MVVM 架构：\n\n#### **1. 数据绑定（Data Binding）**\n\n- **响应式系统**：Vue 的响应式系统通过 `Object.defineProperty`（Vue 2.x）或者 `Proxy`（Vue 3.x）实现。它使得数据模型（Model）与视图（View）保持同步，当数据变化时，视图会自动更新。\n\n  - **Vue 2.x**：使用 `Object.defineProperty` 对数据进行 getter 和 setter 的定义，以便在数据变化时能够通知视图更新。\n  - **Vue 3.x**：使用 `Proxy` 实现更高效的响应式系统，支持更细粒度的依赖追踪和性能优化。\n\n  ```javascript\n  // Vue 2.x\n  Object.defineProperty(data, 'key', {\n    get() { /* 返回属性值 */ },\n    set(value) { /* 设置属性值并通知视图更新 */ }\n  });\n\n  // Vue 3.x\n  const reactiveData = new Proxy(data, {\n    get(target, key) { /* 处理获取操作 */ },\n    set(target, key, value) { /* 处理设置操作并通知视图更新 */ }\n  });\n  ```\n\n#### **2. 双向数据绑定（Two-Way Data Binding）**\n\n- **`v-model` 指令**：Vue 提供了 `v-model` 指令来实现双向数据绑定。它在表单控件和组件之间自动同步数据。\n\n  ```html\n  <!-- Vue 2.x -->\n  <input v-model=\"message\" />\n\n  <!-- Vue 3.x -->\n  <input v-model=\"message\" />\n  ```\n\n#### **3. 数据与视图的绑定**\n\n- **模板语法**：Vue 使用声明式模板语法（例如 `{{ message }}`）来绑定数据到视图中。这些模板会被编译成渲染函数，这些函数在每次数据变化时被调用以更新视图。\n\n  ```html\n  <p>{{ message }}</p>\n  ```\n\n- **计算属性（Computed Properties）**：计算属性可以基于依赖的响应式数据自动计算和缓存结果，并且在依赖的数据变化时自动更新。\n\n  ```javascript\n  computed: {\n    reversedMessage() {\n      return this.message.split('').reverse().join('');\n    }\n  }\n  ```\n\n- **侦听属性（Watchers）**：侦听属性可以监视数据变化并执行特定的操作，例如异步操作或复杂计算。\n\n  ```javascript\n  watch: {\n    message(newVal, oldVal) {\n      console.log(`Message changed from ${oldVal} to ${newVal}`);\n    }\n  }\n  ```\n\n#### **4. 视图模型（ViewModel）**\n\n- **Vue 实例**：Vue 实例（通过 `new Vue()`）是 MVVM 中的 ViewModel，它将数据（Model）和视图（View）结合在一起。Vue 实例管理数据、计算属性、侦听属性以及视图的更新逻辑。\n\n  ```javascript\n  new Vue({\n    el: '#app',\n    data: {\n      message: 'Hello Vue!'\n    },\n    computed: {\n      reversedMessage() {\n        return this.message.split('').reverse().join('');\n      }\n    }\n  });\n  ```\n\n#### **5. 更新机制**\n\n- **虚拟 DOM 和 diff 算法**：Vue 使用虚拟 DOM 和 diff 算法来高效地更新视图。虚拟 DOM 表示了当前视图的快照，而 diff 算法比较新旧虚拟 DOM 以找出差异，并将这些差异应用到真实 DOM 上。\n\n  ```javascript\n  // 渲染函数示例\n  function render() {\n    return _c('div', null, [ _c('p', null, [ _v(this.message) ]) ]);\n  }\n  ```",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:41.000Z",
    "updateAt": "2024-08-14T19:49:49.000Z",
    "isCollected": false,
    "currentIndex": 45,
    "filterTotalNum": 1487,
    "prev": "0d79b365-4f76-4bf2-9ec1-f55fdfc83fb7",
    "next": "cf129fa3-c1ec-4147-85ac-7274d4ea3e72"
  },
  "post": {
    "exerciseKey": "782db61c-8d50-4def-a133-98f8c9154c1c",
    "category": "QA",
    "title": "Vue 是如何实现 MVVM 的？",
    "level": 3,
    "createAt": "2024-08-13T08:30:41+00:00",
    "updateAt": "2024-08-14T19:49:49+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}