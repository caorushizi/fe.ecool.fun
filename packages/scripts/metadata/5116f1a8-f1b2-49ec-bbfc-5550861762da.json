{
  "data": {
    "id": 188,
    "exerciseKey": "5116f1a8-f1b2-49ec-bbfc-5550861762da",
    "category": "QA",
    "renderType": "md",
    "title": "你是怎么理解ES6中 Decorator 的？使用场景有哪些？",
    "desc": null,
    "options": null,
    "explanation": "## 一、介绍\n\nDecorator，即装饰器，从名字上很容易让我们联想到装饰者模式\n\n简单来讲，装饰者模式就是一种在不改变原类和使用继承的情况下，动态地扩展对象功能的设计理论。\n\n`ES6`中`Decorator`功能亦如此，其本质也不是什么高大上的结构，就是一个普通的函数，用于扩展类属性和类方法\n\n这里定义一个士兵，这时候他什么装备都没有\n\n```js\nclass soldier{ \n}\n```\n\n定义一个得到 AK 装备的函数，即装饰器\n\n```js\nfunction strong(target){\n    target.AK = true\n}\n```\n\n使用该装饰器对士兵进行增强\n\n```js\n@strong\nclass soldier{\n}\n```\n\n这时候士兵就有武器了\n\n```js\nsoldier.AK // true\n```\n\n上述代码虽然简单，但也能够清晰看到了使用`Decorator`两大优点：\n\n- 代码可读性变强了，装饰器命名相当于一个注释\n- 在不改变原有代码情况下，对原来功能进行扩展\n\n\n\n## 二、用法\n\n`Docorator`修饰对象为下面两种：\n\n- 类的装饰\n- 类属性的装饰\n\n### 类的装饰\n\n当对类本身进行装饰的时候，能够接受一个参数，即类本身\n\n将装饰器行为进行分解，大家能够有个更深入的了解\n\n```js\n@decorator\nclass A {}\n\n// 等同于\n\nclass A {}\nA = decorator(A) || A;\n```\n\n下面`@testable`就是一个装饰器，`target`就是传入的类，即`MyTestableClass`，实现了为类添加静态属性\n\n```js\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果想要传递参数，可以在装饰器外层再封装一层函数\n\n```js\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n\n\n### 类属性的装饰\n\n当对类属性进行装饰的时候，能够接受三个参数：\n\n- 类的原型对象\n- 需要装饰的属性名\n- 装饰属性名的描述对象\n\n首先定义一个`readonly`装饰器\n\n```js\nfunction readonly(target, name, descriptor){\n  descriptor.writable = false; // 将可写属性设为false\n  return descriptor;\n}\n```\n\n使用`readonly`装饰类的`name`方法\n\n```javascript\nclass Person {\n  @readonly\n  name() { return `${this.first} ${this.last}` }\n}\n```\n\n相当于以下调用\n\n```js\nreadonly(Person.prototype, 'name', descriptor);\n```\n\n如果一个方法有多个装饰器，就像洋葱一样，先从外到内进入，再由内到外执行\n\n```javascript\nfunction dec(id){\n    console.log('evaluated', id);\n    return (target, property, descriptor) =>console.log('executed', id);\n}\n\nclass Example {\n    @dec(1)\n    @dec(2)\n    method(){}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n```\n\n外层装饰器`@dec(1)`先进入，但是内层装饰器`@dec(2)`先执行\n\n\n\n### 注意\n\n装饰器不能用于修饰函数，因为函数存在变量声明情况\n\n```js\nvar counter = 0;\n\nvar add = function () {\n  counter++;\n};\n\n@add\nfunction foo() {\n}\n```\n\n编译阶段，变成下面\n\n```js\nvar counter;\nvar add;\n\n@add\nfunction foo() {\n}\n\ncounter = 0;\n\nadd = function () {\n  counter++;\n};\n```\n\n意图是执行后`counter`等于 1，但是实际上结果是`counter`等于 0\n\n\n\n## 三、使用场景\n\n基于`Decorator`强大的作用，我们能够完成各种场景的需求，下面简单列举几种：\n\n使用`react-redux`的时候，如果写成下面这种形式，既不雅观也很麻烦\n\n```js\nclass MyReactComponent extends React.Component {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);\n```\n\n通过装饰器就变得简洁多了\n\n```js\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyReactComponent extends React.Component {}\n```\n\n将`mixins`，也可以写成装饰器，让使用更为简洁了\n\n```js\nfunction mixins(...list) {\n  return function (target) {\n    Object.assign(target.prototype, ...list);\n  };\n}\n\n// 使用\nconst Foo = {\n  foo() { console.log('foo') }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo() // \"foo\"\n```\n\n\n\n下面再讲讲`core-decorators.js`几个常见的装饰器\n\n#### @antobind\n\n`autobind`装饰器使得方法中的`this`对象，绑定原始对象\n\n```javascript\nimport { autobind } from 'core-decorators';\n\nclass Person {\n  @autobind\n  getPerson() {\n    return this;\n  }\n}\n\nlet person = new Person();\nlet getPerson = person.getPerson;\n\ngetPerson() === person;\n// true\n```\n\n\n\n#### @readonly\n\n`readonly`装饰器使得属性或方法不可写\n\n```javascript\nimport { readonly } from 'core-decorators';\n\nclass Meal {\n  @readonly\n  entree = 'steak';\n}\n\nvar dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n```\n\n\n\n\n\n#### @deprecate\n\n`deprecate`或`deprecated`装饰器在控制台显示一条警告，表示该方法将废除\n\n```javascript\nimport { deprecate } from 'core-decorators';\n\nclass Person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate('功能废除了')\n  facepalmHard() {}\n}\n\nlet person = new Person();\n\nperson.facepalm();\n// DEPRECATION Person#facepalm: This function will be removed in future versions.\n\nperson.facepalmHard();\n// DEPRECATION Person#facepalmHard: 功能废除了\n\n```\n\n",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:38:39.000Z",
    "updateAt": "2024-01-24T17:32:29.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 171,
    "prev": "39513146-d7a4-41ad-963f-ba32242ddc55",
    "next": "c9d672a0-9abe-46ec-812b-fd198f1e79f4"
  },
  "post": {
    "exerciseKey": "5116f1a8-f1b2-49ec-bbfc-5550861762da",
    "category": "QA",
    "title": "你是怎么理解ES6中 Decorator 的？使用场景有哪些？",
    "level": 3.5,
    "updateAt": "2024-01-24T17:32:29+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
