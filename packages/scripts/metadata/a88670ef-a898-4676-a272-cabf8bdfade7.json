{
  "data": {
    "id": 234,
    "exerciseKey": "a88670ef-a898-4676-a272-cabf8bdfade7",
    "category": "QA",
    "renderType": "md",
    "title": "Vue组件间通信方式都有哪些? ",
    "desc": null,
    "options": null,
    "explanation": "## 一、组件间通信的概念  \n\n开始之前，我们把**组件间通信**这个词进行拆分\n\n- 组件\n- 通信\n\n都知道组件是`vue`最强大的功能之一，`vue`中每一个`.vue`我们都可以视之为一个组件。\n\n通信指的是发送者通过某种媒体以某种格式来传递信息到收信者以达到某个目的。\n\n广义上，任何信息的交通都是通信。\n\n**组件间通信**，即指组件\\(`.vue`\\)通过某种方式来传递信息以达到某个目的。\n\n举个栗子我们在使用`UI`框架中的`table`组件，可能会往`table`组件中传入某些数据，这个本质就形成了组件之间的通信。\n\n## 二、组件间通信解决了什么\n\n在古代，人们通过驿站、飞鸽传书、烽火报警、符号、语言、眼神、触碰等方式进行信息传递，到了今天，随着科技水平的飞速发展，通信基本完全利用有线或无线电完成，相继出现了有线电话、固定电话、无线电话、手机、互联网甚至视频电话等各种通信方式从上面这段话，我们可以看到通信的本质是信息同步，共享。\n\n回到`vue`中，每个组件之间的都有独自的作用域，组件间的数据是无法共享的但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的要让它们互相之间能进行通讯，这样才能构成一个有机的完整系统\n\n## 二、组件间通信的分类\n\n组件间通信的分类可以分成以下\n\n- 父子组件之间的通信\n- 兄弟组件之间的通信\n- 祖孙与后代组件之间的通信\n- 非关系组件间之间的通信\n\n关系图:\n\n ![](https://static.ecool.fun//article/b2f13367-d035-4870-b2e0-779d5909620a.png)\n\n## 三、组件间通信的方案\n\n整理`vue`中8种常规的通信方案\n\n1.  通过 props 传递\n2.  通过 \\$emit 触发自定义事件\n3.  使用 ref\n4.  EventBus\n5.  $parent 或$root\n6.  attrs 与 listeners\n7.  Provide 与 Inject\n8.  Vuex\n\n### props传递数据\n\n ![](https://static.ecool.fun//article/028189f8-0df1-4af0-b541-a6439f488209.png)\n\n- 适用场景：父组件传递数据给子组件\n- 子组件设置`props`属性，定义接收父组件传递过来的参数\n- 父组件在使用子组件标签中通过字面量来传递值\n\n`Children.vue`\n\n```js\nprops:{  \n    // 字符串形式  \n name:String // 接收的类型参数  \n    // 对象形式  \n    age:{    \n        type:Number, // 接收的类型为数值  \n        defaule:18,  // 默认值为18  \n       require:true // age属性必须传递  \n    }  \n}  \n```\n\n`Father.vue`组件\n\n```js\n<Children name=\"jack\" age=18 />  \n```\n\n### \\$emit 触发自定义事件\n\n- 适用场景：子组件传递数据给父组件\n- 子组件通过`$emit触发`自定义事件，`$emit`第二个参数为传递的数值\n- 父组件绑定监听器获取到子组件传递过来的参数\n\n`Chilfen.vue`\n\n```js\nthis.$emit('add', good)  \n```\n\n`Father.vue`\n\n```js\n<Children @add=\"cartAdd($event)\" />  \n```\n\n### ref\n\n- 父组件在使用子组件的时候设置`ref`\n- 父组件通过设置子组件`ref`来获取数据\n\n父组件\n\n```js\n<Children ref=\"foo\" />  \n  \nthis.$refs.foo  // 获取子组件实例，通过子组件实例我们就能拿到对应的数据  \n```\n\n### EventBus\n\n- 使用场景：兄弟组件传值\n- 创建一个中央事件总线`EventBus`\n- 兄弟组件通过`$emit`触发自定义事件，`$emit`第二个参数为传递的数值\n- 另一个兄弟组件通过`$on`监听自定义事件\n\n`Bus.js`\n\n```js\n// 创建一个中央时间总线类  \nclass Bus {  \n  constructor() {  \n    this.callbacks = {};   // 存放事件的名字  \n  }  \n  $on(name, fn) {  \n    this.callbacks[name] = this.callbacks[name] || [];  \n    this.callbacks[name].push(fn);  \n  }  \n  $emit(name, args) {  \n    if (this.callbacks[name]) {  \n      this.callbacks[name].forEach((cb) => cb(args));  \n    }  \n  }  \n}  \n  \n// main.js  \nVue.prototype.$bus = new Bus() // 将$bus挂载到vue实例的原型上  \n// 另一种方式  \nVue.prototype.$bus = new Vue() // Vue已经实现了Bus的功能  \n```\n\n`Children1.vue`\n\n```js\nthis.$bus.$emit('foo')  \n```\n\n`Children2.vue`\n\n```js\nthis.$bus.$on('foo', this.handle)  \n```\n\n### $parent 或 $root\n\n- 通过共同祖辈`$parent`或者`$root`搭建通信侨联\n\n兄弟组件\n\n`this.$parent.$on('add',this.add)  \n`\n\n另一个兄弟组件\n\n`this.$parent.$emit('add')  \n`\n\n### $attrs  与$ listeners\n\n -    适用场景：祖先传递数据给子孙\n -    设置批量向下传属性`$attrs`和 `$listeners`\n -    包含了父级作用域中不作为 `prop` 被识别 \\(且获取\\) 的特性绑定 \\( class 和 style 除外\\)。\n -    可以通过 `v-bind=\"$attrs\"` 传⼊内部组件\n\n```js\n// child：并未在props中声明foo  \n<p>{{$attrs.foo}}</p>  \n  \n// parent  \n<HelloWorld foo=\"foo\"/>  \n```\n\n```js\n// 给Grandson隔代传值，communication/index.vue  \n<Child2 msg=\"lalala\" @some-event=\"onSomeEvent\"></Child2>  \n  \n// Child2做展开  \n<Grandson v-bind=\"$attrs\" v-on=\"$listeners\"></Grandson>  \n  \n// Grandson使⽤  \n<div @click=\"$emit('some-event', 'msg from grandson')\">  \n{{msg}}  \n</div>  \n```\n\n### provide 与 inject\n\n- 在祖先组件定义`provide`属性，返回传递的值\n- 在后代组件通过`inject`接收组件传递过来的值\n\n祖先组件\n\n```js\nprovide(){  \n    return {  \n        foo:'foo'  \n    }  \n}  \n```\n\n后代组件\n\n```js\ninject:['foo'] // 获取到祖先组件传递过来的值  \n```\n\n### `vuex`\n\n- 适用场景: 复杂关系的组件数据传递\n- `Vuex`作用相当于一个用来存储共享变量的容器\n ![](https://static.ecool.fun//article/3073480a-ca41-4937-a711-5237a7c73506.png)\n\n- `state`用来存放共享变量的地方\n- `getter`，可以增加一个`getter`派生状态，\\(相当于`store`中的计算属性），用来获得共享变量的值\n- `mutations`用来存放修改`state`的方法。\n- `actions`也是用来存放修改state的方法，不过`action`是在`mutations`的基础上进行。常用来做一些异步操作\n\n### 小结\n\n- 父子关系的组件数据传递选择 `props`  与 `$emit`进行传递，也可选择`ref`\n- 兄弟关系的组件数据传递可选择`$bus`，其次可以选择`$parent`进行传递\n- 祖先与后代组件数据传递可选择`attrs`与`listeners`或者 `Provide`与 `Inject`\n- 复杂关系的组件数据传递可以通过`vuex`存放共享的变量\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:37:44.000Z",
    "updateAt": "2024-01-25T14:34:52.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 135,
    "prev": "a0c75651-7e44-437d-9f1f-38775698091b",
    "next": "51699bda-02be-4433-b2bf-450c2655594f"
  },
  "post": {
    "exerciseKey": "a88670ef-a898-4676-a272-cabf8bdfade7",
    "category": "QA",
    "title": "Vue组件间通信方式都有哪些? ",
    "level": 2,
    "updateAt": "2024-01-25T14:34:52+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
