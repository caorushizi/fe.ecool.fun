{
  "data": {
    "id": 179,
    "exerciseKey": "c843a307-4934-4fa2-9c16-9f06484b0021",
    "category": "QA",
    "renderType": "md",
    "title": "var、let、const之间有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "## 一、var\n\n在ES5中，顶层对象的属性和全局变量是等价的，用`var`声明的变量既是全局变量，也是顶层变量\n\n注意：顶层对象，在浏览器环境指的是`window`对象，在 `Node` 指的是`global`对象\n\n```js\nvar a = 10;\nconsole.log(window.a) // 10\n```\n\n使用`var`声明的变量存在变量提升的情况\n\n```js\nconsole.log(a) // undefined\nvar a = 20\n```\n\n在编译阶段，编译器会将其变成以下执行\n\n```js\nvar a\nconsole.log(a)\na = 20\n```\n\n使用`var`，我们能够对一个变量进行多次声明，后面声明的变量会覆盖前面的变量声明\n\n```js\nvar a = 20 \nvar a = 30\nconsole.log(a) // 30\n```\n\n在函数中使用使用`var`声明变量时候，该变量是局部的\n\n```js\nvar a = 20\nfunction change(){\n    var a = 30\n}\nchange()\nconsole.log(a) // 20 \n```\n\n而如果在函数内不使用`var`，该变量是全局的\n\n```js\nvar a = 20\nfunction change(){\n   a = 30\n}\nchange()\nconsole.log(a) // 30 \n```\n\n## 二、let\n\n`let`是`ES6`新增的命令，用来声明变量\n\n用法类似于`var`，但是所声明的变量，只在`let`命令所在的代码块内有效\n\n```js\n{\n    let a = 20\n}\nconsole.log(a) // ReferenceError: a is not defined.\n```\n\n不存在变量提升\n\n```js\nconsole.log(a) // 报错ReferenceError\nlet a = 2\n```\n\n这表示在声明它之前，变量`a`是不存在的，这时如果用到它，就会抛出一个错误\n\n只要块级作用域内存在`let`命令，这个区域就不再受外部影响\n\n```js\nvar a = 123\nif (true) {\n    a = 'abc' // ReferenceError\n    let a;\n}\n```\n\n使用`let`声明变量前，该变量都不可用，也就是大家常说的“暂时性死区”\n\n最后，`let`不允许在相同作用域中重复声明\n\n```js\nlet a = 20\nlet a = 30\n// Uncaught SyntaxError: Identifier 'a' has already been declared\n```\n\n注意的是相同作用域，下面这种情况是不会报错的\n\n```js\nlet a = 20\n{\n    let a = 30\n}\n```\n\n因此，我们不能在函数内部重新声明参数\n\n```js\nfunction func(arg) {\n  let arg;\n}\nfunc()\n// Uncaught SyntaxError: Identifier 'arg' has already been declared\n```\n\n## 三、const\n\n`const`声明一个只读的常量，一旦声明，常量的值就不能改变\n\n```js\nconst a = 1\na = 3\n// TypeError: Assignment to constant variable.\n```\n\n这意味着，`const`一旦声明变量，就必须立即初始化，不能留到以后赋值\n\n```js\nconst a;\n// SyntaxError: Missing initializer in const declaration\n```\n\n如果之前用`var`或`let`声明过变量，再用`const`声明同样会报错\n\n```js\nvar a = 20\nlet b = 20\nconst a = 30\nconst b = 30\n// 都会报错\n```\n\n`const`实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动\n\n对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量\n\n对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，`const`只能保证这个指针是固定的，并不能确保改变量的结构不变\n\n```js\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n```\n\n其它情况，`const`与`let`一致\n\n## 四、区别\n\n`var`、`let`、`const`三者区别可以围绕下面五点展开：\n\n- 变量提升\n- 暂时性死区\n- 块级作用域\n- 重复声明\n- 修改声明的变量\n- 使用\n\n\n\n### 变量提升\n\n`var `声明的变量存在变量提升，即变量可以在声明之前调用，值为`undefined`\n\n// 2023.4.25 更新\n\n~~`let`和`const`不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错~~\n\nlet / const 不存在变量提升是不完全正确的，只能说由于暂时性死区的存在使得我们无法直观感受到变量提升的效果。\n\nlet 和 const 定义的变量都会被提升，但是不会被初始化，不能被引用，不会像var定义的变量那样，初始值为undefined。\n\n当进入let变量的作用域时，会立即给它创建存储空间，但是不会对它进行初始化。\n\n变量的赋值可以分为三个阶段：\n\n* 创建变量，在内存中开辟空间\n* 初始化变量，将变量初始化为undefined\n* 真正赋值\n\n关于let、var和function：\n* let 的「创建」过程被提升了，但是初始化没有提升。\n* var 的「创建」和「初始化」都被提升了。\n* function 的「创建」「初始化」和「赋值」都被提升了。\n\n```js\n// var\nconsole.log(a)  // undefined\nvar a = 10\n\n// let \nconsole.log(b)  // Cannot access 'b' before initialization\nlet b = 10\n\n// const\nconsole.log(c)  // Cannot access 'c' before initialization\nconst c = 10\n```\n\n### 暂时性死区\n\n`var`不存在暂时性死区\n\n`let`和`const`存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量\n\n```js\n// var\nconsole.log(a)  // undefined\nvar a = 10\n\n// let\nconsole.log(b)  // Cannot access 'b' before initialization\nlet b = 10\n\n// const\nconsole.log(c)  // Cannot access 'c' before initialization\nconst c = 10\n```\n\n\n\n### 块级作用域\n\n`var`不存在块级作用域\n\n`let`和`const`存在块级作用域\n\n```js\n// var\n{\n    var a = 20\n}\nconsole.log(a)  // 20\n\n// let\n{\n    let b = 20\n}\nconsole.log(b)  // Uncaught ReferenceError: b is not defined\n\n// const\n{\n    const c = 20\n}\nconsole.log(c)  // Uncaught ReferenceError: c is not defined\n```\n\n\n\n### 重复声明\n\n`var`允许重复声明变量\n\n`let`和`const`在同一作用域不允许重复声明变量\n\n```js\n// var\nvar a = 10\nvar a = 20 // 20\n\n// let\nlet b = 10\nlet b = 20 // Identifier 'b' has already been declared\n\n// const\nconst c = 10\nconst c = 20 // Identifier 'c' has already been declared\n```\n\n\n\n### 修改声明的变量\n\n`var`和`let`可以\n\n`const`声明一个只读的常量。一旦声明，常量的值就不能改变\n\n```js\n// var\nvar a = 10\na = 20\nconsole.log(a)  // 20\n\n//let\nlet b = 10\nb = 20\nconsole.log(b)  // 20\n\n// const\nconst c = 10\nc = 20\nconsole.log(c) // Uncaught TypeError: Assignment to constant variable\n```\n\n\n\n### 使用\n能用`const`的情况尽量使用`const`，其他情况下大多数使用`let`，避免使用`var`\n",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:34:55.000Z",
    "updateAt": "2023-04-25T08:57:16.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 397,
    "prev": "212703a8-43a2-426e-b9c4-b51053436d23",
    "next": "e0f87b60-68d6-4ac6-9db9-eb35a0a6bc62"
  },
  "post": {
    "exerciseKey": "c843a307-4934-4fa2-9c16-9f06484b0021",
    "category": "QA",
    "title": "var、let、const之间有什么区别？",
    "level": 1.5,
    "updateAt": "2023-04-25T08:57:16+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}