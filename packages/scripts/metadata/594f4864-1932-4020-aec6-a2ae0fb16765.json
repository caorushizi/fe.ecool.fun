{
  "data": {
    "id": 625,
    "exerciseKey": "594f4864-1932-4020-aec6-a2ae0fb16765",
    "category": "QA",
    "renderType": "md",
    "title": "浏览器的垃圾回收机制有哪些？",
    "desc": null,
    "options": null,
    "explanation": "JS会在创建变量时自动分配内存，在不使用的时候会自动周期性的释放内存，释放的过程就叫 \"垃圾回收\"。\n\n一方面自动分配内存减轻了开发者的负担，开发者不用过多的去关注内存使用，但是另一方面，正是因为因为是自动回收，所以如果不清楚回收的机制，会很容易造成混乱，而混乱就很容易造成\"内存泄漏\"。\n\n由于是自动回收，所以就存在一个 \"内存是否需要被回收的\" 的问题，但是这个问题的判定在程序中意味着无法通过某个算法去准确完整的解决，后面探讨的回收机制只能有限的去解决一般的问题。\n\n## 回收算法\n\n垃圾回收对是否需要回收的问题主要依赖于对变量的判定是否可访问，由此衍生出两种主要的回收算法：\n\n* 标记清理\n* 引用计数\n\n### 标记清理\n\n标记清理是js最常用的回收策略，2012年后所有浏览器都使用了这种策略，此后的对回收策略的改进也是基于这个策略的改进。其策略是：\n\n* 变量进入上下文，也可理解为作用域，会加上标记，证明其存在于该上下文；\n* 将所有在上下文中的变量以及上下文中被访问引用的变量标记去掉，表明这些变量活跃有用；\n* 在此之后再被加上标记的变量标记为准备删除的变量，因为上下文中的变量已经无法访问它们；\n* 执行内存清理，销毁带标记的所有非活跃值并回收之前被占用的内存；\n\n局限：\n\n* 由于是从根对象(全局对象)开始查找，对于那些无法从根对象查询到的对象都将被清除\n* 回收后会形成内存碎片，影响后面申请大的连续内存空间\n\n### 引用计数\n\n引用计数策略相对而言不常用，因为弊端较多。其思路是对每个值记录它被引用的次数，通过最后对次数的判断(引用数为0)来决定是否保留，具体的规则有：\n\n* 声明一个变量，赋予它一个引用值时，计数+1；\n* 同一个值被赋予另外一个变量时，引用+1；\n* 保存对该值引用的变量被其他值覆盖，引用-1；\n* 引用为0，回收内存；\n\n局限：\n\n最重要的问题就是，循环引用 的问题\n\n```js\nfunction refProblem () {\n    let a = new Object();\n    let b = new Object();\n    a.c = b;\n    b.c = a;  //互相引用\n}\n```\n\n根据之前提到的规则，两个都互相引用了，引用计数不为0，所以两个变量都无法回收。如果频繁的调用改函数，则会造成很严重的内存泄漏。\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2021-09-25T02:38:47.000Z",
    "updateAt": "2024-07-20T11:53:54.000Z",
    "isCollected": false,
    "currentIndex": 875,
    "filterTotalNum": 1487,
    "prev": "4ca8dcc9-9ce6-457c-b6ef-3c2e322aeba5",
    "next": "fc324726-dc8d-4495-9da8-72fc70470b07"
  },
  "post": {
    "exerciseKey": "594f4864-1932-4020-aec6-a2ae0fb16765",
    "category": "QA",
    "title": "浏览器的垃圾回收机制有哪些？",
    "level": 3,
    "createAt": "2021-09-25T02:38:47+00:00",
    "updateAt": "2024-07-20T11:53:54+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}