{
  "data": {
    "id": 2465,
    "exerciseKey": "63516b0e-a270-459b-a84d-02e79a275639",
    "category": "QA",
    "renderType": "md",
    "title": "深度遍历与广度遍历有什么区别？",
    "desc": "",
    "options": "",
    "explanation": "深度遍历（Depth-First Search, DFS）和广度遍历（Breadth-First Search, BFS）是图和树结构中常用的遍历方法。它们在访问节点的顺序和策略上有明显的不同。以下是它们的主要区别：\n\n### 1. **深度遍历（DFS）**\n\n- **策略**：优先深入到每个分支的尽头，然后回溯到上一个节点，继续探索其他未访问的分支。\n- **数据结构**：通常使用栈（可以是显式栈或递归调用的系统栈）来实现。\n- **特点**：\n  - **遍历顺序**：沿着树的深度方向进行，先访问子节点再访问兄弟节点。\n  - **路径**：可能找到到目标节点的一条路径，但不一定是最短路径。\n  - **空间复杂度**：在最坏情况下，栈的空间复杂度是 O(h)，其中 h 是树的高度。\n\n- **示例**：\n  ```javascript\n  function dfs(node, visited) {\n      if (node === null) return;\n      console.log(node.value); // 访问节点\n      visited.add(node); // 标记为已访问\n      for (const neighbor of node.neighbors) {\n          if (!visited.has(neighbor)) {\n              dfs(neighbor, visited);\n          }\n      }\n  }\n  ```\n\n### 2. **广度遍历（BFS）**\n\n- **策略**：从根节点开始，逐层访问每个节点的所有直接子节点，然后再访问这些子节点的子节点，以此类推。\n- **数据结构**：通常使用队列来实现。\n- **特点**：\n  - **遍历顺序**：先访问当前层的所有节点，然后再访问下一层节点。\n  - **路径**：总是找到到目标节点的最短路径（如果图中的边权值相等）。\n  - **空间复杂度**：在最坏情况下，队列的空间复杂度是 O(w)，其中 w 是图中最大宽度（即最大层级节点数）。\n\n- **示例**：\n  ```javascript\n  function bfs(startNode) {\n      const queue = [startNode];\n      const visited = new Set();\n      visited.add(startNode);\n\n      while (queue.length > 0) {\n          const node = queue.shift(); // 从队列前端取出节点\n          console.log(node.value); // 访问节点\n\n          for (const neighbor of node.neighbors) {\n              if (!visited.has(neighbor)) {\n                  visited.add(neighbor);\n                  queue.push(neighbor); // 将未访问的邻居添加到队列\n              }\n          }\n      }\n  }\n  ```",
    "pivot": "",
    "vipLimit": 1,
    "level": 0.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-22T11:02:42.000Z",
    "isCollected": false,
    "currentIndex": 200,
    "filterTotalNum": 1487,
    "prev": "5296602e-3318-4ad0-81aa-023ab8454343",
    "next": "30b5a8a5-5420-49cb-94b4-f45684eecba9"
  },
  "post": {
    "exerciseKey": "63516b0e-a270-459b-a84d-02e79a275639",
    "category": "QA",
    "title": "深度遍历与广度遍历有什么区别？",
    "level": 0.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-22T11:02:42+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 21
  }
}