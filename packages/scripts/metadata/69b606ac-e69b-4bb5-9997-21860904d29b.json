{
  "data": {
    "id": 2091,
    "exerciseKey": "69b606ac-e69b-4bb5-9997-21860904d29b",
    "category": "QA",
    "renderType": "md",
    "title": "不会冒泡的事件有哪些？",
    "desc": null,
    "options": null,
    "explanation": "在 JavaScript 和浏览器中，绝大多数事件都会按照 DOM 事件流模型冒泡，即事件会从目标元素开始向上冒泡到它的父元素，并最终到达 `document` 元素。然而，也有一些事件是不会冒泡的。这些事件通常直接在目标元素上触发，并不会向上传播。\n\n以下是一些不会冒泡的事件的示例：\n\n1. **`focus`**：当元素获得焦点时触发，例如通过键盘或鼠标点击。这是一个不会冒泡的事件。\n\n2. **`blur`**：当元素失去焦点时触发。这也是一个不会冒泡的事件。\n\n3. **`focusin`**：与 `focus` 类似，但会在元素或其父元素上触发（冒泡），因此这个事件是特例。\n\n4. **`focusout`**：与 `blur` 类似，但会在元素或其父元素上触发（冒泡），因此这个事件是特例。\n\n5. **`load`**：当图像、音频、视频或其他资源加载完成时触发。例如，在 `img` 元素上触发的 `load` 事件不会冒泡。\n\n6. **`unload`**：当页面即将被导航离开时触发。这通常用于执行清理工作，也不会冒泡。\n\n7. **`stop`**：通常与 `media` 元素相关，例如 `audio` 或 `video` 元素。这是在媒体播放停止时触发的事件。\n\n8. **`readystatechange`**：当 `document` 的 `readyState` 改变时触发。这通常在页面加载时使用。\n\n9. **`scroll`**：当元素滚动时触发。这个事件在某些浏览器中可能会冒泡，但在其他浏览器中通常不会冒泡。\n\n这些事件通常直接在目标元素上触发，并且不会传播到父元素上。",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2024-04-19T01:53:21.000Z",
    "updateAt": "2024-04-19T09:53:25.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 1,
    "prev": "",
    "next": "d754a6cd-fffc-496b-92f2-b4a9bedcf15c"
  },
  "post": {
    "exerciseKey": "69b606ac-e69b-4bb5-9997-21860904d29b",
    "category": "QA",
    "title": "不会冒泡的事件有哪些？",
    "level": 1,
    "updateAt": "2024-04-19T09:53:25+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 325
  }
}