{
  "data": {
    "id": 1869,
    "exerciseKey": "68c29b20-6b2f-4efa-b6f7-772cc7958084",
    "category": "QA",
    "renderType": "md",
    "title": "用js实现二叉树的定义和基本操作",
    "desc": null,
    "options": null,
    "explanation": "树是计算机科学中经常用到的一种数据结构。树是一种非线性的数据结构，以分层的方式存储数据。树被用来存储具有层级关系的数据，比如文件系统中的文件；树还被用来存储有序列表。\n\n二叉树具有诸多优点。相对于链表来说，二叉树在进行查找时速度非常快，而相对于数组来说，为二叉树添加或删除元素也非常快。\n\n## 二叉树\n\n二叉树是一种特殊的树，表现在它的子节点个数不超过两个。且二叉树的子树有左右之分，其次序不能任意颠倒。\n\n在实现二叉树时，采用的存储结构为链式存储结构，链式结构的意思是采用一个链表来存储一颗二叉树，二叉树中每一个节点用链表的一个节点来存储，在二叉树中，节点结构至少有三个域：数据域data，左指针域left，右指针域right，如下图所示：\n\n![](https://static.ecool.fun//article/c2c927d0-7758-4e59-85ef-84a698e7c867.jpeg)\n\n二叉链表的存储结构描述如下：\n\n```js\nclass Node{\n    constructor(data, left, right){\n        this.data = data;\n        this.left = left;\n        this.right = right;\n        this.count = 1;\n    }\n}\n\n```\n\n与图1不同之处在于多了一个count变量，这个变量的作用在于，在向二叉排序树中插入节点时，如果发现有已经有相同的节点值了，就放弃插入，但是将该节点的count变量加一，这是为了后面实现统计文本中不同的单词数量而设计的。\n\n使用不同的存储结构，实现二叉树的链表的算法也不同。因此接下来的算法全都基于当前所选的存储结构。\n\n其次，将要实现的并不是普通的二叉树，而是二叉排序树，其定义为：\n\n> 二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：  \n> （1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；  \n> （2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；  \n> （3）左、右子树也分别为二叉排序树；  \n> （4）没有键值相等的节点。\n\n  \n## 二叉排序树\n\n在二叉排序树的实现了一些基本操作：插入节点，删除节点，寻找节点，以及获取最小值和最大值。\n\n代码框架：\n\n```js\nclass BSTree {\n    constructor() {\n        this.root = null;\n    }\n\n    // 删除一个节点\n    _removeNode(node, data) {\n       \n    }\n\n    // 删除给定的数据节点\n    remove(data) {\n        this.root = this._removeNode(this.root, data);\n    }\n\n    // 向二叉树中插入节点\n    insert(data) {\n        \n    }\n\n    // 寻找给定数据的节点\n    find(data) {\n        \n    }\n\n    // 获得最小值的节点\n    getMinNode(node = this.root) {\n        \n    }\n\n    // 获得最大值的节点\n    getMaxNode(node = this.root) {\n        \n    }\n}\n\n```\n\n## 实现二叉排序树的各种方法\n\n首先是insert(data)方法，从总体上来说，插入操作可以分为两步，新建值为data的节点，然后在二叉排序树中找到合适的位置插入即可。\n\n建立以data为值的新的节点比较容易，只要\n\n```js\nlet newNode = new Node(data, null, null);\n\n```\n\n即可，关键就在于如何找到正确的插入位置。\n\n这里使用parentNode来记录当前节点的父节点，初始时，该变量为null，当前节点为currNode，初始时为该二叉树的根节点。\n\n* 如果在插入时，root节点为空，则直接将新节点赋给root节点即可。\n* 如果新的节点值小于当前节点值，说明待插入的位置应在在当前节点的左子树上，那么在大于时，就应该在当前节点的右子树上。进而更新当前节点所指向的节点，直到当前节点为空时，说明找到了正确的插入位置。\n\ninsert()的具体代码如下：\n\n```js\n    // 向二叉树中插入节点\n    insert(data) {\n        let newNode = new Node(data, null, null);\n\n        if (this.root == null) {\n            this.root = newNode;\n        } else {\n            let currNode = this.root;\n            let parentNode = null;\n\n            while (true) {\n                parentNode = currNode;\n\n                if (newNode.data < currNode.data) {\n                    currNode = currNode.left;  // 更新当前指点的指向\n\n                    if (!currNode) {  // 当前节点为空时，说明找到了正确的插入位置\n                        parentNode.left = newNode;\n                        break;\n                    }\n                } else if (newNode.data > currNode.data) {\n                    currNode = currNode.right;   // 更新当前指点的指向\n\n                    if (!currNode) {  // // 当前节点为空时，说明找到了正确的插入位置\n                        parentNode.right = newNode;\n                        break;\n                    }\n                } else if (newNode.data == currNode.data) {\n                    // 如果给定的数据再次出现，就更新计数值\n                    currNode.count++;\n                    break;\n                }\n            }\n        }\n    }\n\n```\n\n  \n寻找最小值函数getMinNode()，该方法较为简单，因为是一个二叉排序树，所以最小值永远在最左边的分支上，故而一直沿着左分支走到头就是最小值了。\n\n```js\n   // 获得最小值的节点\n    getMinNode(node = this.root) {\n        let currNode = node;\n        while (currNode.left) {\n            currNode = currNode.left;\n        }\n        return currNode;\n    }\n\n```\n\n最大值也是同样的道理：\n\n```js\n   // 获得最大值的节点\n    getMaxNode(node = this.root) {\n        let currNode = node;\n        while (currNode.right) {\n            currNode = currNode.right;\n        }\n        return currNode;\n    }\n\n```\n\nfind()方法，在二叉树排序树中寻找给定的数据，比较简单：\n\n```js\n    // 寻找给定数据的节点\n    find(data) {\n        let currNode = this.root;\n        while (currNode) {\n            if (currNode.data == data) {\n                return currNode;\n            } else if (data < currNode.data) {\n                currNode = currNode.left;\n            } else {\n                currNode = currNode.right;\n            }\n        }\n        return null;\n    }\n\n```\n\n  \n接下来时较为复杂一些的remove()方法，由于删除节点操作使用到了递归的操作，所以单独定义了一个函数：\n\n```js\n_removeNode(node, data){}\n\n```\n\n这里在\\_removeNode()的方法中实现真正的删除操作。该函数的功能是删除以data为值的节点，函数名称前面有个下划线表示不应该在实例中调用此函数。\n\n这里在remove()方法中调用了这个函数：\n\n```js\nremove(data){\n    this.root = this._removeNode(this.root, data);\n}\n\n```\n\n在删除节点时，一共可以分为三种情况：\n\n1. 待删除的节点是叶子节点。\n2. 待删除的节点没有左子节点，或者没有右子节点。\n3. 待删除的节点的左右子节点均存在。\n\n当待删除的节点时叶子节点时，这种情况比较简单，直接将待删除的节点置空返回即可。\n\n当待删除的节点没有左子节点时，返回该节点的右孩子节点，并删除该节点。待删除节点没有右节点时类似处理。\n\n比较麻烦的是最后一种情况，待删除的节点的左右子节点均存在时，可以有两种做法：要么查找待删除节点左子树上的最大值，要么查找其右子树上的最小值。\n\n这里使用查找其右子树上的最小值的方法。在找到待删除节点的右子树上的最小值后，创建一个临时节点，将临时节点上的值复制到待删除节点，然后再删除临时节点。\n\n```js\n    // 删除一个节点\n    _removeNode(node, data) {\n        if (node == null) {\n            return null;\n        }\n        if (data == node.data) {\n            // 叶子节点\n            if (node.left == null && node.right == null) {\n                return null;\n            }\n\n            // 没有左节点的节点\n            if (node.left == null) return node.right;\n\n\n            //没有右节点的节点\n            if (node.right == null) return node.left;\n     \n\n            // 有两个节点的节点\n            /*  \n             做法：\n                找到待删除节点的右子树上的最小值创建一个临时节点。\n                将临时节点上的值复制到待删除节点，然后再删除临时节点\n            */\n\n            // 寻找右子树上的最小值\n            let tmpNode = this.getMinNode(node.right);\n            node.data = tmpNode.data;\n            node.right = this._removeNode(node.right, tmpNode.data);\n            return node;\n        } else if (data < node.data) {  // 待删除节点在左子树上\n            node.left = this._removeNode(node.left, data);\n            return node;\n        } else {  // 待删除节点在右子树上\n            node.right = this._removeNode(node.right, data);\n            return node;\n        }\n    }\n\n```\n\n该函数使用了递归的操作来删除一个节点，如果传入待删除的数据值正好等于传入的节点的数据值时，就开始判断是上面提到的3中情况的那一种。如果待删除数据值小于当前节点数据值，则说明待删除的数据在当前节点的左子树上，反之在右子树上。\n  \n  \n## 测试\n\n由于准备将二叉排序树的遍历操作写在下一篇中，所以担心方法可能写错了的小伙伴可能展示无法测试所写的插入和删除操作正确与否。先用写的获取最大值和最小值来测试下吧。\n\n```js\nlet myTree = new BSTree();\n\nmyTree.insert(20);\nmyTree.insert(13);\nmyTree.insert(7);\nmyTree.insert(9);\nmyTree.insert(15);\nmyTree.insert(14);\nmyTree.insert(42);\nmyTree.insert(22);\nmyTree.insert(21);\nmyTree.insert(24);\nmyTree.insert(57);\n\n```\n\n新建后的二叉排序树如下图所示：\n\n![](https://static.ecool.fun//article/fad63b51-599a-4113-a217-0c26201abf2a.jpeg)\n\n  \n获取最大值试一下：\n\n```js\nconsole.log(myTree.getMaxNode());  // Node {data: 57, left: null, right: null, count: 1}\n\n```\n\n可以看到值为57的节点确实没有左右子树。\n\n最小值：\n\n```js\nconsole.log(myTree.getMinNode());  // Node {data: 7, left: null, right: Node, count: 1}\n\n```\n\n可以看到值为7的节点只有右子树，与上图所示相同。\n\n删除节点7，模拟下删除时有右子节点的情况：\n\n```js\nmyTree.remove(7);\nconsole.log(myTree.getMinNode());  // Node {data: 9, left: null, right: null, count: 1}\n\n```\n\n可见值为9的节点取代了原来值为7的节点的位置。\n\n删除节点42，模拟下删除时左右子树均存在的情况：\n\n```js\nmyTree.remove(42);\nconsole.log(myTree.getMaxNode());  // Node {data: 57, left: Node, right: null, count: 1}\n\n```\n\n在删除值为42的节点时，使用的方法时寻找其右子树上的最大值，为57。将待删除的节点的值修改为57，然后在其右子树上删除值为57的节点即可。\n\n根据返回的结果来看，删除后最大值为57，其右子树为空。可见是正确的。\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2022-08-07T14:42:14.000Z",
    "updateAt": "2024-08-10T17:06:54.000Z",
    "isCollected": false,
    "currentIndex": 520,
    "filterTotalNum": 1487,
    "prev": "c7b08d95-edf0-4d08-ac73-ce0b87c08e85",
    "next": "be48725a-798c-4ae8-bd7e-47197b789802"
  },
  "post": {
    "exerciseKey": "68c29b20-6b2f-4efa-b6f7-772cc7958084",
    "category": "QA",
    "title": "用js实现二叉树的定义和基本操作",
    "level": 3,
    "createAt": "2022-08-07T14:42:14+00:00",
    "updateAt": "2024-08-10T17:06:54+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}