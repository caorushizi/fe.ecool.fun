{
  "data": {
    "id": 2076,
    "exerciseKey": "d23c0c59-8096-4636-8c77-e74279986a18",
    "category": "QA",
    "renderType": "md",
    "title": "vue 中怎么实现样式隔离？",
    "desc": null,
    "options": null,
    "explanation": "Vue 提供了几种方式来实现样式的隔离：\n\n1. **作用域样式（Scoped Styles）**：\n   - 在 Vue 单文件组件中，可以使用 `scoped` 特性将样式限定于当前组件的作用域。\n   - 使用`<style scoped>`标签包裹的样式只对当前组件起作用，不会影响其他组件或全局样式。\n   - Vue 实现作用域样式的方式是通过给每个选择器添加一个唯一的属性选择器，以确保样式仅适用于当前组件。\n\n2. **CSS Modules**：\n   - Vue 支持使用 CSS Modules 来实现样式的模块化和隔离。\n   - 在 Vue 单文件组件中，可以借助 `module` 特性启用 CSS Modules 功能，在样式文件中使用类似 `:local(.className)` 的语法来定义局部样式。\n   - CSS Modules 会自动生成唯一的类名，并在编译时将类名与元素关联起来，从而实现样式的隔离和局部作用域。\n\n3. **CSS-in-JS 方案**：\n   - Vue 也可以结合 CSS-in-JS 库（如 `styled-components`、`emotion` 等）来实现样式的隔离。\n   - 使用这种方式，可以直接在组件代码中编写样式，并通过 JavaScript 对象或模板字符串的形式动态生成样式。\n   - CSS-in-JS 方案将样式与组件紧密关联，实现了更高程度的样式隔离和可重用性。\n\n这些方法各有特点，可以根据实际需求选择合适的方式来实现样式的隔离。作用域样式和 CSS Modules 是 Vue 官方提供的内置功能，而 CSS-in-JS 则是通过第三方库来实现。根据项目的规模和需求，选择适合的方式可以更好地管理和维护样式。",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2023-12-17T10:54:06.000Z",
    "updateAt": "2024-08-10T17:07:36.000Z",
    "isCollected": false,
    "currentIndex": 315,
    "filterTotalNum": 1487,
    "prev": "bcfc6fa0-1f1c-4aa4-b412-fd305db93c58",
    "next": "d39feeb7-a118-4a67-b164-8af8c3fdd73a"
  },
  "post": {
    "exerciseKey": "d23c0c59-8096-4636-8c77-e74279986a18",
    "category": "QA",
    "title": "vue 中怎么实现样式隔离？",
    "level": 2,
    "createAt": "2023-12-17T10:54:06+00:00",
    "updateAt": "2024-08-10T17:07:36+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}