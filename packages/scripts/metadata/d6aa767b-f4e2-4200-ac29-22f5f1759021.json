{
  "data": {
    "id": 580,
    "exerciseKey": "d6aa767b-f4e2-4200-ac29-22f5f1759021",
    "category": "QA",
    "renderType": "md",
    "title": "React Fiber 是如何实现更新过程可控？",
    "desc": null,
    "options": null,
    "explanation": "更新过程的可控主要体现在下面几个方面：\n\n* 任务拆分\n* 任务挂起、恢复、终止\n* 任务具备优先级\n\n## 任务拆分\n\n在 React Fiber 机制中，它采用\"化整为零\"的思想，将调和阶段（Reconciler）递归遍历 VDOM 这个大任务分成若干小任务，每个任务只负责一个节点的处理。\n\n## 任务挂起、恢复、终止\n\n* workInProgress tree\n\nworkInProgress 代表当前正在执行更新的 Fiber 树。在 render 或者 setState 后，会构建一颗 Fiber 树，也就是 workInProgress tree，这棵树在构建每一个节点的时候会收集当前节点的副作用，整棵树构建完成后，会形成一条完整的副作用链。\n\n* currentFiber tree\n\ncurrentFiber 表示上次渲染构建的 Filber 树。在每一次更新完成后 workInProgress 会赋值给 currentFiber。在新一轮更新时 workInProgress tree 再重新构建，新 workInProgress 的节点通过 alternate 属性和 currentFiber 的节点建立联系。\n\n在新 workInProgress tree 的创建过程中，会同 currentFiber 的对应节点进行 Diff 比较，收集副作用。同时也会复用和 currentFiber 对应的节点对象，减少新创建对象带来的开销。也就是说无论是创建还是更新、挂起、恢复以及终止操作都是发生在 workInProgress tree 创建过程中的。workInProgress tree 构建过程其实就是循环的执行任务和创建下一个任务。\n\n### 挂起\n\n当第一个小任务完成后，先判断这一帧是否还有空闲时间，没有就挂起下一个任务的执行，记住当前挂起的节点，让出控制权给浏览器执行更高优先级的任务。\n\n### 恢复\n\n在浏览器渲染完一帧后，判断当前帧是否有剩余时间，如果有就恢复执行之前挂起的任务。如果没有任务需要处理，代表调和阶段完成，可以开始进入渲染阶段。\n\n* 如何判断一帧是否有空闲时间的呢？\n\n使用前面提到的 RIC (RequestIdleCallback) 浏览器原生 API，React 源码中为了兼容低版本的浏览器，对该方法进行了 Polyfill。\n\n* 恢复执行的时候又是如何知道下一个任务是什么呢？\n\n答案是在前面提到的链表。在 React Fiber 中每个任务其实就是在处理一个 FiberNode 对象，然后又生成下一个任务需要处理的 FiberNode。\n\n### 终止\n\n其实并不是每次更新都会走到提交阶段。当在调和过程中触发了新的更新，在执行下一个任务的时候，判断是否有优先级更高的执行任务，如果有就终止原来将要执行的任务，开始新的 workInProgressFiber 树构建过程，开始新的更新流程。这样可以避免重复更新操作。这也是在 React 16 以后生命周期函数 componentWillMount 有可能会执行多次的原因。\n\n![image.png](https://static.ecool.fun//article/a130fcb4-2a59-4298-82c0-999f80c01a51.png)\n\n## 任务具备优先级\n\nReact Fiber 除了通过挂起，恢复和终止来控制更新外，还给每个任务分配了优先级。具体点就是在创建或者更新 FiberNode 的时候，通过算法给每个任务分配一个到期时间（expirationTime）。在每个任务执行的时候除了判断剩余时间，如果当前处理节点已经过期，那么无论现在是否有空闲时间都必须执行该任务。过期时间的大小还代表着任务的优先级。\n\n任务在执行过程中顺便收集了每个 FiberNode 的副作用，将有副作用的节点通过 firstEffect、lastEffect、nextEffect 形成一条副作用单链表 A1(TEXT)-B1(TEXT)-C1(TEXT)-C1-C2(TEXT)-C2-B1-B2(TEXT)-B2-A。\n\n其实最终都是为了收集到这条副作用链表，有了它，在接下来的渲染阶段就通过遍历副作用链完成 DOM 更新。这里需要注意，更新真实 DOM 的这个动作是一气呵成的，不能中断，不然会造成视觉上的不连贯（commit）。\n\n\n\n\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 4,
    "appId": 7,
    "createAt": "2021-08-07T09:11:42.000Z",
    "updateAt": "2024-08-10T17:05:40.000Z",
    "isCollected": false,
    "currentIndex": 920,
    "filterTotalNum": 1487,
    "prev": "828350f9-b3d1-4593-8306-e5bc567b5c28",
    "next": "f317438d-44bf-4476-8f9d-b1e51521fa20"
  },
  "post": {
    "exerciseKey": "d6aa767b-f4e2-4200-ac29-22f5f1759021",
    "category": "QA",
    "title": "React Fiber 是如何实现更新过程可控？",
    "level": 4,
    "createAt": "2021-08-07T09:11:42+00:00",
    "updateAt": "2024-08-10T17:05:40+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}