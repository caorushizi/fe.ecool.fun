{
  "data": {
    "id": 1541,
    "exerciseKey": "cdeec2cc-5772-4c63-b7f0-34f864ea886d",
    "category": "QA",
    "renderType": "md",
    "title": "介绍一下 setTimeout 的运行机制",
    "desc": null,
    "options": null,
    "explanation": "## setTimeout简介\n\nsetTimeout()函数：用来指定某个函数或某段代码在多少毫秒之后执行。它返回一个整数，表示定时器timer的编号，可以用来取消该定时器。\n\n先看个简单的例子：\n\n```js\nconsole.log(1);\nsetTimeout(function () {\n    console.log(2);\n}, 0);\nconsole.log(3);\n```\n\n问：最后的打印顺序是什么？（如果不了解js的运行机制就会答错）\n\n正确答案：`1 3 2`\n\n解析：无论setTimeout的执行时间是0还是1000，结果都是先输出3后输出2，这就是面试官常常考查的js运行机制的问题，接下来我们要引入一个概念，JavaScript 是单线程的。\n\n## JavaScript 单线程\n\nJavasScript引擎是基于事件驱动和单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行程序，即主线程。那么单线程的JavasScript是怎么实现“非阻塞执行”呢？是通过**任务队列**。\n\n所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。\n\n单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。但是如果有些任务很慢时（比如Ajax操作从网络读取数据），我还是要等结果在执行后一个任务吗？于是，有了一种异步任务。\n\n同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；而异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有主线程执行完毕，主线程去通知\"任务队列\"，某个异步任务可以执行了，该任务才会进入主线程执行。\n\n所以js的运行机制如下：\n\n* 1) 所有同步任务都在主线程上执行，形成一个执行栈（Call Stack）\n* 2) 主线程之外，还存在一个\"任务队列\"（task queue）。只要异步任务有了运行结果，就在\"任务队列\"之中放置一个事件\n* 3) 一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。\n* 4) 主线程不断重复上面的第三步。\n\n## setTimeout运行机制\n\nsetTimeout 和 setInterval的运行机制，其实就是将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮 Event Loop 时重新判断。\n\n这意味着，setTimeout指定的代码，必须等到本次执行的所有同步代码都执行完，才会执行。\n\n\n\n\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-11-17T11:20:11.000Z",
    "updateAt": "2022-08-07T22:27:06.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 501,
    "prev": "696a79c6-1e6d-4e66-ad11-2e072c9c62d7",
    "next": "3f897e08-e0f7-4b68-90ac-e643167754bf"
  },
  "post": {
    "exerciseKey": "cdeec2cc-5772-4c63-b7f0-34f864ea886d",
    "category": "QA",
    "title": "介绍一下 setTimeout 的运行机制",
    "level": 3,
    "updateAt": "2022-08-07T22:27:06+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
