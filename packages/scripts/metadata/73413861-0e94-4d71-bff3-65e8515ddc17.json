{
  "data": {
    "id": 225,
    "exerciseKey": "73413861-0e94-4d71-bff3-65e8515ddc17",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对SPA的理解",
    "desc": null,
    "options": null,
    "explanation": "## 一、什么是SPA\n\nSPA（single-page application），翻译过来就是单页应用`SPA`是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（`HTML`、`JavaScript`和`CSS`）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面页面在任何时间点都不会重新加载，也不会将控制转移到其他页面举个例子来讲就是一个杯子，早上装的牛奶，中午装的是开水，晚上装的是茶，我们发现，变的始终是杯子里的内容，而杯子始终是那个杯子结构如下图\n\n ![](https://static.ecool.fun//article/d35464ad-3571-4e60-852a-c65146180338.png)\n\n我们熟知的JS框架如`react`,`vue`,`angular`,`ember`都属于`SPA`\n\n## 二、SPA和MPA的区别\n\n上面大家已经对单页面有所了解了，下面来讲讲多页应用MPA（MultiPage-page application），翻译过来就是多页应用在`MPA`中，每个页面都是一个主页面，都是独立的当我们在访问另一个页面的时候，都需要重新加载`html`、`css`、`js`文件，公共文件则根据需求按需加载如下图\n\n ![](https://static.ecool.fun//article/834320df-dc4b-4ab8-8794-3957ad6c6abc.png)\n\n#### 单页应用与多页应用的区别\n\n|  | 单页面应用（SPA） | 多页面应用（MPA） |\n| :-- | :-- | :-- |\n| 组成 | 一个主页面和多个页面片段 | 多个主页面 |\n| 刷新方式 | 局部刷新 | 整页刷新 |\n| url模式 | 哈希模式 | 历史模式 |\n| SEO搜索引擎优化 | 难实现，可使用SSR方式改善 | 容易实现 |\n| 数据传递 | 容易 | 通过url、cookie、localStorage等传递 |\n| 页面切换 | 速度快，用户体验良好 | 切换加载资源，速度慢，用户体验差 |\n| 维护成本 | 相对容易 | 相对复杂 |\n\n#### 单页应用优缺点\n\n优点：\n\n- 具有桌面应用的即时性、网站的可移植性和可访问性\n- 用户体验好、快，内容的改变不需要重新加载整个页面\n- 良好的前后端分离，分工更明确\n\n缺点：\n\n- 不利于搜索引擎的抓取\n- 首次渲染速度相对较慢\n- \n\n## 三、实现一个SPA\n\n#### 原理\n\n1.  监听地址栏中`hash`变化驱动界面变化\n2.  用`pushsate`记录浏览器的历史，驱动界面发送变化\n\n ![](https://static.ecool.fun//article/7f8f6dfb-74bb-4a6c-b81b-706d3555291d.png)\n\n#### 实现\n\n##### `hash` 模式\n\n核心通过监听`url`中的`hash`来进行路由跳转\n\n```js\n// 定义 Router  \nclass Router {  \n    constructor () {  \n        this.routes = {}; // 存放路由path及callback  \n        this.currentUrl = '';  \n          \n        // 监听路由change调用相对应的路由回调  \n        window.addEventListener('load', this.refresh, false);  \n        window.addEventListener('hashchange', this.refresh, false);  \n    }  \n      \n    route(path, callback){  \n        this.routes[path] = callback;  \n    }  \n      \n    push(path) {  \n        this.routes[path] && this.routes[path]()  \n    }  \n}  \n  \n// 使用 router  \nwindow.miniRouter = new Router();  \nminiRouter.route('/', () => console.log('page1'))  \nminiRouter.route('/page2', () => console.log('page2'))  \n  \nminiRouter.push('/') // page1  \nminiRouter.push('/page2') // page2  \n```\n\n##### history模式\n\n`history` 模式核心借用 `HTML5 history api`，`api` 提供了丰富的 `router` 相关属性先了解一个几个相关的api\n\n -    `history.pushState` 浏览器历史纪录添加记录\n -    `history.replaceState`修改浏览器历史纪录中当前纪录\n -    `history.popState` 当 `history` 发生变化时触发\n\n```js\n// 定义 Router  \nclass Router {  \n    constructor () {  \n        this.routes = {};  \n        this.listerPopState()  \n    }  \n      \n    init(path) {  \n        history.replaceState({path: path}, null, path);  \n        this.routes[path] && this.routes[path]();  \n    }  \n      \n    route(path, callback){  \n        this.routes[path] = callback;  \n    }  \n      \n    push(path) {  \n        history.pushState({path: path}, null, path);  \n        this.routes[path] && this.routes[path]();  \n    }  \n      \n    listerPopState () {  \n        window.addEventListener('popstate' , e => {  \n            const path = e.state && e.state.path;  \n            this.routers[path] && this.routers[path]()  \n        })  \n    }  \n}  \n  \n// 使用 Router  \n  \nwindow.miniRouter = new Router();  \nminiRouter.route('/', ()=> console.log('page1'))  \nminiRouter.route('/page2', ()=> console.log('page2'))  \n  \n// 跳转  \nminiRouter.push('/page2')  // page2  \n```\n\n### 四、题外话：如何给SPA做SEO\n\n下面给出基于`Vue`的`SPA`如何实现`SEO`的三种方式\n\n1.  **SSR服务端渲染**\n\n将组件或页面通过服务器生成html，再返回给浏览器，如`nuxt.js`\n\n2.  **静态化**\n\n目前主流的静态化主要有两种：（1）一种是通过程序将动态页面抓取并保存为静态页面，这样的页面的实际存在于服务器的硬盘中（2）另外一种是通过WEB服务器的 `URL Rewrite`的方式，它的原理是通过web服务器内部模块按一定规则将外部的URL请求转化为内部的文件地址，一句话来说就是把外部请求的静态地址转化为实际的动态页面地址，而静态页面实际是不存在的。这两种方法都达到了实现URL静态化的效果\n\n3.  **使用`Phantomjs`针对爬虫处理**\n\n原理是通过`Nginx`配置，判断访问来源是否为爬虫，如果是则搜索引擎的爬虫请求会转发到一个`node server`，再通过`PhantomJS`来解析完整的`HTML`，返回给爬虫。下面是大致流程图\n\n ![](https://static.ecool.fun//article/3777728d-9583-4965-abc2-582e1b56afa3.png)\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2.5,
    "appId": 7,
    "createAt": "2021-07-04T03:29:04.000Z",
    "updateAt": "2024-08-10T17:04:37.000Z",
    "isCollected": false,
    "currentIndex": 1274,
    "filterTotalNum": 1487,
    "prev": "db22b09c-fdbb-4a6c-8fdd-2ad65bb11846",
    "next": "da1881cc-64b9-40f8-8a25-a6256c1349ed"
  },
  "post": {
    "exerciseKey": "73413861-0e94-4d71-bff3-65e8515ddc17",
    "category": "QA",
    "title": "说说你对SPA的理解",
    "level": 2.5,
    "createAt": "2021-07-04T03:29:04+00:00",
    "updateAt": "2024-08-10T17:04:37+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}