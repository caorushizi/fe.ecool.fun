{
  "data": {
    "id": 2079,
    "exerciseKey": "e492260e-4dc9-43cf-a2ee-315edadeb931",
    "category": "QA",
    "renderType": "md",
    "title": "vue的祖孙组件的通信方案有哪些？",
    "desc": null,
    "options": null,
    "explanation": "在 Vue 中，祖孙组件之间的通信可以通过以下几种方式来实现：\n\n1. **Props / $emit**:\n   - 祖组件通过 `props` 将数据传递给子组件，并且子组件通过 `$emit` 触发事件将数据传递回祖组件。\n   - 这是一种常见的父子组件通信方式，通过属性(props)和自定义事件($emit)进行数据交流。\n\n2. **Provide / Inject**:\n   - 使用 `provide` 在祖组件中提供数据，然后使用 `inject` 在孙组件中注入这些数据。\n   - 这种方式允许祖组件向下级组件共享数据，无需显式地将数据逐层传递。但要注意潜在的耦合性。\n\n3. **Event Bus**:\n   - 创建一个全局的事件总线(Event Bus)，用于在祖孙组件之间发送和接收事件。\n   - 通过在事件总线上注册事件监听器和触发器，组件可以相互通信，传递数据和触发特定操作。\n\n4. **Vuex**:\n   - 使用 Vuex 进行状态管理，可以在祖孙组件之间共享和更新数据。\n   - Vuex 是 Vue 的官方状态管理库，提供了集中式存储管理和响应式更新，使得不同组件之间的通信更加简单和可预测。\n\n这些通信方式各有特点，可以根据具体情况选择合适的方式来实现祖孙组件之间的通信。对于简单的父子组件通信，Props / $emit 是常用的方式；而对于更复杂的应用程序状态管理和跨层级通信，使用 Vuex 或 Event Bus 可能更适合。",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2023-12-17T11:01:18.000Z",
    "updateAt": "2023-12-17T19:01:22.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 247,
    "prev": "4a0ca854-e576-4046-a740-f1ef8d4060c9",
    "next": "68243618-bcf1-4cfa-a5c1-544dee6ac436"
  },
  "post": {
    "exerciseKey": "e492260e-4dc9-43cf-a2ee-315edadeb931",
    "category": "QA",
    "title": "vue的祖孙组件的通信方案有哪些？",
    "level": 2.5,
    "updateAt": "2023-12-17T19:01:22+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
