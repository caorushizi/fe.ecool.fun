{
  "data": {
    "id": 387,
    "exerciseKey": "3c6c5215-5db9-45ea-b2c1-6cc1c6aa6acd",
    "category": "QA",
    "renderType": "md",
    "title": "说说webpack中常见的Loader？解决了什么问题？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n`loader` 用于对模块的\"源代码\"进行转换，在 `import` 或\"加载\"模块时预处理文件\n\n`webpack`做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。如下图所示：\n\n ![](https://static.ecool.fun//article/af392531-d34f-48c0-937d-496017a3df23.png)\n\n在`webpack`内部中，任何文件都是模块，不仅仅只是`js`文件\n\n默认情况下，在遇到`import`或者`load`加载模块的时候，`webpack`只支持对`js`文件打包\n\n像`css`、`sass`、`png`等这些类型的文件的时候，`webpack`则无能为力，这时候就需要配置对应的`loader`进行文件内容的解析\n\n在加载模块的时候，执行顺序如下：\n\n ![](https://static.ecool.fun//article/b3adf7c6-9956-47c3-8e33-e01cd21283a7.png)\n\n\n\n当 `webpack` 碰到不识别的模块的时候，`webpack` 会在配置的中查找该文件解析规则\n\n\n\n关于配置`loader`的方式有三种：\n\n- 配置方式（推荐）：在 webpack.config.js文件中指定 loader\n- 内联方式：在每个 import 语句中显式指定 loader\n- CLI 方式：在 shell 命令中指定它们\n\n\n### 配置方式\n\n关于`loader`的配置，我们是写在`module.rules`属性中，属性介绍如下：\n\n- `rules`是一个数组的形式，因此我们可以配置很多个`loader`\n\n- 每一个`loader`对应一个对象的形式，对象属性`test` 为匹配的规则，一般情况为正则表达式\n\n- 属性`use`针对匹配到文件类型，调用对应的 `loader` 进行处理\n\n代码编写，如下形式：\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          { loader: 'style-loader' },\n          {\n            loader: 'css-loader',\n            options: {\n              modules: true\n            }\n          },\n          { loader: 'sass-loader' }\n        ]\n      }\n    ]\n  }\n};\n```\n\n\n\n## 二、特性\n\n这里继续拿上述代码，来讲讲`loader`的特性\n\n从上述代码可以看到，在处理`css`模块的时候，`use`属性中配置了三个`loader`分别处理`css`文件\n\n因为`loader `支持链式调用，链中的每个` loader `会处理之前已处理过的资源，最终变为`js`代码。顺序为相反的顺序执行，即上述执行方式为`sass-loader`、`css-loader`、`style-loader`\n\n除此之外，`loader`的特性还有如下：\n\n- loader 可以是同步的，也可以是异步的\n- loader 运行在 Node.js 中，并且能够执行任何操作\n- 除了常见的通过 `package.json` 的 `main` 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 `loader` 字段直接引用一个模块\n- 插件(plugin)可以为 loader 带来更多特性\n- loader 能够产生额外的任意文件\n\n可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言翻译和更多其他特性\n\n\n\n\n\n## 三、常见的loader\n\n在页面开发过程中，我们经常性加载除了`js`文件以外的内容，这时候我们就需要配置响应的`loader`进行加载\n\n常见的`loader`如下：\n\n- style-loader: 将css添加到DOM的内联样式标签style里\n- css-loader :允许将css文件通过require的方式引入，并返回css代码\n- less-loader: 处理less\n- sass-loader: 处理sass\n- postcss-loader: 用postcss来处理CSS\n- autoprefixer-loader: 处理CSS3属性前缀，已被弃用，建议直接使用postcss\n- file-loader: 分发文件到output目录并返回相对路径\n- url-loader: 和file-loader类似，但是当文件小于设定的limit时可以返回一个Data Url\n- html-minify-loader: 压缩HTML\n- babel-loader :用babel来转换ES6文件到ES\n\n\n\n下面给出一些常见的`loader`的使用：\n\n### css-loader\n\n分析 `css` 模块之间的关系，并合成⼀个 `css`\n\n```bash\nnpm install --save-dev css-loader\n```\n\n```js\nrules: [\n  ...,\n {\n  test: /\\.css$/,\n    use: {\n      loader: \"css-loader\",\n      options: {\n     // 启用/禁用 url() 处理\n     url: true,\n     // 启用/禁用 @import 处理\n     import: true,\n        // 启用/禁用 Sourcemap\n        sourceMap: false\n      }\n    }\n }\n]\n```\n\n如果只通过`css-loader`加载文件，这时候页面代码设置的样式并没有生效\n\n原因在于，`css-loader`只是负责将`.css`文件进行一个解析，而并不会将解析后的`css`插入到页面中\n\n如果我们希望再完成插入`style`的操作，那么我们还需要另外一个`loader`，就是`style-loader`\n\n\n\n### style-loader\n\n把 `css-loader` 生成的内容，用 `style` 标签挂载到页面的 `head` 中\n\n```bash\nnpm install --save-dev style-loader\n```\n\n```js\nrules: [\n  ...,\n {\n  test: /\\.css$/,\n    use: [\"style-loader\", \"css-loader\"]\n }\n]\n```\n\n同一个任务的 `loader` 可以同时挂载多个，处理顺序为：从右到左，从下往上\n\n\n\n\n\n### less-loader\n\n开发中，我们也常常会使用`less`、`sass`、`stylus`预处理器编写`css`样式，使开发效率提高，这里需要使用`less-loader`\n\n```cmd\nnpm install less-loader -D\n```\n\n```js\nrules: [\n  ...,\n {\n  test: /\\.css$/,\n    use: [\"style-loader\", \"css-loader\",\"less-loader\"]\n }\n]\n```\n\n\n\n### raw-loader\n\n在 `webpack `中通过 `import `方式导入文件内容，该`loader `并不是内置的，所以首先要安装\n\n```bash\nnpm install --save-dev raw-loader\n```\n\n然后在 webpack.config.js 中进行配置\n\n```javascript\nmodule.exports = {  ...,  module: {      rules: [      {        test: /\\.(txt|md)$/,        use: 'raw-loader'     }    ] }}\n```\n\n\n\n### file-loader\n\n把识别出的资源模块，移动到指定的输出⽬目录，并且返回这个资源在输出目录的地址(字符串)\n\n```bash\nnpm install --save-dev file-loader\n```\n\n```javascript\nrules: [  ..., {  test: /\\.(png|jpe?g|gif)$/,    use: {      loader: \"file-loader\",      options: {        // placeholder 占位符 [name] 源资源模块的名称        // [ext] 源资源模块的后缀        name: \"[name]_[hash].[ext]\",        //打包后的存放位置        outputPath: \"./images\",        // 打包后文件的 url        publicPath: './images',      }    } }]\n```\n\n\n\n### url-loader\n\n可以处理理 `file-loader` 所有的事情，但是遇到图片格式的模块，可以选择性的把图片转成 `base64`  格式的字符串，并打包到 `js` 中，对小体积的图片比较合适，大图片不合适。\n\n```bash\nnpm install --save-dev url-loader\n```\n\n```javascript\nrules: [  ..., {  test: /\\.(png|jpe?g|gif)$/,    use: {      loader: \"url-loader\",      options: {        // placeholder 占位符 [name] 源资源模块的名称        // [ext] 源资源模块的后缀        name: \"[name]_[hash].[ext]\",        //打包后的存放位置        outputPath: \"./images\"        // 打包后文件的 url        publicPath: './images',        // 小于 100 字节转成 base64 格式        limit: 100      }    } }]\n```\n\n",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-05T15:31:33.000Z",
    "updateAt": "2024-01-25T19:06:19.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 107,
    "prev": "b8ef6782-9f7e-4bb2-824f-3e0259322dae",
    "next": "59ec4023-36a6-42dd-a0d7-e35d6f3a49ef"
  },
  "post": {
    "exerciseKey": "3c6c5215-5db9-45ea-b2c1-6cc1c6aa6acd",
    "category": "QA",
    "title": "说说webpack中常见的Loader？解决了什么问题？",
    "level": 2.5,
    "updateAt": "2024-01-25T19:06:19+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 33
  }
}
