{
  "data": {
    "id": 502,
    "exerciseKey": "097902c0-17b4-4416-9926-3ad88a55416e",
    "category": "QA",
    "renderType": "md",
    "title": "symbol 有什么用处？",
    "desc": null,
    "options": null,
    "explanation": "ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。\n\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n\nSymbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。",
    "pivot": "",
    "vipLimit": 0,
    "level": 3.5,
    "appId": 7,
    "createAt": "2021-07-11T07:33:11.000Z",
    "updateAt": "2024-07-22T15:40:57.000Z",
    "isCollected": false,
    "currentIndex": 998,
    "filterTotalNum": 1487,
    "prev": "f555dca6-fcc1-433c-a4b5-bc0de8dba02b",
    "next": "43972778-bd1d-4ff4-a153-6c6df65242e3"
  },
  "post": {
    "exerciseKey": "097902c0-17b4-4416-9926-3ad88a55416e",
    "category": "QA",
    "title": "symbol 有什么用处？",
    "level": 3.5,
    "createAt": "2021-07-11T07:33:11+00:00",
    "updateAt": "2024-07-22T15:40:57+00:00"
  },
  "tag": {
    "id": 24,
    "tagName": "ES6",
    "type": "1",
    "exerciseCount": 40
  }
}