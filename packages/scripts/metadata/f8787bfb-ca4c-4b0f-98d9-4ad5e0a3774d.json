{
  "data": {
    "id": 420,
    "exerciseKey": "f8787bfb-ca4c-4b0f-98d9-4ad5e0a3774d",
    "category": "QA",
    "renderType": "md",
    "title": "实现 Promise ",
    "desc": null,
    "options": null,
    "explanation": "```js\n// 模拟实现Promise\n// Promise利用三大手段解决回调地狱：\n// 1. 回调函数延迟绑定\n// 2. 返回值穿透\n// 3. 错误冒泡\n\n// 定义三种状态\nconst PENDING = 'PENDING';      // 进行中\nconst FULFILLED = 'FULFILLED';  // 已成功\nconst REJECTED = 'REJECTED';    // 已失败\n\nclass Promise {\n  constructor(exector) {\n    // 初始化状态\n    this.status = PENDING;\n    // 将成功、失败结果放在this上，便于then、catch访问\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功态回调函数队列\n    this.onFulfilledCallbacks = [];\n    // 失败态回调函数队列\n    this.onRejectedCallbacks = [];\n\n    const resolve = value => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        // 成功态函数依次执行\n        this.onFulfilledCallbacks.forEach(fn => fn(this.value));\n      }\n    }\n    const reject = reason => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        // 失败态函数依次执行\n        this.onRejectedCallbacks.forEach(fn => fn(this.reason))\n      }\n    }\n    try {\n      // 立即执行executor\n      // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n      exector(resolve, reject);\n    } catch(e) {\n      // executor执行出错，将错误内容reject抛出去\n      reject(e);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function'? onRejected :\n      reason => { throw new Error(reason instanceof Error ? reason.message : reason) }\n    // 保存this\n    const self = this;\n    return new Promise((resolve, reject) => {\n      if (self.status === PENDING) {\n        self.onFulfilledCallbacks.push(() => {\n          // try捕获错误\n          try {\n            // 模拟微任务\n            setTimeout(() => {\n              const result = onFulfilled(self.value);\n              // 分两种情况：\n              // 1. 回调函数返回值是Promise，执行then操作\n              // 2. 如果不是Promise，调用新Promise的resolve函数\n              result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        });\n        self.onRejectedCallbacks.push(() => {\n          // 以下同理\n          try {\n            setTimeout(() => {\n              const result = onRejected(self.reason);\n              // 不同点：此时是reject\n              result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        })\n      } else if (self.status === FULFILLED) {\n        try {\n          setTimeout(() => {\n            const result = onFulfilled(self.value);\n            result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n          });\n        } catch(e) {\n          reject(e);\n        }\n      } else if (self.status === REJECTED) {\n        try {\n          setTimeout(() => {\n            const result = onRejected(self.reason);\n            result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n          })\n        } catch(e) {\n          reject(e);\n        }\n      }\n    });\n  }\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  static resolve(value) {\n    if (value instanceof Promise) {\n      // 如果是Promise实例，直接返回\n      return value;\n    } else {\n      // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n      return new Promise((resolve, reject) => resolve(value));\n    }\n  }\n  static reject(reason) {\n    return new Promise((resolve, reject) => {\n      reject(reason);\n    })\n  }\n  static all(promiseArr) {\n    const len = promiseArr.length;\n    const values = new Array(len);\n    // 记录已经成功执行的promise个数\n    let count = 0;\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < len; i++) {\n        // Promise.resolve()处理，确保每一个都是promise实例\n        Promise.resolve(promiseArr[i]).then(\n          val => {\n            values[i] = val;\n            count++;\n            // 如果全部执行完，返回promise的状态就可以改变了\n            if (count === len) resolve(values);\n          },\n          err => reject(err),\n        );\n      }\n    })\n  }\n  static race(promiseArr) {\n    return new Promise((resolve, reject) => {\n      promiseArr.forEach(p => {\n        Promise.resolve(p).then(\n          val => resolve(val),\n          err => reject(err),\n        )\n      })\n    })\n  }\n}\n\n```",
    "level": 5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-06T15:09:34.000Z",
    "updateAt": "2021-07-07T00:13:30.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 927,
    "prev": "4c9292a2-a801-48c4-8d22-10642613c6f4",
    "next": "a6a869f2-a5f5-451e-8f1d-eb25cea4750f"
  },
  "post": {
    "exerciseKey": "f8787bfb-ca4c-4b0f-98d9-4ad5e0a3774d",
    "category": "QA",
    "title": "实现 Promise ",
    "level": 5,
    "updateAt": "2021-07-07T00:13:30+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}
