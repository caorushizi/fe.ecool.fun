{
  "data": {
    "id": 211,
    "exerciseKey": "564a3475-d774-4956-9ea6-024e0e05062d",
    "category": "QA",
    "renderType": "md",
    "title": "举例说明你对尾递归的理解，以及有哪些应用场景",
    "desc": null,
    "options": null,
    "explanation": "## 一、递归\n\n递归（英语：Recursion）\n\n在数学与计算机科学中，是指在函数的定义中使用函数自身的方法\n\n在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数\n\n其核心思想是把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解\n\n一般来说，递归需要有边界条件、递归前进阶段和递归返回阶段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回\n\n下面实现一个函数 `pow(x, n)`，它可以计算 `x` 的 `n` 次方\n\n使用迭代的方式，如下：\n\n```js\nfunction pow(x, n) {\n  let result = 1;\n\n  // 再循环中，用 x 乘以 result n 次\n  for (let i = 0; i < n; i++) {\n    result *= x;\n  }\n  return result;\n}\n```\n\n使用递归的方式，如下：\n\n```js\nfunction pow(x, n) {\n  if (n == 1) {\n    return x;\n  } else {\n    return x * pow(x, n - 1);\n  }\n}\n```\n\n`pow(x, n)` 被调用时，执行分为两个分支：\n\n```js\n             if n==1  = x\n             /\npow(x, n) =\n             \\\n              else     = x * pow(x, n - 1)\n```\n\n也就是说`pow` 递归地调用自身 直到 `n == 1`\n\n ![](https://static.ecool.fun//article/6ba267f3-37a5-4134-b747-887d23c54c63.png)\n\n为了计算 `pow(2, 4)`，递归变体经过了下面几个步骤：\n\n1. `pow(2, 4) = 2 * pow(2, 3)`\n2. `pow(2, 3) = 2 * pow(2, 2)`\n3. `pow(2, 2) = 2 * pow(2, 1)`\n4. `pow(2, 1) = 2`\n\n因此，递归将函数调用简化为一个更简单的函数调用，然后再将其简化为一个更简单的函数，以此类推，直到结果\n\n\n\n## 二、尾递归\n\n尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数\n\n尾递归在普通尾调用的基础上，多出了2个特征：\n\n- 在尾部调用的是函数自身\n- 可通过优化，使得计算仅占用常量栈空间\n\n在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出\n\n这时候，我们就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\"栈溢出\"错误\n\n实现一下阶乘，如果用普通的递归，如下：\n\n```js\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\nfactorial(5) // 120\n```\n\n如果`n`等于5，这个方法要执行5次，才返回最终的计算表达式，这样每次都要保存这个方法，就容易造成栈溢出，复杂度为`O(n)`\n\n如果我们使用尾递归，则如下：\n\n```js\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n\nfactorial(5) // 120\n```\n\n可以看到，每一次返回的就是一个新的函数，不带上一个函数的参数，也就不需要储存上一个函数了。尾递归只需要保存一个调用栈，复杂度 O(1)\n\n\n\n## 二、应用场景\n\n数组求和\n\n```js\nfunction sumArray(arr, total) {\n    if(arr.length === 1) {\n        return total\n    }\n    return sumArray(arr, total + arr.pop())\n}\n```\n\n使用尾递归优化求斐波那契数列\n\n```js\nfunction factorial2 (n, start = 1, total = 1) {\n    if(n <= 2){\n        return total\n    }\n    return factorial2 (n -1, total, total + start)\n}\n```\n\n数组扁平化\n\n```js\nlet a = [1,2,3, [1,2,3, [1,2,3]]]\n// 变成\nlet a = [1,2,3,1,2,3,1,2,3]\n// 具体实现\nfunction flat(arr = [], result = []) {\n    arr.forEach(v => {\n        if(Array.isArray(v)) {\n            result = result.concat(flat(v, []))\n        }else {\n            result.push(v)\n        }\n    })\n    return result\n}\n```\n\n数组对象格式化\n\n```js\nlet obj = {\n    a: '1',\n    b: {\n        c: '2',\n        D: {\n            E: '3'\n        }\n    }\n}\n// 转化为如下：\nlet obj = {\n    a: '1',\n    b: {\n        c: '2',\n        d: {\n            e: '3'\n        }\n    }\n}\n\n// 代码实现\nfunction keysLower(obj) {\n    let reg = new RegExp(\"([A-Z]+)\", \"g\");\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            let temp = obj[key];\n            if (reg.test(key.toString())) {\n                // 将修改后的属性名重新赋值给temp，并在对象obj内添加一个转换后的属性\n                temp = obj[key.replace(reg, function (result) {\n                    return result.toLowerCase()\n                })] = obj[key];\n                // 将之前大写的键属性删除\n                delete obj[key];\n            }\n            // 如果属性是对象或者数组，重新执行函数\n            if (typeof temp === 'object' || Object.prototype.toString.call(temp) === '[object Array]') {\n                keysLower(temp);\n            }\n        }\n    }\n    return obj;\n};\n```\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3.5,
    "appId": 7,
    "createAt": "2021-07-03T13:59:43.000Z",
    "updateAt": "2024-08-10T17:04:34.000Z",
    "isCollected": false,
    "currentIndex": 1288,
    "filterTotalNum": 1487,
    "prev": "cecf2aa7-4281-4255-95c9-e8ae487760f1",
    "next": "483e37bb-b761-4231-82e8-4f6345a6df78"
  },
  "post": {
    "exerciseKey": "564a3475-d774-4956-9ea6-024e0e05062d",
    "category": "QA",
    "title": "举例说明你对尾递归的理解，以及有哪些应用场景",
    "level": 3.5,
    "createAt": "2021-07-03T13:59:43+00:00",
    "updateAt": "2024-08-10T17:04:34+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}