{
  "data": {
    "id": 1824,
    "exerciseKey": "838b4eda-1f58-4215-9bb5-3e59db973286",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对 new.target 的理解\n",
    "desc": null,
    "options": null,
    "explanation": "`new.target` 属性是 JavaScript 中一个特殊的属性，它用于检测函数或构造函数是否是通过 `new` 运算符被调用的。这个属性在通过 `new` 运算符初始化的函数或构造方法中，会返回一个指向构造方法或函数的引用。如果函数不是通过 `new` 运算符被调用的，`new.target` 的值将是 `undefined`。\n利用 `new.target`，我们可以编写代码来检查一个函数是否作为构造函数被 `new` 调用，从而确保函数的调用方式符合预期。例如，如果我们有一个函数，它应该总是作为构造函数被调用，那么我们可以在函数体内部使用 `new.target` 来抛出一个错误，如果它没有被以正确的方式调用。\n```javascript\nfunction Foo() {\n  if (!new.target) {\n    throw new Error(\"Foo() must be called with new\");\n  }\n  console.log(\"Foo instantiated with new\");\n}\n// 如果直接调用函数，会抛出错误\ntry {\n  Foo();\n} catch (error) {\n  console.log(error.message); // 输出: Foo() must be called with new\n}\n// 如果使用 new 运算符调用函数，则不会抛出错误\ntry {\n  new Foo();\n} catch (error) {\n  console.log(error.message); // 不会抛出错误\n}\n```\n在上述代码中，当 `Foo()` 函数被直接调用时，由于 `new.target` 是 `undefined`，因此会抛出一个错误，提示必须使用 `new` 运算符来调用 `Foo()`。而当使用 `new` 运算符调用时，`new.target` 指向 `Foo` 函数本身，因此不会抛出错误，而是执行了 `console.log` 语句。\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2022-06-25T02:12:33.000Z",
    "updateAt": "2024-08-10T17:06:44.000Z",
    "isCollected": false,
    "currentIndex": 564,
    "filterTotalNum": 1487,
    "prev": "07d98297-cc3c-434b-9eb5-307858ded62d",
    "next": "59d5a988-6a18-4c41-b5da-c61aefe63042"
  },
  "post": {
    "exerciseKey": "838b4eda-1f58-4215-9bb5-3e59db973286",
    "category": "QA",
    "title": "说说你对 new.target 的理解\n",
    "level": 1,
    "createAt": "2022-06-25T02:12:33+00:00",
    "updateAt": "2024-08-10T17:06:44+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}