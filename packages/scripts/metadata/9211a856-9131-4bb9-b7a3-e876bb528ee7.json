{
  "data": {
    "id": 381,
    "exerciseKey": "9211a856-9131-4bb9-b7a3-e876bb528ee7",
    "category": "QA",
    "renderType": "html",
    "title": "如何用webpack来优化前端性能",
    "desc": null,
    "options": null,
    "explanation": "<p>用webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运行快速高效。<br/> </p><ul><li>压缩代码:删除多余的代码、注释、简化代码的写法等等方式。可以利用webpack的<code>UglifyJsPlugin</code>和<code>ParallelUglifyPlugin</code>来压缩JS文件， 利用<code>cssnano</code>（css-loader?minimize）来压缩css</li><li> </li><li>利用CDN加速: 在构建过程中，将引用的静态资源路径修改为CDN上对应的路径。可以利用webpack对于<code>output</code>参数和各loader的<code>publicPath</code>参数来修改资源路径</li><li>Tree Shaking: 将代码中永远不会走到的片段删除掉。可以通过在启动webpack时追加参数<code>--optimize-minimize</code>来实现</li><li>Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利用浏览器缓存</li><li>提取公共第三方库:  SplitChunksPlugin插件来进行公共模块抽取,利用浏览器缓存可以长期缓存这些无需频繁变动的公共代码</li></ul><p></p>",
    "pivot": "",
    "vipLimit": 0,
    "level": 1.5,
    "appId": 7,
    "createAt": "2021-07-05T14:58:19.000Z",
    "updateAt": "2024-07-18T18:23:11.000Z",
    "isCollected": false,
    "currentIndex": 1119,
    "filterTotalNum": 1487,
    "prev": "c4765da3-f74e-4190-b3c0-7b66f5cd05b0",
    "next": "fe099894-7e1f-4b13-bc0a-8f065b7b4616"
  },
  "post": {
    "exerciseKey": "9211a856-9131-4bb9-b7a3-e876bb528ee7",
    "category": "QA",
    "title": "如何用webpack来优化前端性能",
    "level": 1.5,
    "createAt": "2021-07-05T14:58:19+00:00",
    "updateAt": "2024-07-18T18:23:11+00:00"
  },
  "tag": {
    "id": 20,
    "tagName": "性能优化",
    "type": "1",
    "exerciseCount": 41
  }
}