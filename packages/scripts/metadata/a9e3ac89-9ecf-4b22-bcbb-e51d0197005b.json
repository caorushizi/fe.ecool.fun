{
  "data": {
    "id": 2096,
    "exerciseKey": "a9e3ac89-9ecf-4b22-bcbb-e51d0197005b",
    "category": "QA",
    "renderType": "md",
    "title": "vue中，推荐在哪个生命周期发起请求？",
    "desc": null,
    "options": null,
    "explanation": "推荐在 `mounted` 生命周期钩子中发起请求。这样做有几个重要的理由：\n\n1. **确保 DOM 已经被渲染**：\n   - `mounted` 钩子在组件的 DOM 已经被插入文档之后调用。这意味着你可以确保所有的 DOM 元素都已经存在，如果你的请求结果需要直接操作或依赖这些 DOM 元素，那么在 `mounted` 中发起请求是安全的。\n\n2. **避免不必要的请求**：\n   - 在 `created` 钩子中发起请求有时会导致在组件还没有挂载时请求数据。如果组件在请求完成之前被销毁，可能会引发内存泄漏或不必要的资源浪费。因此，等待组件挂载完成再发起请求可以减少这些潜在问题。\n\n3. **处理组件状态**：\n   - 在 `mounted` 钩子中发起请求，能够确保你有机会在请求开始前处理组件的状态（例如设置加载状态），并且在请求完成后更新组件的状态（例如显示数据或处理错误）。\n\n尽管 `mounted` 是推荐的生命周期钩子，但也有一些特定场景可能需要在 `created` 钩子中发起请求，例如：\n\n- **SSR（服务器端渲染）**：在服务器端渲染中，Vue 实例的 `mounted` 钩子不会被调用，因为 DOM 并不会被真正挂载。在这种情况下，你可能需要在 `created` 钩子中发起请求。\n- **依赖数据初始化**：如果组件在挂载之前就需要某些数据来初始化，可以在 `created` 钩子中发起请求，以确保数据在组件挂载时已经可用。\n\n### 代码示例\n\n```javascript\nexport default {\n  data() {\n    return {\n      items: [],\n      loading: false,\n      error: null\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      try {\n        const response = await axios.get('/api/items');\n        this.items = response.data;\n      } catch (error) {\n        this.error = error;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};\n```",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2024-06-01T02:16:47.000Z",
    "updateAt": "2024-06-01T10:16:53.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 8,
    "prev": "5c92d261-ffeb-41fc-80fb-7a523f680cd8",
    "next": "69b606ac-e69b-4bb5-9997-21860904d29b"
  },
  "post": {
    "exerciseKey": "a9e3ac89-9ecf-4b22-bcbb-e51d0197005b",
    "category": "QA",
    "title": "vue中，推荐在哪个生命周期发起请求？",
    "level": 1,
    "updateAt": "2024-06-01T10:16:53+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 72
  }
}