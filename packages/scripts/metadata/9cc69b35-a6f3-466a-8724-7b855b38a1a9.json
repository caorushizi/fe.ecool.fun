{
  "data": {
    "id": 166,
    "exerciseKey": "9cc69b35-a6f3-466a-8724-7b855b38a1a9",
    "category": "QA",
    "renderType": "md",
    "title": "如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？",
    "desc": null,
    "options": null,
    "explanation": "## 一、背景\n\n在日常布局中，无论是两栏布局还是三栏布局，使用的频率都非常高\n\n### 两栏布局\n\n两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满，\n\n比如 `Ant Design` 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器\n\n> 这里称宽度较小的列父元素为次要布局容器，宽度较大的列父元素为主要布局容器\n\n ![](https://static.ecool.fun//article/f69a3d2e-7f0f-4340-98a6-70d691b6ded4.png)\n\n这种布局适用于内容上具有明显主次关系的网页\n\n\n\n### 三栏布局\n\n三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之\n\n大家最常见的就是`github`：\n\n ![](https://static.ecool.fun//article/60777033-39d9-411a-a3cd-8aa40fd8006b.png)\n\n\n\n## 二、双栏布局\n\n双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在\n\n实现思路也非常的简单：\n\n- 使用 float 左浮左边栏\n- 右边模块使用 margin-left 撑出内容块做内容展示\n- 为父级元素添加BFC，防止下方元素飞到上方内容\n\n代码如下：\n\n```html\n<style>\n    .box{\n        overflow: hidden; 添加BFC\n    }\n    .left {\n        float: left;\n        width: 200px;\n        background-color: gray;\n        height: 400px;\n    }\n    .right {\n        margin-left: 210px;\n        background-color: lightgray;\n        height: 200px;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n还有一种更为简单的使用则是采取：flex弹性布局\n\n\n\n### flex弹性布局\n\n```html\n<style>\n    .box{\n        display: flex;\n    }\n    .left {\n        width: 100px;\n    }\n    .right {\n        flex: 1;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n`flex`可以说是最好的方案了，代码少，使用简单\n\n注意的是，`flex`容器的一个默认属性值:`align-items: stretch;`\n\n这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: `align-items: flex-start`\n\n\n## 三、三栏布局\n\n实现三栏布局中间自适应的布局方式有：\n\n- 两边使用 float，中间使用 margin\n- 两边使用 absolute，中间使用 margin\n- 两边使用 float 和负 margin\n- display: table 实现\n- flex实现\n- grid网格布局\n\n\n\n### 两边使用 float，中间使用 margin\n\n需要将中间的内容放在`html`结构最后，否则右侧会臣在中间内容的下方\n\n实现代码如下：\n\n```html\n<style>\n    .wrap {\n        background: #eee;\n        overflow: hidden; <!-- 生成BFC，计算高度时考虑浮动的元素 -->\n        padding: 20px;\n        height: 200px;\n    }\n    .left {\n        width: 200px;\n        height: 200px;\n        float: left;\n        background: coral;\n    }\n    .right {\n        width: 120px;\n        height: 200px;\n        float: right;\n        background: lightblue;\n    }\n    .middle {\n        margin-left: 220px;\n        height: 200px;\n        background: lightpink;\n        margin-right: 140px;\n    }\n</style>\n<div class=\"wrap\">\n    <div class=\"left\">左侧</div>\n    <div class=\"right\">右侧</div>\n    <div class=\"middle\">中间</div>\n</div>\n```\n\n原理如下：\n\n- 两边固定宽度，中间宽度自适应。\n- 利用中间元素的margin值控制两边的间距\n- 宽度小于左右部分宽度之和时，右侧部分会被挤下去\n\n这种实现方式存在缺陷：\n\n- 主体内容是最后加载的。\n\n- 右边在主体内容之前，如果是响应式设计，不能简单的换行展示\n\n\n\n### 两边使用 absolute，中间使用 margin\n\n基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序\n\n```html\n<style>\n  .container {\n    position: relative;\n  }\n  \n  .left,\n  .right,\n  .main {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n  }\n\n  .left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100px;\n    background: green;\n  }\n\n  .right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100px;\n    background: green;\n  }\n\n  .main {\n    margin: 0 110px;\n    background: black;\n    color: white;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"left\">左边固定宽度</div>\n  <div class=\"right\">右边固定宽度</div>\n  <div class=\"main\">中间自适应</div>\n</div>\n```\n\n实现流程：\n\n- 左右两边使用绝对定位，固定在两侧。\n- 中间占满一行，但通过 margin和左右两边留出10px的间隔\n\n\n\n\n\n### 两边使用 float 和负 margin\n\n```html\n<style>\n  .left,\n  .right,\n  .main {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n  }\n\n  .main-wrapper {\n    float: left;\n    width: 100%;\n  }\n\n  .main {\n    margin: 0 110px;\n    background: black;\n    color: white;\n  }\n\n  .left,\n  .right {\n    float: left;\n    width: 100px;\n    margin-left: -100%;\n    background: green;\n  }\n\n  .right {\n    margin-left: -100px; /* 同自身宽度 */\n  }\n</style>\n\n<div class=\"main-wrapper\">\n  <div class=\"main\">中间自适应</div>\n</div>\n<div class=\"left\">左边固定宽度</div>\n<div class=\"right\">右边固定宽度</div>\n```\n\n实现过程：\n\n- 中间使用了双层标签，外层是浮动的，以便左中右能在同一行展示\n- 左边通过使用负 margin-left:-100%，相当于中间的宽度，所以向上偏移到左侧\n- 右边通过使用负 margin-left:-100px，相当于自身宽度，所以向上偏移到最右侧\n\n \n\n缺点：\n\n- 增加了 .main-wrapper 一层，结构变复杂\n- 使用负 margin，调试也相对麻烦\n\n\n\n### 使用 display: table 实现\n\n`<table>` 标签用于展示行列数据，不适合用于布局。但是可以使用 `display: table` 来实现布局的效果\n\n```html\n<style>\n  .container {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n  }\n\n  .left,\n  .right,\n  .main {\n    display: table-cell;\n  }\n\n  .left,\n  .right {\n    width: 100px;\n    background: green;\n  }\n\n  .main {\n    background: black;\n    color: white;\n    width: 100%;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"left\">左边固定宽度</div>\n  <div class=\"main\">中间自适应</div>\n  <div class=\"right\">右边固定宽度</div>\n</div>\n```\n\n实现原理：\n\n- 层通过 display: table设置为表格，设置 table-layout: fixed`表示列宽自身宽度决定，而不是自动计算。\n- 内层的左中右通过 display: table-cell设置为表格单元。\n- 左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度\n\n\n\n\n\n### 使用flex实现\n\n利用`flex`弹性布局，可以简单实现中间自适应\n\n代码如下：\n\n```html\n<style type=\"text/css\">\n    .wrap {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .left,\n    .right,\n    .middle {\n        height: 100px;\n    }\n\n    .left {\n        width: 200px;\n        background: coral;\n    }\n\n    .right {\n        width: 120px;\n        background: lightblue;\n    }\n\n    .middle {\n        background: #555;\n        width: 100%;\n        margin: 0 20px;\n    }\n</style>\n<div class=\"wrap\">\n    <div class=\"left\">左侧</div>\n    <div class=\"middle\">中间</div>\n    <div class=\"right\">右侧</div>\n</div>\n```\n\n实现过程：\n\n- 仅需将容器设置为`display:flex;`，\n- 盒内元素两端对其，将中间元素设置为`100%`宽度，或者设为`flex:1`，即可填充空白\n- 盒内元素的高度撑开容器的高度\n\n优点：\n\n- 结构简单直观\n- 可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间\n\n\n\n### grid网格布局\n\n代码如下：\n\n```html\n<style>\n    .wrap {\n        display: grid;\n        width: 100%;\n        grid-template-columns: 300px auto 300px;\n    }\n\n    .left,\n    .right,\n    .middle {\n        height: 100px;\n    }\n\n    .left {\n        background: coral;\n    }\n\n    .right {\n        width: 300px;\n        background: lightblue;\n    }\n\n    .middle {\n        background: #555;\n    }\n</style>\n<div class=\"wrap\">\n    <div class=\"left\">左侧</div>\n    <div class=\"middle\">中间</div>\n    <div class=\"right\">右侧</div>\n</div>\n```\n\n跟`flex`弹性布局一样的简单\n",
    "level": 0.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:22:35.000Z",
    "updateAt": "2023-12-18T20:46:37.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 233,
    "prev": "dd65350c-9907-4d3a-a01c-baeebb3e963d",
    "next": "9d9b80c8-3768-4bf3-96a6-b6c6bf7cb8c3"
  },
  "post": {
    "exerciseKey": "9cc69b35-a6f3-466a-8724-7b855b38a1a9",
    "category": "QA",
    "title": "如何实现两栏布局，右侧自适应？三栏布局中间自适应呢？",
    "level": 0.5,
    "updateAt": "2023-12-18T20:46:37+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 90
  }
}