{
  "data": {
    "id": 1985,
    "exerciseKey": "a3ff14a6-c938-4cfc-b5a3-57cb201d92d7",
    "category": "QA",
    "renderType": "md",
    "title": "不定长二维数组的全排列",
    "desc": "给定任意二维数组，输出所有的排列组合项。\n\n比如 `[['A','B'], ['a','b'], [1, 2]]`，输出 `['Aa1','Aa2','Ab1','Ab2','Ba1','Ba2','Bb1','Bb2']`",
    "options": null,
    "explanation": "可以采用动态规划的方式，下一次的结果，依赖上一次的结果，比如第一次的结果是 `['A', 'B']`,下一个增加了 `['a', 'b']` 就可以在上一次的基础上变为 `['Aa', 'Ab', 'Ba', 'Bb']`，依次类推\n\n## 代码实现\n\n```javascript\n/**\n * 动态规划，下一次的结果，依赖上一次的结果\n * @param {array} arr \n */\nfunction permutate(arr) {\n    // 第一次的结果就是二维数组的第0项\n\tlet res = arr[0].slice();\n\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tconst pre = res.slice();\n\t\tres = [];\n\t\tpre.forEach(item => {\n\t\t\tarr[i].forEach(curr => {\n\t\t\t\tres.push(item + curr)\n\t\t\t})\n\t\t});\n\t}\n\tconsole.log(res)\n\treturn res;\n}\n```\n\n多维数组的全排列问题，和全排列问题类似，但是不同于全排类问题。全排列问题使用的是DFS，而多维数组的全排列则使用的是动态规划，后一个结果依赖于前一个结果。",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-15T13:39:03.000Z",
    "updateAt": "2023-05-23T09:29:02.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 371,
    "prev": "7db251c9-6744-4f92-be55-8ebfab19d72b",
    "next": "97758079-03f4-40ce-9b71-8c3c4e5db338"
  },
  "post": {
    "exerciseKey": "a3ff14a6-c938-4cfc-b5a3-57cb201d92d7",
    "category": "QA",
    "title": "不定长二维数组的全排列",
    "level": 1.5,
    "updateAt": "2023-05-23T09:29:02+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}