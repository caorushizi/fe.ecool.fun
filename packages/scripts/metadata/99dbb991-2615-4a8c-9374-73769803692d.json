{
  "data": {
    "id": 1972,
    "exerciseKey": "99dbb991-2615-4a8c-9374-73769803692d",
    "category": "QA",
    "renderType": "md",
    "title": "将下面的数组转成树状结构",
    "desc": "根据 `id` 和 `parent_id` 的对应关系，进行下面的转换。\n\n原始数据：\n\n```json\n[\n  { \"id\": 12, \"parent_id\": 1, \"name\": \"朝阳区\" },\n  { \"id\": 241, \"parent_id\": 24, \"name\": \"田林街道\" },\n  { \"id\": 31, \"parent_id\": 3, \"name\": \"广州市\" },\n  { \"id\": 13, \"parent_id\": 1, \"name\": \"昌平区\" },\n  { \"id\": 2421, \"parent_id\": 242, \"name\": \"上海科技绿洲\" },\n  { \"id\": 21, \"parent_id\": 2, \"name\": \"静安区\" },\n  { \"id\": 242, \"parent_id\": 24, \"name\": \"漕河泾街道\" },\n  { \"id\": 22, \"parent_id\": 2, \"name\": \"黄浦区\" },\n  { \"id\": 11, \"parent_id\": 1, \"name\": \"顺义区\" },\n  { \"id\": 2, \"parent_id\": 0, \"name\": \"上海市\" },\n  { \"id\": 24, \"parent_id\": 2, \"name\": \"徐汇区\" },\n  { \"id\": 1, \"parent_id\": 0, \"name\": \"北京市\" },\n  { \"id\": 2422, \"parent_id\": 242, \"name\": \"漕河泾开发区\" },\n  { \"id\": 32, \"parent_id\": 3, \"name\": \"深圳市\" },\n  { \"id\": 33, \"parent_id\": 3, \"name\": \"东莞市\" },\n  { \"id\": 3, \"parent_id\": 0, \"name\": \"广东省\" }\n]\n```\n\n转换后的结构：\n\n```json\n[{\n\t\"id\": 2,\n\t\"parent_id\": 0,\n\t\"name\": \"上海市\",\n\t\"children\": [{\n\t\t\"id\": 21,\n\t\t\"parent_id\": 2,\n\t\t\"name\": \"静安区\",\n\t\t\"children\": []\n\t}, {\n\t\t\"id\": 22,\n\t\t\"parent_id\": 2,\n\t\t\"name\": \"黄浦区\",\n\t\t\"children\": []\n\t}, {\n\t\t\"id\": 24,\n\t\t\"parent_id\": 2,\n\t\t\"name\": \"徐汇区\",\n\t\t\"children\": [{\n\t\t\t\"id\": 241,\n\t\t\t\"parent_id\": 24,\n\t\t\t\"name\": \"田林街道\",\n\t\t\t\"children\": []\n\t\t}, {\n\t\t\t\"id\": 242,\n\t\t\t\"parent_id\": 24,\n\t\t\t\"name\": \"漕河泾街道\",\n\t\t\t\"children\": [{\n\t\t\t\t\"id\": 2421,\n\t\t\t\t\"parent_id\": 242,\n\t\t\t\t\"name\": \"上海科技绿洲\",\n\t\t\t\t\"children\": []\n\t\t\t}, {\n\t\t\t\t\"id\": 2422,\n\t\t\t\t\"parent_id\": 242,\n\t\t\t\t\"name\": \"漕河泾开发区\",\n\t\t\t\t\"children\": []\n\t\t\t}]\n\t\t}]\n\t}]\n}, {\n\t\"id\": 1,\n\t\"parent_id\": 0,\n\t\"name\": \"北京市\",\n\t\"children\": [{\n\t\t\"id\": 12,\n\t\t\"parent_id\": 1,\n\t\t\"name\": \"朝阳区\",\n\t\t\"children\": []\n\t}, {\n\t\t\"id\": 13,\n\t\t\"parent_id\": 1,\n\t\t\"name\": \"昌平区\",\n\t\t\"children\": []\n\t}, {\n\t\t\"id\": 11,\n\t\t\"parent_id\": 1,\n\t\t\"name\": \"顺义区\",\n\t\t\"children\": []\n\t}]\n}, {\n\t\"id\": 3,\n\t\"parent_id\": 0,\n\t\"name\": \"广东省\",\n\t\"children\": [{\n\t\t\"id\": 31,\n\t\t\"parent_id\": 3,\n\t\t\"name\": \"广州市\",\n\t\t\"children\": []\n\t}, {\n\t\t\"id\": 32,\n\t\t\"parent_id\": 3,\n\t\t\"name\": \"深圳市\",\n\t\t\"children\": []\n\t}, {\n\t\t\"id\": 33,\n\t\t\"parent_id\": 3,\n\t\t\"name\": \"东莞市\",\n\t\t\"children\": []\n\t}]\n}]\n```",
    "options": null,
    "explanation": " \n这种数据和嵌套对象相互转换的题目，在手写题环节很常见，今天我们就来介绍几种解法。\n\n## 方法一\n\n很容易想到的一个方法就是利用递归：每次遍历时，找到将本次遍历的根节点作为父节点的所有子节点，直至找不到有子节点的。\n\n```js\n/**\n * 数组转树形结构\n * @param {array} list 被转换的数组\n * @param {number|string} root 根节点（最外层节点）\n * @returns array\n */\nfunction arrayToTree(list, root) {\n  return list\n    .filter(item => item.parent_id === root)\n    .map(item => ({ ...item, children: arrayToTree(list, item.id) }))\n}\n```\n\n代码很简洁，`filter` 和 `map` 方法也是数组中很常见的方法，相信大家也很好理解。\n\n## 方法二\n\n可以利用浅拷贝是拷贝对象的内存地址的特性，我们修改拷贝后，所有引用都会同步修改。利用这个特点，我们将子节点依次放入父节点，最后将最外层父节点返回即可。\n\n```js\n/**\n * 数组转树形结构\n * @param {array} list 被转换的数组\n * @param {number|string} root 根节点（最外层节点）的 id\n * @return array\n */\nfunction arrayToTree(list, root) {\n  const result = [] // 用于存放结果\n  const map = {} // 用于存放 list 下的节点\n\n  // 1. 遍历 list，将 list 下的所有节点以 id 作为索引存入 map\n  for (const item of list) {\n    map[item.id] = { ...item } // 浅拷贝\n  }\n\n  // 2. 再次遍历，将根节点放入最外层，子节点放入父节点\n  for (const item of list) {\n    // 3. 获取节点的 id 和 父 id\n    const { id, parent_id } = item // ES6 解构赋值\n    // 4. 如果是根节点，存入 result\n    if (item.parent_id === root) {\n      result.push(map[id])\n    } else {\n      // 5. 反之，存入到父节点\n      map[parent_id].children\n        ? map[parent_id].children.push(map[id])\n        : (map[parent_id].children = [map[id]])\n    }\n  }\n\n  // 将结果返回\n  return result\n}\n```\n\n代码中有注释，相信大家多读几遍也能理解。\n\n## 方法三\n\n针对方法二，我们也可以有些优化，只需要一次遍历，就能获取到结果\n\n```js\n/**\n * 数组转树形结构\n * @param {array} list 被转换的数组\n * @param {number|string} root 根节点（最外层节点）\n * @returns array\n */\nfunction arrayToTree(list, root) {\n  const result = [] // 用于存放结果\n  const map = {} // 用于存放 list 下的节点\n\n  // 遍历 list\n  for (const item of list) {\n    // 1. 获取节点的 id 和 父 id\n    const { id, parent_id } = item // ES6 解构赋值\n\n    // 2. 将节点存入 map\n    if (!map[id]) map[id] = {}\n\n    // 3. 根据 id，将节点与之前存入的子节点合并\n    map[id] = map[id].children\n      ? { ...item, children: map[id].children }\n      : { ...item }\n\n    // 4. 如果是根节点，存入 result\n    if (parent_id === root) {\n      result.push(map[id])\n    } else {\n      // 5. 反之，存入父节点\n      if (!map[parent_id]) map[parent_id] = {}\n      if (!map[parent_id].children) map[parent_id].children = []\n      map[parent_id].children.push(map[id])\n    }\n  }\n\n  // 将结果返回\n  return result\n}\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-15T13:19:53.000Z",
    "updateAt": "2023-12-17T18:38:44.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 256,
    "prev": "73f4551c-2b47-4172-8c34-1c08d9adf30f",
    "next": "f355de02-e03c-4d97-ac11-cd1de62867ab"
  },
  "post": {
    "exerciseKey": "99dbb991-2615-4a8c-9374-73769803692d",
    "category": "QA",
    "title": "将下面的数组转成树状结构",
    "level": 3,
    "updateAt": "2023-12-17T18:38:44+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 109
  }
}
