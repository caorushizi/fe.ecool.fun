{
  "data": {
    "id": 611,
    "exerciseKey": "0bb0b3a7-ed1b-41c0-a93e-7187b2aa85a8",
    "category": "QA",
    "renderType": "md",
    "title": "你知道哪些css模块化的方案？",
    "desc": null,
    "options": null,
    "explanation": "目前主流的 css 模块化分为 css modules 和 css in js 两种方案。\n\n## css modules\n\n> CSS Modules 指的是我们像 import js 一样去引入我们的 css 代码，代码中的每一个类名都是引入对象的一个属性, 编译时会将 css 类名 加上唯一 hash。\n\ncss module 需要 webpack 配置 css-loader 或者 scss-loader , module 为 true\n\n```\n{\n    loader: 'css-loader',\n    options: {\n        modules: true, // 开启模块化\n        localIdentName: '[path][name]-[local]-[hash:base64:5]'\n    }\n}\n```\n\n### localIdentName\n\n介绍下 localIdentName 自定义生成的类名格式，可选参数有：\n\n* [path]表示样式表相对于项目根目录所在的路径(默认不拼接)\n* [name] 表示样式表文件名称\n* [local] 表示样式表的类名定义名称\n* [hash:length] 表示 32 位的 hash 值\n\n注意：只有类名选择器和 ID 选择器才会被模块化控制，类似 `body`、`h2`、`span` 这些标签选择器不会被模块化控制。\n\n### css module 作用域\n\n* 作用域默认为 local 即只在当前模块生效\n* global：被 `:global` 包裹起来的类名，不会被模块化\n\n```css\n/* 加上 :global 会全局样式 */\n:global(.global-color) {\n  color: blue;\n  :global(.common-width) {\n    width: 200px;\n  }\n}\n```\n\n### css module 高级使用\n\n* 和外部样式混用\n\n```js\nimport classNames from 'classnames';\n\n// 使用classNames\nconst wrapperClassNames = classNames({\n  'common-show': visible,\n  'common-hide': !visible,\n  [styles1['view-wrapper']]: true\n});\n<div className={wrapperClassNames}></div>;\n\n// 使用模板字符串\n<div className={`${styles1.content} ${styles1.color} common-show`}>\n  我是文章内容我是文章内容我是文章内容我是文章内容我是文章内容我是文章内容\n</div>;\n```\n\n* 覆盖第三方 UI 库\n\n```\n{/* 覆盖第三方UI库 样式*/}\n<div className={styles1['am-button-custom-wrapper']}>\n  <Button type={'primary'} onClick={() => toggle()}>\n     {visible ? '隐藏' : '显示'}\n  </Button>\n</div>\n\n//  覆盖第三方UI库的 样式\n.am-button-custom-wrapper {\n  :global {\n    .am-button-primary {\n      color: red;\n    }\n  }\n}\n```\n\n## css in js\n\nCSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。\n\n简单来说CSS-in-JS就是将应用的CSS样式写在JavaScript文件里面，而不是独立为一些.css，.scss或者less之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。\n\n值得一提的是，虽然CSS-in-JS不是一种很新的技术，它当初的出现是因为一些component-based的Web框架（例如React，Vue和Angular）的逐渐流行，使得开发者也想将组件的CSS样式也一块封装到组件中去以解决原生CSS写法的一系列问题。\n\n还有就是CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue和Angular都有属于框架自己的一套定义样式的方案。\n\n实现了CSS-in-JS的库有很多，虽然每个库解决的问题都差不多，可是它们的实现方法和语法却大相径庭。\n\n从实现方法上区分大体分为两种：唯一CSS选择器和内联样式（Unique Selector VS Inline Styles）。\n\n接下来我们来分别看一下对应于这两种实现方式的两个比较有代表性的实现：styled-components和radium。\n\n### Styled-components\n\n通过styled-components，你可以使用ES6的标签模板字符串语法（Tagged Templates）为需要styled的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。\n\n动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。\n\n```jsx\nconst DivWrapper = styled.div`\n  width: '100%';\n  height: 300;\n  background-color: ${(props) => props.color};\n`;\n\n// 封装第三方组件库\nconst AntdButtonWrapper = styled(Button)`\n  color: 'red';\n`;\n\n// 通过属性动态定义样式\nconst MyButton = styled.button`\n  background: ${(props) => (props.primary ? 'palevioletred' : 'white')};\n  color: ${(props) => (props.primary ? 'white' : 'palevioletred')};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// 样式复用\nconst TomatoButton = styled(MyButton)`\n  color: tomato;\n  border-color: tomato;\n`;\n\n// 创建关键帧\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n  `;\n\n// 创建动画组件\nconst Rotate = styled.div`\n  display: inline-block;\n  animation: ${rotate} 2s linear infinite;\n  padding: 2rem 1rem;\n  font-size: 1.2rem;\n`;\n```\n\nstyled-components 优势: 支持将 props 以插值的方式传递给组件,以调整组件样式, 跨平台可在 RN 和 next 中使用。 缺点： 预处理器和后处理器不兼容。\n\n### Radium\n\nRadium和styled-components的最大区别是它生成的是标签内联样式（inline styles）。\n\n由于标签内联样式在处理诸如media query以及:hover，:focus，:active等和浏览器状态相关的样式的时候非常不方便，所以radium为这些样式封装了一些标准的接口以及抽象。\n\n```jsx\nimport Radium from 'radium';\n\nconst Button = () => (\n    <button\n        style={styles.base}>\n        {this.props.children}\n    </button>;\n)\n\nvar styles = {\n  red: {\n    backgroundColor: 'red'\n  }\n};\n\nButton = Radium(Button);\n```\n\n内联样式相比于CSS选择器的方法有以下的优点： \n\n* 自带局部样式作用域的效果，无需额外的操作\n* 内联样式的权重（specificity）是最高的，可以避免权重冲突的烦恼 \n* 由于样式直接写在HTML中，十分方便开发者调试",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2021-08-30T02:29:32.000Z",
    "updateAt": "2024-08-10T17:05:45.000Z",
    "isCollected": false,
    "currentIndex": 889,
    "filterTotalNum": 1487,
    "prev": "f92a10a6-897f-46ca-992a-d31bcce5e5f1",
    "next": "f6e033d6-6e6e-4613-ad8d-a4340c3380a0"
  },
  "post": {
    "exerciseKey": "0bb0b3a7-ed1b-41c0-a93e-7187b2aa85a8",
    "category": "QA",
    "title": "你知道哪些css模块化的方案？",
    "level": 3,
    "createAt": "2021-08-30T02:29:32+00:00",
    "updateAt": "2024-08-10T17:05:45+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 101
  }
}