{
  "data": {
    "id": 2588,
    "exerciseKey": "0568e8ee-d540-4b5a-bb66-7ed7add20e41",
    "category": "QA",
    "renderType": "md",
    "title": "npm script 了解多少？",
    "desc": "",
    "options": "",
    "explanation": "`npm script` 是 Node.js 的包管理工具 npm 提供的功能，用于在 `package.json` 文件中定义自定义的命令和脚本。它使得在项目中执行常见的开发任务变得更加简便和一致。下面是对 `npm script` 的详细理解：\n\n### **1. 基本概念**\n\n- **定义**：`npm scripts` 是在 `package.json` 文件的 `scripts` 字段中定义的一组命令。你可以在这里定义任何你想要的命令，并通过 `npm run <script>` 执行它们。\n\n  ```json\n  {\n    \"scripts\": {\n      \"start\": \"node server.js\",\n      \"test\": \"jest\",\n      \"build\": \"webpack --config webpack.config.js\"\n    }\n  }\n  ```\n\n### **2. 常见的 npm 脚本**\n\n- **启动脚本** (`start`): 这是一个特殊的脚本，可以通过 `npm start` 直接运行。通常用来启动应用程序或开发服务器。\n\n  ```json\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  }\n  ```\n\n- **测试脚本** (`test`): 另一个特殊的脚本，`npm test` 会默认执行这个脚本。通常用来运行测试用例。\n\n  ```json\n  \"scripts\": {\n    \"test\": \"mocha\"\n  }\n  ```\n\n- **构建脚本** (`build`): 用来构建项目，比如打包前端代码、编译 TypeScript 等。\n\n  ```json\n  \"scripts\": {\n    \"build\": \"webpack\"\n  }\n  ```\n\n### **3. 执行顺序和生命周期**\n\n- **执行**：通过 `npm run <script>` 命令执行指定的脚本。如果脚本中有空格或特殊字符，通常需要用引号括起来。\n\n  ```bash\n  npm run build\n  ```\n\n- **预设和后置脚本**：`npm` 支持一些特殊的脚本名称，这些脚本在特定的生命周期事件中自动执行。例如：\n\n  - `pre<name>`：在 `<name>` 脚本运行之前执行。\n  - `post<name>`：在 `<name>` 脚本运行之后执行。\n\n  ```json\n  \"scripts\": {\n    \"prebuild\": \"echo 'Preparing to build...'\",\n    \"build\": \"webpack\",\n    \"postbuild\": \"echo 'Build completed!'\"\n  }\n  ```\n\n  执行 `npm run build` 时，`prebuild` 脚本会先执行，然后执行 `build`，最后执行 `postbuild`。\n\n### **4. 脚本中使用的命令和工具**\n\n- **可以使用任意命令**：脚本中可以使用任何可执行的命令，比如 `node`、`npm`、`webpack`、`babel` 等。\n\n  ```json\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write 'src/**/*.{js,jsx}'\"\n  }\n  ```\n\n- **跨平台支持**：为了在不同操作系统（Windows、Linux、macOS）上兼容，有时需要用到跨平台的工具如 `cross-env` 来设置环境变量。\n\n  ```json\n  \"scripts\": {\n    \"start\": \"cross-env NODE_ENV=development node server.js\"\n  }\n  ```\n\n### **5. 脚本的参数传递**\n\n- **传递参数**：可以将参数传递给脚本，通过 `--` 符号分隔。例如：\n\n  ```bash\n  npm run build -- --env=production\n  ```\n\n  在 `package.json` 中，`build` 脚本可以通过 `process.argv` 获取到这些参数。\n\n### **6. 环境变量**\n\n- **设置环境变量**：可以在脚本中设置环境变量来影响脚本的行为。\n\n  ```json\n  \"scripts\": {\n    \"start\": \"NODE_ENV=production node app.js\"\n  }\n  ```\n\n  在 Windows 上，环境变量的设置方式略有不同，需要使用 `cross-env` 或类似工具。\n\n### **7. 脚本的复用**\n\n- **复用命令**：可以将复杂的命令拆分成多个脚本，或者将常用的命令提取到脚本中，避免在多个地方重复编写命令。\n\n  ```json\n  \"scripts\": {\n    \"lint\": \"eslint src\",\n    \"format\": \"prettier --write src\",\n    \"fix\": \"npm run lint && npm run format\"\n  }\n  ```",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T18:58:39.000Z",
    "isCollected": false,
    "currentIndex": 140,
    "filterTotalNum": 1487,
    "prev": "997b836f-1a8c-4aa1-9676-aa923c9533d5",
    "next": "c1505892-4928-41b4-bbd1-e83be2f53ff2"
  },
  "post": {
    "exerciseKey": "0568e8ee-d540-4b5a-bb66-7ed7add20e41",
    "category": "QA",
    "title": "npm script 了解多少？",
    "level": 2,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T18:58:39+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 58
  }
}