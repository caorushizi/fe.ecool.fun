{
  "data": {
    "id": 1676,
    "exerciseKey": "e797a169-0044-43d1-8fe6-4bad6e7372f9",
    "category": "QA",
    "renderType": "md",
    "title": "写一个 repeat 方法，实现字符串的复制拼接",
    "desc": null,
    "options": null,
    "explanation": "实现的方法有很多，以下介绍几种。\n\n## 方法一\n\n空数组 join\n\n```js\nfunction repeat(target, n) {\n  return (new Array(n + 1)).join(target);\n}\n```\n\n## 方法二\n\n改良方法1，省去创建数组这一步，提高性能。之所以创建一个带 length 属性的对象，是因为要调用数组的原型方法，需要指定 call 第一个参数为类数组对象。\n\n```js\nfunction repeat(target, n) {\n  return Array.prototype.join.call({\n    length: n + 1\n  }, target);\n}\n```\n\n## 方法三\n\n改良方法 2，利用闭包缓存 join，避免重复创建对象、寻找方法。\n\n```js\nvar repeat = (function () {\n  var join = Array.prototype.join, obj = {};\n  return function(target, n) {\n    obj.length = n + 1;\n    return join.call(obj, target);\n  };\n})();\n```\n\n## 方法四\n\n使用二分法，减少操作次数\n\n```js\nfunction repeat(target, n) {\n  var s = target, total = [];\n  while (n > 0) {\n    if (n % 2 === 1) {\n      total[total.length] = s;\n    }\n    if (n === 1) {\n      break;\n    }\n\n    s += s;\n    n = n >> 1; // Math.floor(n / 2);\n  }\n  return total.join('');\n}\n```\n\n## 方法五\n\n方法 4 的变种，免去创建数组与使用 join。缺点是循环中创建的字符串比要求的长。\n\n```js\nfunction repeat(target, n) {\n  var s = target, c = s.length * n;\n  do {\n    s += s;\n  } while (n = n >> 1)\n  s = s.substring(0, c);\n  return s;\n}\n```\n\n## 方法六\n\n方法 4 的改良。\n\n```js\nfunction repeat(target, n) {\n  var s = target, total = \"\";\n  while (n > 0) {\n    if (n % 2 === 1) {\n      total += s;\n    }\n    if (n === 1) {\n      break;\n    }\n    s += s;\n    n = n >> 1;\n  }\n  return total;\n}\n```\n\n\n## 方法七\n\n与 6 相近，不过递归在浏览器中有优化。\n\n```js\nfunction repeat(target, n) {\n  if (n === 1) {\n    return target;\n  }\n  var s = repeat(target, Math.floor(n / 2));\n  s += s;\n  if (n % 2) {\n    s += target;\n  }\n  return s;\n}\n```\n\n## 方法八\n\n一则反例，很慢，但是可行。\n\n```js\nfunction repeat(target, n) {\n  return (n <= 0) ? \"\" : target.concat(repeat(target, --n));\n}\n```\n\n最后给出 MDN 中的`String.prototype.repeat`的 polyfill 方法，大家也可以进行参考：\n\n```js\nif (!String.prototype.repeat) {\n  String.prototype.repeat = function(count) {\n    'use strict';\n    if (this == null)\n      throw new TypeError('can\\'t convert ' + this + ' to object');\n\n    var str = '' + this;\n    // To convert string to integer.\n    count = +count;\n    // Check NaN\n    if (count != count)\n      count = 0;\n\n    if (count < 0)\n      throw new RangeError('repeat count must be non-negative');\n\n    if (count == Infinity)\n      throw new RangeError('repeat count must be less than infinity');\n\n    count = Math.floor(count);\n    if (str.length == 0 || count == 0)\n      return '';\n\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (str.length * count >= 1 << 28)\n      throw new RangeError('repeat count must not overflow maximum string size');\n\n    var maxCount = str.length * count;\n    count = Math.floor(Math.log(count) / Math.log(2));\n    while (count) {\n       str += str;\n       count--;\n    }\n    str += str.substring(0, maxCount - str.length);\n    return str;\n  }\n}\n```",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2022-02-27T10:02:58.000Z",
    "updateAt": "2024-07-20T11:10:15.000Z",
    "isCollected": false,
    "currentIndex": 693,
    "filterTotalNum": 1487,
    "prev": "35165e2d-0ef5-4c15-8b4c-a895c59216dc",
    "next": "389a7ca7-43d2-4fbe-99ef-50bea32bef5c"
  },
  "post": {
    "exerciseKey": "e797a169-0044-43d1-8fe6-4bad6e7372f9",
    "category": "QA",
    "title": "写一个 repeat 方法，实现字符串的复制拼接",
    "level": 1,
    "createAt": "2022-02-27T10:02:58+00:00",
    "updateAt": "2024-07-20T11:10:15+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}