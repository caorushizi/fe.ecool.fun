{
  "data": {
    "id": 554,
    "exerciseKey": "53a6d5df-e7b0-4f11-a1ee-c55fd1f1f8c2",
    "category": "QA",
    "renderType": "md",
    "title": "如何实现jwt鉴权机制？说说你的思路",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\nJWT（JSON Web Token），本质就是一个字符串书写规范，如下图，作用是用来在用户和服务器之间传递安全可靠的信息\n\n![](https://static.ecool.fun//article/d9c35117-2ed2-4a8e-950e-b124994e9d92.png)\n\n在目前前后端分离的开发过程中，使用`token`鉴权机制用于身份验证是最常见的方案，流程如下：\n\n- 服务器当验证用户账号和密码正确的时候，给用户颁发一个令牌，这个令牌作为后续用户访问一些接口的凭证\n- 后续访问会根据这个令牌判断用户时候有权限进行访问\n\n`Token`，分成了三部分，头部（Header）、载荷（Payload）、签名（Signature），并以`.`进行拼接。其中头部和载荷都是以`JSON`格式存放数据，只是进行了编码\n\n ![](https://static.ecool.fun//article/20d0a8a6-ee1c-4e20-82d2-eb1696e65eed.png)\n\n\n\n### header\n\n每个JWT都会带有头部信息，这里主要声明使用的算法。声明算法的字段名为`alg`，同时还有一个`typ`的字段，默认`JWT`即可。以下示例中算法为HS256\n\n```json\n{  \"alg\": \"HS256\",  \"typ\": \"JWT\" } \n```\n\n因为JWT是字符串，所以我们还需要对以上内容进行Base64编码，编码后字符串如下：\n\n```tex\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9        \n```\n\n\n\n### payload\n\n载荷即消息体，这里会存放实际的内容，也就是`Token`的数据声明，例如用户的`id`和`name`，默认情况下也会携带令牌的签发时间`iat`，通过还可以设置过期时间，如下：\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n同样进行Base64编码后，字符串如下：\n\n```tex\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n```\n\n\n\n### Signature\n\n签名是对头部和载荷内容进行签名，一般情况，设置一个`secretKey`，对前两个的结果进行`HMACSHA25`算法，公式如下：\n\n```js\nSignature = HMACSHA256(base64Url(header)+.+base64Url(payload),secretKey)\n```\n\n一旦前面两部分数据被篡改，只要服务器加密用的密钥没有泄露，得到的签名肯定和之前的签名不一致\n\n\n\n## 二、如何实现\n\n`Token`的使用分成了两部分：\n\n- 生成token：登录成功的时候，颁发token\n- 验证token：访问某些资源或者接口时，验证token\n\n\n\n### 生成 token\n\n借助第三方库`jsonwebtoken`，通过`jsonwebtoken` 的 `sign` 方法生成一个 `token`：\n\n- 第一个参数指的是 Payload\n\n- 第二个是秘钥，服务端特有\n\n- 第三个参数是 option，可以定义 token 过期时间\n\n```js\nconst crypto = require(\"crypto\"),\n  jwt = require(\"jsonwebtoken\");\n// TODO:使用数据库\n// 这里应该是用数据库存储，这里只是演示用\nlet userList = [];\n\nclass UserController {\n  // 用户登录\n  static async login(ctx) {\n    const data = ctx.request.body;\n    if (!data.name || !data.password) {\n      return ctx.body = {\n        code: \"000002\", \n        message: \"参数不合法\"\n      }\n    }\n    const result = userList.find(item => item.name === data.name && item.password === crypto.createHash('md5').update(data.password).digest('hex'))\n    if (result) {\n      // 生成token\n      const token = jwt.sign(  \n        {\n          name: result.name\n        },\n        \"test_token\", // secret\n        { expiresIn: 60 * 60 } // 过期时间：60 * 60 s\n      );\n      return ctx.body = {\n        code: \"0\",\n        message: \"登录成功\",\n        data: {\n          token\n        }\n      };\n    } else {\n      return ctx.body = {\n        code: \"000002\",\n        message: \"用户名或密码错误\"\n      };\n    }\n  }\n}\n\nmodule.exports = UserController;\n```\n\n在前端接收到`token`后，一般情况会通过`localStorage`进行缓存，然后将`token`放到`HTTP `请求头`Authorization` 中，关于`Authorization` 的设置，前面要加上 Bearer ，注意后面带有空格\n\n```js\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  config.headers.common['Authorization'] = 'Bearer ' + token; // 留意这里的 Authorization\n  return config;\n})\n```\n\n\n\n### 校验token\n\n使用 `koa-jwt` 中间件进行验证，方式比较简单\n\n```js\n/ 注意：放在路由前面\napp.use(koajwt({\n  secret: 'test_token'\n}).unless({ // 配置白名单\n  path: [/\\/api\\/register/, /\\/api\\/login/]\n}))\n```\n\n- secret 必须和 sign 时候保持一致\n- 可以通过 unless 配置接口白名单，也就是哪些 URL 可以不用经过校验，像登陆/注册都可以不用校验\n- 校验的中间件需要放在需要校验的路由前面，无法对前面的 URL 进行校验\n\n获取`token`用户的信息方法如下：\n\n```js\nrouter.get('/api/userInfo',async (ctx,next) =>{    const authorization =  ctx.header.authorization // 获取jwt    const token = authorization.replace('Beraer ','')    const result = jwt.verify(token,'test_token')    ctx.body = result\n```\n\n\n\n注意：上述的`HMA256`加密算法为单秘钥的形式，一旦泄露后果非常的危险\n\n在分布式系统中，每个子系统都要获取到秘钥，那么这个子系统根据该秘钥可以发布和验证令牌，但有些服务器只需要验证令牌\n\n这时候可以采用非对称加密，利用私钥发布令牌，公钥验证令牌，加密算法可以选择`RS256`\n\n\n## 三、优缺点\n\n优点：\n\n- json具有通用性，所以可以跨语言\n- 组成简单，字节占用小，便于传输\n- 服务端无需保存会话信息，很容易进行水平扩展\n- 一处生成，多处使用，可以在分布式系统中，解决单点登录问题\n- 可防护CSRF攻击\n\n缺点：\n\n- payload部分仅仅是进行简单编码，所以只能用于存储逻辑必需的非敏感信息\n- 需要保护好加密密钥，一旦泄露后果不堪设想\n- 为避免token被劫持，最好使用https协议\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3.5,
    "appId": 7,
    "createAt": "2021-07-25T02:20:34.000Z",
    "updateAt": "2024-08-10T17:05:32.000Z",
    "isCollected": false,
    "currentIndex": 946,
    "filterTotalNum": 1487,
    "prev": "dfc602d9-11d7-4730-99e2-312b4236f206",
    "next": "bc224611-840e-4ed9-a922-67708c085da3"
  },
  "post": {
    "exerciseKey": "53a6d5df-e7b0-4f11-a1ee-c55fd1f1f8c2",
    "category": "QA",
    "title": "如何实现jwt鉴权机制？说说你的思路",
    "level": 3.5,
    "createAt": "2021-07-25T02:20:34+00:00",
    "updateAt": "2024-08-10T17:05:32+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 37
  }
}