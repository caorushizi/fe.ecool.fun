{
  "data": {
    "id": 2801,
    "exerciseKey": "2ea94d0f-e412-4db2-9d42-20c7eb50284f",
    "category": "QA",
    "renderType": "md",
    "title": "手写 vue 的双向绑定",
    "desc": "",
    "options": "",
    "explanation": "手写 Vue 的双向绑定可以通过使用 JavaScript 的 `Object.defineProperty()`（在 Vue 2 中）或 `Proxy`（在 Vue 3 中）来实现数据响应式。下面是一个简单的实现示例，展示了如何手动实现双向绑定。\n\n### **1. 使用 `Object.defineProperty()` 实现 Vue 2 风格的双向绑定**\n\n**步骤**：\n1. **创建一个 Vue 实例**。\n2. **实现数据的响应式**。\n3. **创建一个简单的 `watcher` 用于更新 DOM**。\n4. **实现双向绑定**。\n\n**示例代码**：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue-like Two-way Binding</title>\n</head>\n<body>\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"message\">\n        <p>{{ message }}</p>\n    </div>\n\n    <script>\n        // 实现 Vue 实例\n        class Vue {\n            constructor(options) {\n                this.data = options.data;\n                this.el = document.querySelector(options.el);\n                this.bindings = [];\n\n                // 数据响应式\n                this.observe(this.data);\n\n                // 编译模板\n                this.compile(this.el);\n            }\n\n            // 将数据转换为响应式\n            observe(data) {\n                Object.keys(data).forEach(key => {\n                    let value = data[key];\n                    const bindings = [];\n                    \n                    Object.defineProperty(data, key, {\n                        get() {\n                            // 这里添加依赖\n                            if (Dep.target) {\n                                bindings.push(Dep.target);\n                            }\n                            return value;\n                        },\n                        set(newValue) {\n                            value = newValue;\n                            bindings.forEach(fn => fn());\n                        }\n                    });\n                });\n            }\n\n            // 编译模板\n            compile(el) {\n                const nodes = el.childNodes;\n                nodes.forEach(node => {\n                    if (node.nodeType === 1) { // 处理元素节点\n                        const attr = node.getAttribute('v-model');\n                        if (attr) {\n                            this.bindings.push({\n                                node,\n                                key: attr,\n                                update: () => {\n                                    node.value = this.data[attr];\n                                }\n                            });\n                            node.addEventListener('input', e => {\n                                this.data[attr] = e.target.value;\n                            });\n                        }\n                    } else if (node.nodeType === 3) { // 处理文本节点\n                        const text = node.textContent.trim();\n                        const regExp = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n                        const match = text.match(regExp);\n                        if (match) {\n                            const key = match[1];\n                            this.bindings.push({\n                                node,\n                                key,\n                                update: () => {\n                                    node.textContent = this.data[key];\n                                }\n                            });\n                        }\n                    }\n                });\n\n                // 更新绑定\n                this.updateBindings();\n            }\n\n            // 更新所有绑定\n            updateBindings() {\n                this.bindings.forEach(binding => binding.update());\n            }\n        }\n\n        // 依赖管理\n        class Dep {\n            static target = null;\n        }\n\n        // 创建 Vue 实例\n        new Vue({\n            el: '#app',\n            data: {\n                message: 'Hello Vue!'\n            }\n        });\n    </script>\n</body>\n</html>\n```\n\n### **2. 使用 `Proxy` 实现 Vue 3 风格的双向绑定**\n\n**步骤**：\n1. **创建一个 Vue 实例**。\n2. **实现数据的响应式使用 `Proxy`**。\n3. **实现双向绑定**。\n\n**示例代码**：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vue-like Two-way Binding</title>\n</head>\n<body>\n    <div id=\"app\">\n        <input type=\"text\" data-bind=\"message\">\n        <p>{{ message }}</p>\n    </div>\n\n    <script>\n        // 实现 Vue 实例\n        function Vue(options) {\n            this.data = options.data;\n            this.el = document.querySelector(options.el);\n\n            // 数据响应式\n            this.proxyData(this.data);\n\n            // 编译模板\n            this.compile(this.el);\n        }\n\n        Vue.prototype.proxyData = function(data) {\n            this._data = new Proxy(data, {\n                get: (target, key) => {\n                    // 返回数据值\n                    return target[key];\n                },\n                set: (target, key, value) => {\n                    // 更新数据\n                    target[key] = value;\n                    // 触发视图更新\n                    this.update();\n                    return true;\n                }\n            });\n        };\n\n        Vue.prototype.compile = function(el) {\n            const nodes = el.childNodes;\n            nodes.forEach(node => {\n                if (node.nodeType === 1) { // 处理元素节点\n                    const attr = node.getAttribute('data-bind');\n                    if (attr) {\n                        node.value = this._data[attr];\n                        node.addEventListener('input', e => {\n                            this._data[attr] = e.target.value;\n                        });\n                    }\n                } else if (node.nodeType === 3) { // 处理文本节点\n                    const text = node.textContent.trim();\n                    const regExp = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n                    const match = text.match(regExp);\n                    if (match) {\n                        const key = match[1];\n                        node.textContent = this._data[key];\n                    }\n                }\n            });\n        };\n\n        Vue.prototype.update = function() {\n            const nodes = this.el.querySelectorAll('[data-bind]');\n            nodes.forEach(node => {\n                const key = node.getAttribute('data-bind');\n                node.value = this._data[key];\n            });\n\n            const textNodes = this.el.querySelectorAll('p');\n            textNodes.forEach(node => {\n                const regExp = /\\{\\{\\s*(\\w+)\\s*\\}\\}/;\n                const text = node.textContent.trim();\n                const match = text.match(regExp);\n                if (match) {\n                    const key = match[1];\n                    node.textContent = this._data[key];\n                }\n            });\n        };\n\n        // 创建 Vue 实例\n        new Vue({\n            el: '#app',\n            data: {\n                message: 'Hello Vue!'\n            }\n        });\n    </script>\n</body>\n</html>\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 4,
    "appId": 7,
    "createAt": "2024-08-13T08:30:41.000Z",
    "updateAt": "2024-08-14T19:40:35.000Z",
    "isCollected": false,
    "currentIndex": 41,
    "filterTotalNum": 1487,
    "prev": "3d4f17ec-2091-4826-8e11-d79363a9cb89",
    "next": "64279d15-4a32-42a1-809a-6e35d59c6e62"
  },
  "post": {
    "exerciseKey": "2ea94d0f-e412-4db2-9d42-20c7eb50284f",
    "category": "QA",
    "title": "手写 vue 的双向绑定",
    "level": 4,
    "createAt": "2024-08-13T08:30:41+00:00",
    "updateAt": "2024-08-14T19:40:35+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}