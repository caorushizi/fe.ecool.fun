{
  "data": {
    "id": 199,
    "exerciseKey": "fe97f51f-1d7d-49b7-acd2-83f345014633",
    "category": "QA",
    "renderType": "md",
    "title": "谈谈对 this 对象的理解",
    "desc": null,
    "options": null,
    "explanation": "## 一、定义\n\n函数的 `this` 关键字在 `JavaScript` 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别\n\n在绝大多数情况下，函数的调用方式决定了 `this` 的值（运行时绑定）\n\n`this` 关键字是函数运行时自动生成的一个内部对象，只能在函数内部使用，总指向调用它的对象\n\n举个例子：\n\n```js\nfunction baz() {\n    // 当前调用栈是：baz\n    // 因此，当前调用位置是全局作用域\n    \n    console.log( \"baz\" );\n    bar(); // <-- bar的调用位置\n}\n\nfunction bar() {\n    // 当前调用栈是：baz --> bar\n    // 因此，当前调用位置在baz中\n    \n    console.log( \"bar\" );\n    foo(); // <-- foo的调用位置\n}\n\nfunction foo() {\n    // 当前调用栈是：baz --> bar --> foo\n    // 因此，当前调用位置在bar中\n    \n    console.log( \"foo\" );\n}\n\nbaz(); // <-- baz的调用位置\n```\n\n同时，`this`在函数执行过程中，`this`一旦被确定了，就不可以再更改\n\n```js\nvar a = 10;\nvar obj = {\n  a: 20\n}\n\nfunction fn() {\n  this = obj; // 修改this，运行后会报错\n  console.log(this.a);\n}\n\nfn();\n```\n\n\n\n\n\n## 二、绑定规则\n\n根据不同的使用场合，`this`有不同的值，主要分为下面几种情况：\n\n- 默认绑定\n- 隐式绑定\n- new绑定\n\n- 显示绑定\n\n\n\n### 默认绑定\n\n全局环境中定义`person`函数，内部使用`this`关键字\n\n```js\nvar name = 'Jenny';\nfunction person() {\n    return this.name;\n}\nconsole.log(person());  //Jenny\n```\n\n上述代码输出`Jenny`，原因是调用函数的对象在游览器中位`window`，因此`this`指向`window`，所以输出`Jenny`\n\n注意：\n\n严格模式下，不能将全局对象用于默认绑定，this会绑定到`undefined`，只有函数运行在非严格模式下，默认绑定才能绑定到全局对象\n\n\n\n### 隐式绑定\n\n函数还可以作为某个对象的方法调用，这时`this`就指这个上级对象\n\n```js\nfunction test() {\n  console.log(this.x);\n}\n\nvar obj = {};\nobj.x = 1;\nobj.m = test;\n\nobj.m(); // 1\n```\n\n这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，`this`指向的也只是它上一级的对象\n\n```js\nvar o = {\n    a:10,\n    b:{\n        fn:function(){\n            console.log(this.a); //undefined\n        }\n    }\n}\no.b.fn();\n```\n\n上述代码中，`this`的上一级对象为`b`，`b`内部并没有`a`变量的定义，所以输出`undefined`\n\n这里再举一种特殊情况\n\n```js\nvar o = {\n    a:10,\n    b:{\n        a:12,\n        fn:function(){\n            console.log(this.a); //undefined\n            console.log(this); //window\n        }\n    }\n}\nvar j = o.b.fn;\nj();\n```\n\n此时`this`指向的是`window`，这里的大家需要记住，`this`永远指向的是最后调用它的对象，虽然`fn`是对象`b`的方法，但是`fn`赋值给`j`时候并没有执行，所以最终指向`window`\n\n\n\n### new绑定\n\n通过构建函数`new`关键字生成一个实例对象，此时`this`指向这个实例对象\n\n```js\nfunction test() {\n　this.x = 1;\n}\n\nvar obj = new test();\nobj.x // 1\n```\n\n上述代码之所以能过输出1，是因为`new`关键字改变了`this`的指向\n\n这里再列举一些特殊情况：\n\n`new`过程遇到`return`一个对象，此时`this`指向为返回的对象\n\n```js\nfunction fn()  \n{  \n    this.user = 'xxx';  \n    return {};  \n}\nvar a = new fn();  \nconsole.log(a.user); //undefined\n```\n\n如果返回一个简单类型的时候，则`this`指向实例对象\n\n```js\nfunction fn()  \n{  \n    this.user = 'xxx';  \n    return 1;\n}\nvar a = new fn;  \nconsole.log(a.user); //xxx\n```\n\n注意的是`null`虽然也是对象，但是此时`new`仍然指向实例对象\n\n```js\nfunction fn()  \n{  \n    this.user = 'xxx';  \n    return null;\n}\nvar a = new fn;  \nconsole.log(a.user); //xxx\n```\n\n\n\n### 显示修改\n\n`apply()、call()、bind()`是函数的一个方法，作用是改变函数的调用对象。它的第一个参数就表示改变后的调用这个函数的对象。因此，这时`this`指的就是这第一个参数\n\n```js\nvar x = 0;\nfunction test() {\n　console.log(this.x);\n}\n\nvar obj = {};\nobj.x = 1;\nobj.m = test;\nobj.m.apply(obj) // 1\n```\n\n关于`apply、call、bind`三者的区别，我们后面再详细说\n\n\n## 三、箭头函数\n\n在 ES6 的语法中还提供了箭头函语法，让我们在代码书写时就能确定 `this` 的指向（编译时绑定）\n\n举个例子：\n\n```js\nconst obj = {\n  sayThis: () => {\n    console.log(this);\n  }\n};\n\nobj.sayThis(); // window 因为 JavaScript 没有块作用域，所以在定义 sayThis 的时候，里面的 this 就绑到 window 上去了\nconst globalSay = obj.sayThis;\nglobalSay(); // window 浏览器中的 global 对象\n```\n\n虽然箭头函数的`this`能够在编译的时候就确定了`this`的指向，但也需要注意一些潜在的坑\n\n下面举个例子：\n\n绑定事件监听\n\n```js\nconst button = document.getElementById('mngb');\nbutton.addEventListener('click', ()=> {\n    console.log(this === window) // true\n    this.innerHTML = 'clicked button'\n})\n```\n\n上述可以看到，我们其实是想要`this`为点击的`button`，但此时`this`指向了`window`\n\n包括在原型上添加方法时候，此时`this`指向`window`\n\n```js\nCat.prototype.sayName = () => {\n    console.log(this === window) //true\n    return this.name\n}\nconst cat = new Cat('mm');\ncat.sayName()\n```\n\n同样的，箭头函数不能作为构建函数\n\n\n\n## 四、优先级\n\n### 隐式绑定 VS 显式绑定\n\n```js\nfunction foo() {\n    console.log( this.a );\n}\n\nvar obj1 = {\n    a: 2,\n    foo: foo\n};\n\nvar obj2 = {\n    a: 3,\n    foo: foo\n};\n\nobj1.foo(); // 2\nobj2.foo(); // 3\n\nobj1.foo.call( obj2 ); // 3\nobj2.foo.call( obj1 ); // 2\n```\n\n显然，显式绑定的优先级更高\n\n### new绑定 VS 隐式绑定\n\n```js\nfunction foo(something) {\n    this.a = something;\n}\n\nvar obj1 = {\n    foo: foo\n};\n\nvar obj2 = {};\n\nobj1.foo( 2 );\nconsole.log( obj1.a ); // 2\n\nobj1.foo.call( obj2, 3 );\nconsole.log( obj2.a ); // 3\n\nvar bar = new obj1.foo( 4 );\nconsole.log( obj1.a ); // 2\nconsole.log( bar.a ); // 4\n```\n\n可以看到，new绑定的优先级`>`隐式绑定\n\n### `new`绑定 VS 显式绑定\n\n因为`new`和`apply、call`无法一起使用，但硬绑定也是显式绑定的一种，可以替换测试\n\n```js\nfunction foo(something) {\n    this.a = something;\n}\n\nvar obj1 = {};\n\nvar bar = foo.bind( obj1 );\nbar( 2 );\nconsole.log( obj1.a ); // 2\n\nvar baz = new bar( 3 );\nconsole.log( obj1.a ); // 2\nconsole.log( baz.a ); // 3\n```\n\n`bar`被绑定到obj1上，但是`new bar(3)` 并没有像我们预计的那样把`obj1.a`修改为3。但是，`new`修改了绑定调用`bar()`中的`this`\n\n我们可认为`new`绑定优先级`>`显式绑定\n\n综上，new绑定优先级 > 显示绑定优先级 > 隐式绑定优先级 > 默认绑定优先级\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:51:18.000Z",
    "updateAt": "2024-01-24T17:34:55.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 163,
    "prev": "c137050b-10f5-4a4f-9941-820ad7a9894d",
    "next": "21144fa1-41b7-4077-97cd-b0c6030b10e0"
  },
  "post": {
    "exerciseKey": "fe97f51f-1d7d-49b7-acd2-83f345014633",
    "category": "QA",
    "title": "谈谈对 this 对象的理解",
    "level": 2,
    "updateAt": "2024-01-24T17:34:55+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
