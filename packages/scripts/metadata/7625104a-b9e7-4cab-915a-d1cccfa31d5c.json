{
  "data": {
    "id": 1737,
    "exerciseKey": "7625104a-b9e7-4cab-915a-d1cccfa31d5c",
    "category": "QA",
    "renderType": "md",
    "title": "下面代码会输出什么？",
    "desc": "```js\nfoo();\nvar foo;\nfunction foo(){\n  console.log(1);\n}\nfoo = function(){\n  console.log(2);\n}\n```",
    "options": null,
    "explanation": "答案是：1\n\n> 函数声明和变量声明都会被提升，但是有一个值得注意的细节，那就是，函数会首先提升，然后才是变量！\n\n根据 JavaScript 的变量和函数提升规则，上述代码在执行时会被解析成以下形式：\n\n```javascript\nfunction foo(){\n  console.log(1);\n}\n\nvar foo; // 变量声明被提升至顶部\n\nfoo(); // 输出 1\n\nfoo = function(){\n  console.log(2);\n}\n```\n\n以下是代码的执行过程：\n\n1. 首先，函数 `foo` 的函数声明被提升到作用域的顶部。所以，在调用 `foo()` 之前，函数 `foo` 已经可用。\n\n2.然后，变量 `foo` 被声明，并且由于它已经被函数 `foo` 的定义所覆盖，因此这个变量声明没有改变函数 `foo` 的值。\n\n3.  接下来，函数 `foo` 被调用，输出结果为 `1`。\n\n4. 最后，变量 `foo` 被重新赋值为一个新的函数表达式，该函数输出结果为 `2`。\n\n所以，最终输出结果为：\n```\n1\n```",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2022-04-05T09:19:23.000Z",
    "updateAt": "2024-07-20T10:39:48.000Z",
    "isCollected": false,
    "currentIndex": 644,
    "filterTotalNum": 1487,
    "prev": "1a143475-08ab-49cc-abc9-62a4bb9249c0",
    "next": "87f39c64-2eb7-497f-b78a-4a84decd642d"
  },
  "post": {
    "exerciseKey": "7625104a-b9e7-4cab-915a-d1cccfa31d5c",
    "category": "QA",
    "title": "下面代码会输出什么？",
    "level": 1,
    "createAt": "2022-04-05T09:19:23+00:00",
    "updateAt": "2024-07-20T10:39:48+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}