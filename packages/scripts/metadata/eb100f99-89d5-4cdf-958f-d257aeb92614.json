{
  "data": {
    "id": 607,
    "exerciseKey": "eb100f99-89d5-4cdf-958f-d257aeb92614",
    "category": "QA",
    "renderType": "md",
    "title": "ajax、axios、fetch有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "## （1）AJAX\n\nAjax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n* 本身是针对MVC编程，不符合前端MVVM的浪潮\n* 基于原生XHR开发，XHR本身的架构不清晰\n* 不符合关注分离（Separation of Concerns）的原则\n* 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n## （2）Fetch\nfetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\n\nfetch的优点：\n\n* 语法简洁，更加语义化\n* 基于标准 Promise 实现，支持 async/await\n* 更加底层，提供的API丰富（request, response）\n* 脱离了XHR，是ES规范里新的实现方式\n\nfetch的缺点：\n\n* fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n* fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n* fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n* fetch没有办法原生监测请求的进度，而XHR可以\n\n## （3）Axios\n\nAxios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n* 浏览器端发起XMLHttpRequests请求\n* node端发起http请求\n* 支持Promise API\n* 监听请求和返回\n* 对请求和返回进行转化\n* 取消请求\n* 自动转换json数据\n* 客户端支持抵御XSRF攻击\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-08-22T10:31:22.000Z",
    "updateAt": "2022-05-29T21:47:50.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 531,
    "prev": "060a3711-75a5-4bb3-bb18-9e6e358da4bf",
    "next": "125134e6-1cc2-460b-9770-60d464365e89"
  },
  "post": {
    "exerciseKey": "eb100f99-89d5-4cdf-958f-d257aeb92614",
    "category": "QA",
    "title": "ajax、axios、fetch有什么区别？",
    "level": 2,
    "updateAt": "2022-05-29T21:47:50+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
