{
  "data": {
    "id": 1646,
    "exerciseKey": "321f6c36-eff4-4fc4-8a86-c989bb1a2779",
    "category": "QA",
    "renderType": "md",
    "title": "React 中怎么实现状态自动保存（KeepAlive）？",
    "desc": "",
    "options": null,
    "explanation": "## 什么是状态保存？\n\n假设有下述场景：\n\n移动端中，用户访问了一个列表页，上拉浏览列表页的过程中，随着滚动高度逐渐增加，数据也将采用触底分页加载的形式逐步增加，列表页浏览到某个位置，用户看到了感兴趣的项目，点击查看其详情，进入详情页，从详情页退回列表页时，需要停留在离开列表页时的浏览位置上\n\n类似的数据或场景还有已填写但未提交的表单、管理系统中可切换和可关闭的功能标签等，这类数据随着用户交互逐渐变化或增长，这里理解为状态，在交互过程中，因为某些原因需要临时离开交互场景，则需要对状态进行保存\n\n在 React 中，我们通常会使用路由去管理不同的页面，而在切换页面时，路由将会卸载掉未匹配的页面组件，所以上述列表页例子中，当用户从详情页退回列表页时，会回到列表页顶部，因为列表页组件被路由卸载后重建了，状态被丢失。\n\n## 如何实现 React 中的状态保存\n\n在 Vue 中，我们可以非常便捷地通过 <keep-alive> 标签实现状态的保存，该标签会缓存不活动的组件实例，而不是销毁它们\n\n而在 React 中并没有这个功能，曾经有人在官方提过相关 issue ，但官方认为这个功能容易造成内存泄露，表示暂时不考虑支持，所以我们需要自己想办法了。\n\n## 常见的解决方式：手动保存状态\n\n手动保存状态，是比较常见的解决方式，可以配合 React 组件的 componentWillUnmount 生命周期通过 redux 之类的状态管理层对数据进行保存，通过 componentDidMount 周期进行数据恢复\n\n在需要保存的状态较少时，这种方式可以比较快地实现我们所需功能，但在数据量大或者情况多变时，手动保存状态就会变成一件麻烦事了\n\n作为程序员，当然是尽可能懒啦，为了不需要每次都关心如何对数据进行保存恢复，我们需要研究如何自动保存状态\n\n## 通过路由实现自动状态保存（通常使用 react-router）\n\n既然 React 中状态的丢失是由于路由切换时卸载了组件引起的，那可以尝试从路由机制上去入手，**改变路由对组件的渲染行为**\n\n我们有以下的方式去实现这个功能：\n\n* 重写 <Route> 组件，可参考 [react-live-route](https://github.com/fi3ework/react-live-route)。重写可以实现我们想要的功能，但成本也比较高，需要注意对原始 <Route> 功能的保存，以及多个 react-router 版本的兼容\n* 重写路由库，可参考 [react-keeper](https://github.com/lanistor/react-keeper) 。重写路由库成本是一般开发者无法承受的，且完全替换掉路由方案是一个风险较大的事情，需要较为慎重地考虑。\n* 基于 <Route> 组件现有行为做拓展，可参考 [react-router-cache-route](https://github.com/CJY0208/react-router-cache-route) 。在阅读了 <Route> 的源码后发现，如果使用 component 或者 render 属性，都无法避免路由在不匹配时被卸载掉的命运。但将 children 属性当作方法来使用，我们就有手动控制渲染的行为的可能。\n\n上面几种方案，主要通过路由入手实现自动状态保存的可能，但终究不是真实的、纯粹的 KeepAlive 功能。\n\n## 模拟真实的 <KeepAlive> 功能\n\n以下是期望的使用方式\n\n```js\nfunction App() {\n  const [show, setShow] = useState(true)\n\n  return (\n    <div>\n      <button onClick={() => setShow(show => !show)}>Toggle</button>\n      {show && (\n        <KeepAlive>\n          <Test />\n        </KeepAlive>\n      )}\n    </div>\n  )\n}\n```\n\n下面简单介绍下 [react-activation](https://github.com/CJY0208/react-activation) 的实现原理：由于 React 会卸载掉处于固有组件层级内的组件，所以我们需要将 <KeepAlive> 中的组件，也就是其 children 属性抽取出来，渲染到一个不会被卸载的组件 <Keeper> 内，再使用 DOM 操作将 <Keeper> 内的真实内容移入对应 <KeepAlive>，就可以实现此功能。\n\n\n\n\n\n\n\n\n\n",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2022-01-16T15:17:58.000Z",
    "updateAt": "2022-01-16T23:28:03.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 632,
    "prev": "800f499d-75d2-4f3b-9bb3-542cf21721a5",
    "next": "8d97f05b-37a5-4a58-8dff-0574918ccd67"
  },
  "post": {
    "exerciseKey": "321f6c36-eff4-4fc4-8a86-c989bb1a2779",
    "category": "QA",
    "title": "React 中怎么实现状态自动保存（KeepAlive）？",
    "level": 3.5,
    "updateAt": "2022-01-16T23:28:03+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
