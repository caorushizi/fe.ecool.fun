{
  "data": {
    "id": 494,
    "exerciseKey": "8740bcd2-4a52-4c22-aed1-d573eb42dfa9",
    "category": "QA",
    "renderType": "md",
    "title": "HTTPS 为什么是安全的？",
    "desc": null,
    "options": null,
    "explanation": "以一个故事来学习 HTTPS：\n\n来自中国的张大胖和位于米国的 Bill 进行通信。\n\n由于张大胖和 Bill 都是使用 HTTP 进行通信，HTTP 是明文的，所以他们的聊天都是可被窥视的。于是，二人准备想要改变现状，所以 HTTPS 首先要解决的问题就是要保证传输的内容只有这两个人能看懂。\n\n## plan1：使用对称密钥\n\n![image.png](https://static.ecool.fun//article/fd6b5f8a-b233-486b-a6a2-3159a77cb7ae.png)\n\n两人商量了一下，可以使用对称密钥进行加密。（对称密钥也就是加密和解密使用的是同一个密钥）\n\n但是问题又来了~既然网络是不安全的，那么最开始的时候怎么将这个对称密钥发送出去呢？如果对称密钥在发送的时候就已经被拦截，那么发送的信息还是会被篡改和窥视啊~~\n\n所以这种对称密钥的弊端就是，可能被中间人拦截，这样中间人就可以获取到了密钥，就可以对传输的信息就行窥视和篡改。\n\n## plan2：使用非对称密钥\n\n![image.png](https://static.ecool.fun//article/38ae2865-9de4-457e-9b14-a499d784dc58.png)\n\nRSA（非对称加密算法）：双方必须协商一对密钥，一个私钥一个公钥。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据， 只有对应的私钥才能解密。\n\n![image.png](https://static.ecool.fun//article/8e2f8088-f4da-4248-9e2d-94cd17600e2b.png)\n\n这样的话 Bill 将自己的公钥给张大胖，张大胖发送的信息使用 Bill 的公钥加密，这样，只有 Bill 使用自己的私钥才能获取\n\n但是这样有个弊端：\n\n**RSA 算法很慢**\n\n所以为了解决这个问题，我们使用非对称密钥+对称密钥结合的方式\n\n## plan3：非对称密钥+对称密钥\n\n使用对称密钥的好处是速度比较快，使用非对称密钥的好处是可以使得传输的内容不能被破解，因为就算你拦截到了数据，但是没有 Bill 的私钥，也是不能破解内容的。就比如说你抢了一个保险柜，但是没有保险柜的钥匙也不能打开保险柜。\n\n所以我们要结合两者的优点。使用 RSA 的方法将加密算法的对称密钥发送过去，之后就可以使用使用这个密钥，利用对称密钥来通信了。就比如说我将钥匙放进了保险柜，然后将保险柜寄给对方。\n\n## 中间人攻击\n\n\n还有一个问题就是在使用非对称密钥的时候，首先需要将 Bill 的公钥给张大胖，那么在这个过程中，安全是没有保障的，中间人可以拦截到 Bill 的公钥，就可以对拦截到的公钥进行篡改。\n\n这也就是相当于我有手机号，虽然是公开的，谁都可以给我打电话，但是刚开始你并不知道我的手机号，我需要将我的手机号发给你，在我发给你我的手机号的时候，被中间人拦截了，然后将我正确的手机号换成了错误的手机号，比如：110，然后，你收到的就是错误的手机号：110，但是你自己还不知道你收到的是错的手机号，这时候，你要是给我打电话，就尴尬了~~\n\n## 确认身份 —— 数字证书\n\n所以以上的步骤都是可行的，只需要最后一点就可以了，要确定 Bill 给张大胖的公钥确实是 Bill。 的公钥，而不是别人的。（刚刚电话号码的那个例子，也就是说，需要确定我给你发的电话号码是我的，没有被修改的）\n\n那怎么确认 Bill 给张大胖的公钥确实是 Bill 的呢？\n\n这个时候就需要公证处的存在了。也就是说我需要先将我的电话号码到公证处去公证一下，然后我将电话号码传给你之后，你在将你收到的电话号码和公证处的比对下，就知道是不是我的了。\n\n对应到计算机世界，那就是数字签名\n\n![image.png](https://static.ecool.fun//article/2df74fe1-73b8-4370-82ed-e24298c9d0a3.png)\n\n数字签名也就是相当于公证处在公证书上盖章。\n\n![image.png](https://static.ecool.fun//article/ab607ef0-558e-4def-9772-dec27415660a.png)\n\n数字签名和原始信息合在一起称为数字证书，Bill 只需将数字证书发送给张大胖就可以了。\n\n在拿到数字证书之后，就用同样的Hash 算法， 再次生成消息摘要，然后用CA的公钥对数字签名解密， 得到CA创建的消息摘要， 两者一比，就知道有没有人篡改了！\n\n![image.png](https://static.ecool.fun//article/ceeedccb-77a0-43c6-ab00-a8d5c7942a51.png)\n\n以上你全部看完并且理解了，那么对于 HTTPS 你也就大概有个了解了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-11T04:48:54.000Z",
    "updateAt": "2024-01-25T19:10:09.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 99,
    "prev": "43972778-bd1d-4ff4-a153-6c6df65242e3",
    "next": "bc2dd708-c6eb-499f-9139-e2fcfa9255ef"
  },
  "post": {
    "exerciseKey": "8740bcd2-4a52-4c22-aed1-d573eb42dfa9",
    "category": "QA",
    "title": "HTTPS 为什么是安全的？",
    "level": 4,
    "updateAt": "2024-01-25T19:10:09+00:00"
  },
  "tag": {
    "id": 16,
    "tagName": "计算机网络",
    "type": "1",
    "exerciseCount": 72
  }
}