{
  "data": {
    "id": 2580,
    "exerciseKey": "0367ccd1-0db1-411e-865a-36ec2e7e2048",
    "category": "QA",
    "renderType": "md",
    "title": "React Reconciler 为何要采用 fiber 架构？",
    "desc": "",
    "options": "",
    "explanation": "React Reconciler 采用 Fiber 架构主要是为了提升性能和用户体验。Fiber 是 React 16 引入的一种新的协调算法，它相对于旧版的 Reconciler 具备以下优势：\n\n### **1. 增量渲染**\n\n- **旧版 Reconciler**：一次性计算并更新整个 UI 树，可能会导致性能瓶颈，尤其是在大型应用中。\n- **Fiber 架构**：支持增量渲染，将渲染任务拆分为小的单元，分批执行。这样可以在长时间运行的任务中插入中断点，使得 UI 更响应式。\n\n### **2. 中断和优先级**\n\n- **旧版 Reconciler**：一旦开始更新，渲染过程无法中断，可能会阻塞用户交互。\n- **Fiber 架构**：允许中断和恢复工作，可以根据任务的优先级来调整渲染顺序。低优先级的任务可以在高优先级任务完成后再继续执行，提高了用户交互的流畅性。\n\n### **3. 任务调度**\n\n- **旧版 Reconciler**：没有任务调度机制，所有更新都按顺序执行。\n- **Fiber 架构**：使用任务调度机制（Scheduler）来管理和调度不同优先级的更新任务，确保重要任务（如用户输入、动画）优先处理。\n\n### **4. 异常处理**\n\n- **旧版 Reconciler**：异常处理能力有限，无法优雅地处理渲染过程中的错误。\n- **Fiber 架构**：允许局部错误处理，确保在渲染过程中即使发生异常，也能保证 UI 的部分更新和恢复。\n\n### **5. 渲染中断与恢复**\n\n- **旧版 Reconciler**：无法中断和恢复渲染。\n- **Fiber 架构**：支持在渲染过程中中断并恢复，能够平滑处理长时间运行的任务。\n\n### **6. 事务管理**\n\n- **旧版 Reconciler**：处理复杂的事务和操作较为困难。\n- **Fiber 架构**：将渲染任务分解为独立的事务，每个事务可以独立地管理和控制，简化了复杂操作的管理。",
    "pivot": "",
    "vipLimit": 1,
    "level": 3.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T19:04:53.000Z",
    "isCollected": false,
    "currentIndex": 145,
    "filterTotalNum": 1487,
    "prev": "db24eaf9-ddf2-476b-ba63-03b7520cdaca",
    "next": "8ebf476c-a776-49a1-a8b7-7eae37237cb2"
  },
  "post": {
    "exerciseKey": "0367ccd1-0db1-411e-865a-36ec2e7e2048",
    "category": "QA",
    "title": "React Reconciler 为何要采用 fiber 架构？",
    "level": 3.5,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T19:04:53+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}