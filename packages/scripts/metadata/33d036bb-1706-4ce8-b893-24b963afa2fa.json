{
  "data": {
    "id": 2040,
    "exerciseKey": "33d036bb-1706-4ce8-b893-24b963afa2fa",
    "category": "QA",
    "renderType": "md",
    "title": "typescript 中的 is 关键字有什么用？",
    "desc": null,
    "options": null,
    "explanation": "TypeScript 中的 `is` 关键字用于类型保护，可以在运行时判断一个对象是否属于某个类型，并根据不同的类型执行不同的逻辑。\n\n具体来说，`is` 关键字通常和 `instanceof` 运算符一起使用，用于判断一个对象是否是某个类的实例。例如：\n\n```typescript\nclass Animal {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n}\n\nfunction isDog(animal: Animal): animal is Dog {\n    return (animal as Dog).breed !== undefined;\n}\n\nlet a1 = new Animal(\"Tom\");\nlet d1 = new Dog(\"Tony\", \"Poodle\");\n\nconsole.log(isDog(a1));  // false\nconsole.log(isDog(d1));  // true\n```\n\n在上面的代码中，我们定义了一个 `isDog` 函数，它接受一个 `Animal` 类型的参数，返回值是一个布尔值。如果这个参数是 `Dog` 类型的实例，则返回 `true`；否则返回 `false`。注意，这里我们使用 `animal is Dog` 语法来显式地指定返回值类型为布尔值，表示这个函数就是一个类型谓词函数。\n\n在 `isDog` 函数中，我们通过判断传入的 `animal` 参数是否含有 `breed` 属性，来判断它是否是 `Dog` 类型的实例。如果是，则返回 `true`；否则返回 `false`。\n\n最后，我们可以通过调用 `isDog` 函数来判断一个对象是否是 `Dog` 类型的实例，并根据不同的类型执行相应的逻辑。",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2023-05-31T12:25:11.000Z",
    "updateAt": "2024-08-10T17:07:28.000Z",
    "isCollected": false,
    "currentIndex": 349,
    "filterTotalNum": 1487,
    "prev": "731f483a-4575-4f2b-8119-bdcf20629e72",
    "next": "6edf54be-a9ce-44f3-8dbc-490ab7ef06b8"
  },
  "post": {
    "exerciseKey": "33d036bb-1706-4ce8-b893-24b963afa2fa",
    "category": "QA",
    "title": "typescript 中的 is 关键字有什么用？",
    "level": 3,
    "createAt": "2023-05-31T12:25:11+00:00",
    "updateAt": "2024-08-10T17:07:28+00:00"
  },
  "tag": {
    "id": 19,
    "tagName": "Typescript",
    "type": "1",
    "exerciseCount": 55
  }
}