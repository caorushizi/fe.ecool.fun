{
  "data": {
    "id": 1783,
    "exerciseKey": "c25081e4-6374-4e78-abec-1a31999e528e",
    "category": "QA",
    "renderType": "md",
    "title": "写一个返回数据类型的函数，要求自定义的类实例化的对象返回定义的类名",
    "desc": null,
    "options": null,
    "explanation": "Javascript是一门动态类型的语言，一个变量从声明到最后使用，可能经过了很多个函数，而数据类型也会发生改变，那么，对一个变量的数据类型判断就显得尤为重要。\n\n# 获取数据类型\n\n我们先来看下怎么获取一个数据的类型。\n\n## typeof是否能正确判断类型？\n\n由于由于历史原因，在判断原始类型时，`typeof null`会等于`object`。而且对于对象（Object）、数组（Array）来说，都会转换成`object`。例子如下：\n\n```javascript\n    typeof 1 // 'number'\n    typeof \"1\" // 'string'\n    typeof null // 'object'\n    typeof undefined // 'undefined'\n    \n    typeof [] // 'object'\n    typeof {} // 'object'\n    typeof function() {} // 'function'\n```\n所以我们可以发现，typeof可以判断基本数据类型，但是难以判断除了函数以外的复杂数据类型。于是我们可以使用第二种方法，通常用来判断复杂数据类型，也可以用来判断基本数据类型。\n\n对于返回值为`object`，有三种情况：\n- 值为null\n- 值为object\n- 值为array\n\n对于null，我们可以直接用===来进行判断，那么数组和对象呢？不急，我们接着说。\n\n## instanceof是否能正确判断类型？\n\n`instanceof`是通过原型链来判断的，但是对于对象来说，`Array`也会被转换成`Object`，而且也不能区分基本类型`string`和`boolean`。可以左边放你要判断的内容，右边放类型来进行JS类型判断，只能用来判断复杂数据类型,因为instanceof 是用于检测构造函数（右边）的 prototype 属性是否出现在某个实例对象（左边）的原型链上。例如：\n\n```javascript\n    function Func() {}\n    const func = new Func()\n    console.log(func instanceof Func) // true\n    \n    const obj = {}\n    const arr = []\n    obj instanceof Object // true\n    arr instanceof Object // true\n    arr instanceof Array // true\n    \n    const str = \"abc\"\n    const str2 = new String(\"abc\")\n    str instanceof String // false\n    str2 instanceof String // true\n```\n\n单独使用`instanceof`好像也是不行的，但是我们对于typeof已经得出结论，不能区分数组和对象，那么，我们结合下`instanceof`，来写一个完整的判断逻辑\n\n```javascript\n    function myTypeof(data) {\n        const type = typeof data\n        if (data === null) {\n            return 'null'\n        }\n        if (type !== 'object') {\n            return type\n        }\n        if (data instanceof Array) {\n            return 'array'\n        }\n        return 'object'\n    }\n```\n## constructor\n\nconstructor 判断方法跟instanceof相似,但是constructor检测Object与instanceof不一样,constructor还可以处理基本数据类型的检测,不仅仅是对象类型。\n\n注意:\n\n1. null和undefined没有constructor;\n2. 判断数字时使用(),比如  (123).constructor,如果写成123.constructor会报错\n3. constructor在类继承时会出错,因为Object被覆盖掉了,检测结果就不对了\n\n```javascript\n    function A() {};\n    function B() {};\n    A.prototype = new B();\n    console.log(A.constructor === B)  // false\n\n    var C = new A();\n    console.log(C.constructor === B)  // true\n    console.log(C.constructor === A)  // false \n\n    C.constructor = A;\n    console.log(C.constructor === A);  // true\n    console.log(C.constructor === B);  // false\n```\n\n## Array.isArray()\n\nArray.isArray() 用于确定传递的值是否是一个 Array。如果对象是 Array ，则返回true，否则为false。\n\n```javascript\n    Array.isArray([1, 2, 3]); // true\n    Array.isArray({foo: 123}); // false\n    Array.isArray(\"foobar\"); // false\n    Array.isArray(undefined); // false\n```\n\n## 正则判断\n\n我们可以把对象和数组转成一个字符串，这样就可以做格式判断，从而得到最终的类型。\n\n```javascript\n    function myTypeof(data) {\n        const str = JSON.stringify(data)\n        if (/^{.*}$/.test(data)) {\n            return 'object'\n        }\n        if (/^\\[.*\\]$/.test(data)) {\n            return 'array'\n        }\n    }\n```\n\n\n## Object.prototype.toString.call()\n\n上面我们通过`typeof`和`instanceof`实现了一版类型判断，那么是否有其他渠道，使我们的代码更加简洁吗？答案就是使用`Object.prototype.toString.call()`。\n\n每个对象都有一个`toString()`方法，当要将对象表示为文本值或以预期字符串的方式引用对象时，会自动调用该方法。默认情况下，从`Object`派生的每个对象都会继承`toString()`方法。如果此方法未在自定义对象中被覆盖，则`toString()`返回`[Object type]`，其中`type`是对象类型。所以就有以下例子：\n\n```javascript\n    Object.prototype.toString.call(new Date()) // [object Date]\n    Object.prototype.toString.call(\"1\") // [object String]\n    Object.prototype.toString.call(1) // [object Numer]\n    Object.prototype.toString.call(undefined) // [object Undefined]\n    Object.prototype.toString.call(null) // [object Null]\n```\n\n所以综合上述知识点，我们可以封装出以下通用类型判断方法：\n\n```javascript\n    function myTypeof(data) {\n        var toString = Object.prototype.toString;\n        var dataType = data instanceof Element ? \"Element\" : toString.call(data).replace(/\\[object\\s(.+)\\]/, \"$1\")\n        return dataType\n    };\n\n    myTypeof(\"a\") // String\n    myTypeof(1) // Number\n    myTypeof(window) // Window\n    myTypeof(document.querySelector(\"h1\")) // Element\n```\n\n# 获取实例化对象的类名\n\n题目中的第二个要求，是对于自定义的类实例化的对象，需要返回定义的类名。\n\n这个也比较简单，我们对于上述获取的 Object 类型的数据，直接使用 `xx.constructor.name` 即可获取到这个数据对应的类名。\n\n# 最终实现\n\n```js\nfunction myTypeof(data) {\n    var toString = Object.prototype.toString;\n    var dataType = data instanceof Element ? \"Element\" : toString.call(data).replace(/\\[object\\s(.+)\\]/, \"$1\")\n\n    if(dataType === 'Object'){\n        return data.constructor.name\n    }\n\n    return dataType\n};\n```\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-04-26T01:19:07.000Z",
    "updateAt": "2022-06-25T10:09:15.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 526,
    "prev": "838b4eda-1f58-4215-9bb5-3e59db973286",
    "next": "bc918d0d-ecea-459c-930c-3c502708a997"
  },
  "post": {
    "exerciseKey": "c25081e4-6374-4e78-abec-1a31999e528e",
    "category": "QA",
    "title": "写一个返回数据类型的函数，要求自定义的类实例化的对象返回定义的类名",
    "level": 2,
    "updateAt": "2022-06-25T10:09:15+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
