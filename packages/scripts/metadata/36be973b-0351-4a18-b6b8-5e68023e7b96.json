{
  "data": {
    "id": 333,
    "exerciseKey": "36be973b-0351-4a18-b6b8-5e68023e7b96",
    "category": "QA",
    "renderType": "md",
    "title": "setState 是同步，还是异步的？",
    "desc": null,
    "options": null,
    "explanation": "PS: 2022年10月更新答案\n\n# react18之前。\n\nsetState在不同情况下可以表现为异步或同步。\n\n在Promise的状态更新、js原生事件、setTimeout、setInterval..中是同步的。\n\n在react的合成事件中，是异步的。\n\n---\n\n# react18之后。\n\nsetState都会表现为异步（即批处理）。  \n[官方详细说明。](https://github.com/reactwg/react-18/discussions/21)\n\n## react18之前版本的解释\n\n在React中，如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state 。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。\n\n原因： 在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state。\n\n注意： setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。\n\n综上，setState 只在合成事件和 hook() 中是“异步”的，在 原生事件和 setTimeout 中都是同步的。\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2021-07-04T12:08:16.000Z",
    "updateAt": "2024-08-10T17:05:02.000Z",
    "isCollected": false,
    "currentIndex": 1167,
    "filterTotalNum": 1487,
    "prev": "f31923c7-7157-408b-8e12-74ced305802e",
    "next": "1e01a341-f1c4-490b-966d-32433edd42bf"
  },
  "post": {
    "exerciseKey": "36be973b-0351-4a18-b6b8-5e68023e7b96",
    "category": "QA",
    "title": "setState 是同步，还是异步的？",
    "level": 3,
    "createAt": "2021-07-04T12:08:16+00:00",
    "updateAt": "2024-08-10T17:05:02+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}