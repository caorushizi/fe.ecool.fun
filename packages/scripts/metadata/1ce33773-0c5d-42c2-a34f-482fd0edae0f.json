{
  "data": {
    "id": 2707,
    "exerciseKey": "1ce33773-0c5d-42c2-a34f-482fd0edae0f",
    "category": "QA",
    "renderType": "md",
    "title": "useEffect的第二个参数，是如何判断实现依赖是否发生变化的？",
    "desc": "",
    "options": "",
    "explanation": "`useEffect` 的依赖数组的比较是通过浅比较（shallow comparison）实现的。\n\n具体来说，以下是比较方法的细节：\n\n### **1. 基础数据类型的比较**\n\n对于基本数据类型（如 `string`、`number`、`boolean`），React 直接比较它们的值：\n\n- **相等**：`value1 === value2`。如果两个基本数据类型的值相等，React 认为它们没有变化。\n- **不相等**：如果值不相等，则认为依赖项发生了变化。\n\n### **2. 引用类型的比较**\n\n对于引用类型（如对象、数组、函数），React 进行浅比较，即比较引用的内存地址：\n\n- **相同引用**：如果对象或数组的引用没有变化（即它们仍指向同一个内存地址），React 认为依赖项没有变化。\n- **不同引用**：如果对象或数组的引用发生了变化（即它们指向不同的内存地址），React 认为依赖项发生了变化。\n\n### **浅比较的具体方法**\n\n- **对象和数组的引用比较**：\n  - React 通过 `===` 运算符来比较对象或数组的引用。\n  - 这意味着即使对象或数组的内容发生了变化，只要它们的引用没有变化，React 认为它们没有变化。\n\n- **函数的引用比较**：\n  - 函数也是通过其引用进行比较的。如果一个函数的引用在不同的渲染中保持不变，React 认为函数没有变化。\n\n### **示例代码**\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // 副作用函数将在 `count` 或 `data` 变化时重新执行\n    console.log('Effect triggered');\n  }, [count, data]); // 依赖数组\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment Count</button>\n      <button onClick={() => setData([...data, count])}>Add Data</button>\n    </div>\n  );\n}\n```\n\n- **基础数据类型（`count`）**：\n  - 每次点击按钮时，`count` 的值都会改变，React 会认为 `count` 发生了变化，从而触发 `useEffect`。\n\n- **引用类型（`data`）**：\n  - 每次点击“Add Data”按钮时，`data` 的引用会改变（由于使用了展开运算符创建了新数组），React 会认为 `data` 发生了变化，从而触发 `useEffect`。\n\n### **注意事项**\n\n- **数组和对象的不可变性**：为确保 `useEffect` 能正确地检测依赖变化，通常建议使用不可变数据结构或确保数据结构的变化能够生成新的引用。\n- **避免不必要的副作用执行**：在依赖数组中包含过多的依赖项，尤其是引用类型的依赖项，可能导致不必要的副作用执行，影响性能。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:41.000Z",
    "updateAt": "2024-08-14T23:27:05.000Z",
    "isCollected": false,
    "currentIndex": 78,
    "filterTotalNum": 1487,
    "prev": "fbe1ba95-3c26-4d09-b65d-c2dda661b280",
    "next": "52369964-6576-4581-90a6-b71aa61ad9f3"
  },
  "post": {
    "exerciseKey": "1ce33773-0c5d-42c2-a34f-482fd0edae0f",
    "category": "QA",
    "title": "useEffect的第二个参数，是如何判断实现依赖是否发生变化的？",
    "level": 1,
    "createAt": "2024-08-13T08:30:41+00:00",
    "updateAt": "2024-08-14T23:27:05+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}