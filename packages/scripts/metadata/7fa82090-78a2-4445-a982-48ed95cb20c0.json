{
  "data": {
    "id": 217,
    "exerciseKey": "7fa82090-78a2-4445-a982-48ed95cb20c0",
    "category": "QA",
    "renderType": "md",
    "title": "什么是防抖和节流，以及如何编码实现？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n本质上是优化高频率执行代码的一种手段\n\n如：浏览器的 `resize`、`scroll`、`keypress`、`mousemove` 等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能\n\n为了优化体验，需要对这类事件进行调用次数的限制，对此我们就可以采用`throttle`（节流）和`debounce`（防抖）的方式来减少调用频率\n\n#### 定义\n\n- 节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n- 防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时\n\n一个经典的比喻:\n\n想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应\n\n假设电梯有两种运行策略 `debounce` 和 `throttle`，超时设定为15秒，不考虑容量限制\n\n电梯第一个人进来后，15秒后准时运送一次，这是节流\n\n电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是防抖\n\n## 代码实现\n\n### 节流\n\n完成节流可以使用时间戳与定时器的写法\n\n使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行\n\n```js\nfunction throttled1(fn, delay = 500) {\n    let oldtime = Date.now()\n    return function (...args) {\n        let newtime = Date.now()\n        if (newtime - oldtime >= delay) {\n            fn.apply(null, args)\n            oldtime = Date.now()\n        }\n    }\n}\n\n```\n\n使用定时器写法，`delay`毫秒后第一次执行，第二次事件停止触发后依然会再一次执行\n\n```js\nfunction throttled2(fn, delay = 500) {\n    let timer = null\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args)\n                timer = null\n            }, delay);\n        }\n    }\n}\n```\n\n可以将时间戳写法的特性与定时器写法的特性相结合，实现一个更加精确的节流。实现如下\n\n```js\nfunction throttled(fn, delay) {\n    let timer = null\n    let starttime = Date.now()\n    return function () {\n        let curTime = Date.now() // 当前时间\n        let remaining = delay - (curTime - starttime)  // 从上一次到现在，还剩下多少多余时间\n        let context = this\n        let args = arguments\n        clearTimeout(timer)\n        if (remaining <= 0) {\n            fn.apply(context, args)\n            starttime = Date.now()\n        } else {\n            timer = setTimeout(fn, remaining);\n        }\n    }\n}\n```\n\n### 防抖\n\n简单版本的实现\n\n```js\nfunction debounce(func, wait) {\n    let timeout;\n\n    return function () {\n        let context = this; // 保存this指向\n        let args = arguments; // 拿到event对象\n\n        clearTimeout(timeout)\n        timeout = setTimeout(function(){\n            func.apply(context, args)\n        }, wait);\n    }\n}\n```\n\n防抖如果需要立即执行，可加入第三个参数用于判断，实现如下：\n\n```js\nfunction debounce(func, wait, immediate) {\n\n    let timeout;\n\n    return function () {\n        let context = this;\n        let args = arguments;\n\n        if (timeout) clearTimeout(timeout); // timeout 不为null\n        if (immediate) {\n            let callNow = !timeout; // 第一次会立即执行，以后只有事件执行后才会再次触发\n            timeout = setTimeout(function () {\n                timeout = null;\n            }, wait)\n            if (callNow) {\n                func.apply(context, args)\n            }\n        }\n        else {\n            timeout = setTimeout(function () {\n                func.apply(context, args)\n            }, wait);\n        }\n    }\n}\n```\n\n## 二、区别\n\n相同点：\n\n- 都可以通过使用 `setTimeout` 实现\n- 目的都是，降低回调执行频率。节省计算资源\n\n不同点：\n\n- 函数防抖，在一段连续操作结束后，处理回调，利用`clearTimeout `和 `setTimeout`实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能\n- 函数防抖关注一定时间连续触发的事件，只在最后执行一次，而函数节流一段时间内只执行一次\n\n例如，都设置时间频率为500ms，在2秒时间内，频繁触发函数，节流，每隔 500ms 就执行一次。防抖，则不管调动多少次方法，在2s后，只会执行一次\n\n如下图所示：\n\n ![](https://static.ecool.fun//article/5650498e-9fc1-4b0e-bd68-63831bc94cb3.png)\n\n\n## 三、应用场景\n\n防抖在连续的事件，只需触发一次回调的场景有：\n\n- 搜索框搜索输入。只需用户最后一次输入完，再发送请求\n- 手机号、邮箱验证输入检测\n- 窗口大小`resize`。只需窗口调整完成后，计算窗口大小。防止重复渲染。\n\n节流在间隔一段时间执行一次回调的场景有：\n\n- 滚动加载，加载更多或滚到底部监听\n- 搜索框，搜索联想功能",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T14:03:41.000Z",
    "updateAt": "2024-01-24T17:43:41.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 147,
    "prev": "ccde1c25-c646-4521-bf81-fcb0a3581ce2",
    "next": "c141b446-0f24-4580-8594-f61f23dc5979"
  },
  "post": {
    "exerciseKey": "7fa82090-78a2-4445-a982-48ed95cb20c0",
    "category": "QA",
    "title": "什么是防抖和节流，以及如何编码实现？",
    "level": 2,
    "updateAt": "2024-01-24T17:43:41+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}