{
  "data": {
    "id": 209,
    "exerciseKey": "138cc142-490a-4ca9-8221-5f13429c807f",
    "category": "QA",
    "renderType": "md",
    "title": "谈谈你知道的DOM常见的操作",
    "desc": null,
    "options": null,
    "explanation": "## 一、DOM\n\n文档对象模型 (DOM) 是 `HTML` 和 `XML` 文档的编程接口\n\n它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容\n\n任何 `HTML `或` XML `文档都可以用 `DOM `表示为一个由节点构成的层级结构\n\n节点分很多类型，每种类型对应着文档中不同的信息和（或）标记，也都有自己不同的特性、数据和方法，而且与其他类型有某种关系，如下所示：\n\n```html\n<html>\n    <head>\n        <title>Page</title>\n    </head>\n    <body>\n        <p>Hello World!</p >\n    </body>\n</html>\n```\n\n`DOM`像原子包含着亚原子微粒那样，也有很多类型的`DOM`节点包含着其他类型的节点。接下来我们先看看其中的三种：\n\n```html\n<div>\n    <p title=\"title\">\n        content\n    </p >\n</div>\n```\n\n上述结构中，`div`、`p`就是元素节点，`content`就是文本节点，`title`就是属性节点\n\n\n\n## 二、操作\n\n日常前端开发，我们都离不开`DOM`操作\n\n在以前，我们使用`Jquery`，`zepto`等库来操作`DOM`，之后在`vue`，`Angular`，`React`等框架出现后，我们通过操作数据来控制`DOM`（绝大多数时候），越来越少的去直接操作`DOM`\n\n但这并不代表原生操作不重要。相反，`DOM`操作才能有助于我们理解框架深层的内容\n\n下面就来分析`DOM`常见的操作，主要分为：\n\n- 创建节点\n- 查询节点\n- 更新节点\n- 添加节点\n- 删除节点\n\n\n\n### 创建节点\n\n#### createElement\n\n创建新元素，接受一个参数，即要创建元素的标签名\n\n```js\nconst divEl = document.createElement(\"div\");\n```\n\n\n\n#### createTextNode\n\n创建一个文本节点\n\n```js\nconst textEl = document.createTextNode(\"content\");\n```\n\n\n\n#### createDocumentFragment\n\n用来创建一个文档碎片，它表示一种轻量级的文档，主要是用来存储临时节点，然后把文档碎片的内容一次性添加到`DOM`中\n\n```js\nconst fragment = document.createDocumentFragment();\n```\n\n当请求把一个`DocumentFragment` 节点插入文档树时，插入的不是 `DocumentFragment `自身，而是它的所有子孙节点\n\n\n\n#### createAttribute\n\n创建属性节点，可以是自定义属性\n\n```js\nconst dataAttribute = document.createAttribute('custom');\nconsle.log(dataAttribute);\n```\n\n\n\n### 获取节点\n\n#### querySelector\n\n传入任何有效的` css` 选择器，即可选中单个 `DOM `元素（首个）：\n\n```js\ndocument.querySelector('.element')\ndocument.querySelector('#element')\ndocument.querySelector('div')\ndocument.querySelector('[name=\"username\"]')\ndocument.querySelector('div + p > span')\n```\n\n如果页面上没有指定的元素时，返回 `null`\n\n\n\n#### querySelectorAll\n\n返回一个包含节点子树内所有与之相匹配的`Element`节点列表，如果没有相匹配的，则返回一个空节点列表\n\n```js\nconst notLive = document.querySelectorAll(\"p\");\n```\n\n需要注意的是，该方法返回的是一个 `NodeList `的静态实例，它是一个静态的“快照”，而非“实时”的查询\n\n\n\n\n\n关于获取`DOM`元素的方法还有如下，就不一一述说\n\n```js\ndocument.getElementById('id属性值');返回拥有指定id的对象的引用\ndocument.getElementsByClassName('class属性值');返回拥有指定class的对象集合\ndocument.getElementsByTagName('标签名');返回拥有指定标签名的对象集合\ndocument.getElementsByName('name属性值'); 返回拥有指定名称的对象结合\ndocument/element.querySelector('CSS选择器');  仅返回第一个匹配的元素\ndocument/element.querySelectorAll('CSS选择器');   返回所有匹配的元素\ndocument.documentElement;  获取页面中的HTML标签\ndocument.body; 获取页面中的BODY标签\ndocument.all[''];  获取页面中的所有元素节点的对象集合型\n```\n\n除此之外，每个`DOM`元素还有`parentNode`、`childNodes`、`firstChild`、`lastChild`、`nextSibling`、`previousSibling`属性，关系图如下图所示\n\n ![](https://static.ecool.fun//article/9d682579-6386-4f28-8e4f-cd885beafb7f.png)\n\n\n\n### 更新节点\n\n#### innerHTML\n\n不但可以修改一个`DOM`节点的文本内容，还可以直接通过`HTML`片段修改`DOM`节点内部的子树\n\n```js\n// 获取<p id=\"p\">...</p >\nvar p = document.getElementById('p');\n// 设置文本为abc:\np.innerHTML = 'ABC'; // <p id=\"p\">ABC</p >\n// 设置HTML:\np.innerHTML = 'ABC <span style=\"color:red\">RED</span> XYZ';\n// <p>...</p >的内部结构已修改\n```\n\n\n\n#### innerText、textContent\n\n自动对字符串进行`HTML`编码，保证无法设置任何`HTML`标签\n\n```\n// 获取<p id=\"p-id\">...</p >\nvar p = document.getElementById('p-id');\n// 设置文本:\np.innerText = '<script>alert(\"Hi\")</script>';\n// HTML被自动编码，无法设置一个<script>节点:\n// <p id=\"p-id\">&lt;script&gt;alert(\"Hi\")&lt;/script&gt;</p >\n```\n\n两者的区别在于读取属性时，`innerText`不返回隐藏元素的文本，而`textContent`返回所有文本\n\n\n\n#### style\n\n`DOM`节点的`style`属性对应所有的`CSS`，可以直接获取或设置。遇到`-`需要转化为驼峰命名\n\n```js\n// 获取<p id=\"p-id\">...</p >\nconst p = document.getElementById('p-id');\n// 设置CSS:\np.style.color = '#ff0000';\np.style.fontSize = '20px'; // 驼峰命名\np.style.paddingTop = '2em';\n```\n\n\n\n\n\n### 添加节点\n\n#### innerHTML\n\n如果这个DOM节点是空的，例如，`<div></div>`，那么，直接使用`innerHTML = '<span>child</span>'`就可以修改`DOM`节点的内容，相当于添加了新的`DOM`节点\n\n如果这个DOM节点不是空的，那就不能这么做，因为`innerHTML`会直接替换掉原来的所有子节点\n\n\n\n#### appendChild\n\n把一个子节点添加到父节点的最后一个子节点\n\n举个例子\n\n```js\n<!-- HTML结构 -->\n<p id=\"js\">JavaScript</p >\n<div id=\"list\">\n    <p id=\"java\">Java</p >\n    <p id=\"python\">Python</p >\n    <p id=\"scheme\">Scheme</p >\n</div>\n```\n\n添加一个`p`元素\n\n```js\nconst js = document.getElementById('js')\njs.innerHTML = \"JavaScript\"\nconst list = document.getElementById('list');\nlist.appendChild(js);\n```\n\n现在`HTML`结构变成了下面\n\n```js\n<!-- HTML结构 -->\n<div id=\"list\">\n    <p id=\"java\">Java</p >\n    <p id=\"python\">Python</p >\n    <p id=\"scheme\">Scheme</p >\n    <p id=\"js\">JavaScript</p >  <!-- 添加元素 -->\n</div>\n```\n\n上述代码中，我们是获取`DOM`元素后再进行添加操作，这个`js`节点是已经存在当前文档树中，因此这个节点首先会从原先的位置删除，再插入到新的位置\n\n如果动态添加新的节点，则先创建一个新的节点，然后插入到指定的位置\n\n```js\nconst list = document.getElementById('list'),\nconst haskell = document.createElement('p');\nhaskell.id = 'haskell';\nhaskell.innerText = 'Haskell';\nlist.appendChild(haskell);\n```\n\n\n\n#### insertBefore\n\n把子节点插入到指定的位置，使用方法如下：\n\n```js\nparentElement.insertBefore(newElement, referenceElement)\n```\n\n子节点会插入到`referenceElement`之前\n\n\n\n#### setAttribute\n\n在指定元素中添加一个属性节点，如果元素中已有该属性改变属性值\n\n```js\nconst div = document.getElementById('id')\ndiv.setAttribute('class', 'white');//第一个参数属性名，第二个参数属性值。\n```\n\n\n\n### 删除节点\n\n删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的`removeChild`把自己删掉\n\n```js\n// 拿到待删除节点:\nconst self = document.getElementById('to-be-removed');\n// 拿到父节点:\nconst parent = self.parentElement;\n// 删除:\nconst removed = parent.removeChild(self);\nremoved === self; // true\n```\n\n删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置\n",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:57:17.000Z",
    "updateAt": "2024-01-24T17:38:16.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 155,
    "prev": "483e37bb-b761-4231-82e8-4f6345a6df78",
    "next": "b1b488cb-0f79-4d12-bdab-4c070e0da072"
  },
  "post": {
    "exerciseKey": "138cc142-490a-4ca9-8221-5f13429c807f",
    "category": "QA",
    "title": "谈谈你知道的DOM常见的操作",
    "level": 1.5,
    "updateAt": "2024-01-24T17:38:16+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}