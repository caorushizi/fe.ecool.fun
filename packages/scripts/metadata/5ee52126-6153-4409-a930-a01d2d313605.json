{
  "data": {
    "id": 2867,
    "exerciseKey": "5ee52126-6153-4409-a930-a01d2d313605",
    "category": "QA",
    "renderType": "md",
    "title": "如何检测对象是否循环引用？",
    "desc": "例如下面的场景， 已经出现循环引用了， 如何检测？\n \n```js\nconst foo = {\n  foo: \"Foo\",\n  bar: {\n    bar: \"Bar\",\n  },\n};\n\nfoo.bar.baz = foo; // 循环引用！\n```",
    "options": "",
    "explanation": "检测对象是否循环引用通常是为了防止无限递归，特别是在处理 JSON 序列化、深拷贝或图遍历时。以下是几种常见的检测对象是否循环引用的方法：\n\n### **1. 使用 `Set` 进行检测**\n\n一种常见的方法是使用 `Set` 数据结构来跟踪已经访问过的对象。如果在遍历对象时发现某个对象已经在 `Set` 中存在，就可以确定存在循环引用。\n\n**示例代码**：\n\n```javascript\nfunction hasCircularReference(obj) {\n  const seen = new Set();\n\n  function detect(obj) {\n    if (obj && typeof obj === 'object') {\n      if (seen.has(obj)) {\n        return true; // 循环引用\n      }\n      seen.add(obj);\n      for (const key of Object.keys(obj)) {\n        if (detect(obj[key])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  return detect(obj);\n}\n\n// 测试循环引用\nconst a = {};\nconst b = { a };\na.b = b;\n\nconsole.log(hasCircularReference(a)); // 输出：true\n```\n\n### **2. 使用 `WeakMap` 进行检测**\n\n`WeakMap` 也可以用来检测循环引用，它与 `Set` 类似，但使用 `WeakMap` 可以避免内存泄漏，因为 `WeakMap` 的键是弱引用的。\n\n**示例代码**：\n\n```javascript\nfunction hasCircularReference(obj) {\n  const seen = new WeakMap();\n\n  function detect(obj) {\n    if (obj && typeof obj === 'object') {\n      if (seen.has(obj)) {\n        return true; // 循环引用\n      }\n      seen.set(obj, true);\n      for (const key of Object.keys(obj)) {\n        if (detect(obj[key])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  return detect(obj);\n}\n\n// 测试循环引用\nconst a = {};\nconst b = { a };\na.b = b;\n\nconsole.log(hasCircularReference(a)); // 输出：true\n```\n\n### **3. 使用 JSON 序列化**\n\n一种简单的检测方法是尝试将对象序列化为 JSON 字符串，如果对象中存在循环引用，则会抛出错误。这种方法的缺点是会丢失对象中无法序列化的部分。\n\n**示例代码**：\n\n```javascript\nfunction isCircular(obj) {\n  try {\n    JSON.stringify(obj);\n    return false;\n  } catch (e) {\n    return true;\n  }\n}\n\n// 测试循环引用\nconst a = {};\nconst b = { a };\na.b = b;\n\nconsole.log(isCircular(a)); // 输出：true\n```\n\n### **4. 手动跟踪引用**\n\n你可以在遍历对象时手动维护一个引用列表，在遍历过程中检测到已经访问过的对象即可判定是否存在循环引用。这种方法通常较为复杂，但也可以实现。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:45.000Z",
    "updateAt": "2024-08-14T12:08:52.000Z",
    "isCollected": false,
    "currentIndex": 16,
    "filterTotalNum": 1487,
    "prev": "abdeb82d-40b0-495f-9e06-093d1b74ea65",
    "next": "3414a818-1951-4db1-9595-9b16bb06a005"
  },
  "post": {
    "exerciseKey": "5ee52126-6153-4409-a930-a01d2d313605",
    "category": "QA",
    "title": "如何检测对象是否循环引用？",
    "level": 3,
    "createAt": "2024-08-13T08:30:45+00:00",
    "updateAt": "2024-08-14T12:08:52+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}