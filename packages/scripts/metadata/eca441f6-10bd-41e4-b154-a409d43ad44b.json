{
  "data": {
    "id": 2852,
    "exerciseKey": "eca441f6-10bd-41e4-b154-a409d43ad44b",
    "category": "QA",
    "renderType": "md",
    "title": "如何使对象 iterable 化， 使其可以支持 for...of 迭代",
    "desc": "",
    "options": "",
    "explanation": "要使对象支持 `for...of` 迭代，你需要使该对象具有符合迭代协议的迭代器。实现这一点的方法是为对象定义一个名为 `Symbol.iterator` 的方法。这个方法应该返回一个迭代器对象，迭代器对象必须有一个 `next` 方法，该方法返回一个对象，其中包含 `value` 和 `done` 属性。\n\n以下是实现过程的步骤和示例代码：\n\n### **1. 实现 `Symbol.iterator` 方法**\n\n**1.1 定义迭代器对象**\n\n迭代器对象需要实现 `next` 方法，`next` 方法返回一个对象，包含两个属性：\n\n- `value`：当前的值。\n- `done`：一个布尔值，指示迭代是否完成。\n\n**1.2 在对象中实现 `Symbol.iterator`**\n\n将 `Symbol.iterator` 方法定义在对象上，这样对象就变成了可迭代的。\n\n### **示例代码**\n\n**示例 1: 基本对象**\n\n```javascript\nconst myObject = {\n  items: ['a', 'b', 'c'],\n  [Symbol.iterator]() {\n    let index = 0;\n    const items = this.items;\n    return {\n      next() {\n        if (index < items.length) {\n          return { value: items[index++], done: false };\n        } else {\n          return { done: true };\n        }\n      }\n    };\n  }\n};\n\n// 使用 for...of 进行迭代\nfor (const item of myObject) {\n  console.log(item); // 'a', 'b', 'c'\n}\n```\n\n**示例 2: 自定义对象**\n\n```javascript\nfunction createIterableObject() {\n  return {\n    start: 1,\n    end: 5,\n    [Symbol.iterator]() {\n      let current = this.start;\n      const end = this.end;\n      return {\n        next() {\n          if (current <= end) {\n            return { value: current++, done: false };\n          } else {\n            return { done: true };\n          }\n        }\n      };\n    }\n  };\n}\n\nconst iterableObject = createIterableObject();\n\n// 使用 for...of 进行迭代\nfor (const num of iterableObject) {\n  console.log(num); // 1, 2, 3, 4, 5\n}\n```\n\n### **3. 注意事项**\n\n- **生成器**：生成器函数（`function*`）可以更方便地创建可迭代对象，它自动实现了 `Symbol.iterator` 方法，并简化了迭代器的代码。\n\n**示例 3: 使用生成器**\n\n```javascript\nfunction* range(start, end) {\n  for (let i = start; i <= end; i++) {\n    yield i;\n  }\n}\n\nconst iterableObject = range(1, 5);\n\n// 使用 for...of 进行迭代\nfor (const num of iterableObject) {\n  console.log(num); // 1, 2, 3, 4, 5\n}\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 3.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:45.000Z",
    "updateAt": "2024-08-14T12:24:02.000Z",
    "isCollected": false,
    "currentIndex": 23,
    "filterTotalNum": 1487,
    "prev": "f433ce42-7095-4c20-8461-dc71f39bea39",
    "next": "ee207d9a-ac6d-44dd-a8fc-e180fd37be36"
  },
  "post": {
    "exerciseKey": "eca441f6-10bd-41e4-b154-a409d43ad44b",
    "category": "QA",
    "title": "如何使对象 iterable 化， 使其可以支持 for...of 迭代",
    "level": 3.5,
    "createAt": "2024-08-13T08:30:45+00:00",
    "updateAt": "2024-08-14T12:24:02+00:00"
  },
  "tag": {
    "id": 24,
    "tagName": "ES6",
    "type": "1",
    "exerciseCount": 40
  }
}