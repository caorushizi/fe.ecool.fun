{
  "data": {
    "id": 2361,
    "exerciseKey": "9dca4260-e672-471d-91b6-19a7cc16d876",
    "category": "QA",
    "renderType": "md",
    "title": "JS 中如何实现大对象深度对比",
    "desc": "",
    "options": "",
    "explanation": "**关键词**：JS对象对比\n\n在JavaScript中，可以使用递归的方式实现大对象的深度对比。以下是一个示例函数，用于比较两个大对象的每个属性是否相等：\n\n```javascript\nfunction deepEqual(obj1, obj2) {\n    // 检查是否为同一个引用\n    if (obj1 === obj2) return true;\n\n    // 检查类型\n    if (typeof obj1 !== 'object' || obj1 === null ||\n        typeof obj2 !== 'object' || obj2 === null) {\n        // 处理 NaN 这种特殊情况\n        return isNaN(obj1) && isNaN(obj2)  && obj1 !== obj1 ? true : obj1 === obj2;\n    }\n\n    // 检查对象的键数\n    let keys1 = Object.keys(obj1);\n    let keys2 = Object.keys(obj2);\n\n    if (keys1.length !== keys2.length) return false;\n\n    // 递归对比每个属性\n    for (let key of keys1) {\n        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n```\n\n下面是一些测试用例：\n\n```javascript\n// 测试用例\nfunction runTests() {\n    // 嵌套 JSON 对象\n    const obj1 = {\n        a: 1,\n        b: { \n            c: [1, 2, { d: 3 }],\n            e: 'test'\n        },\n        f: { g: null }\n    };\n\n    const obj2 = {\n        a: 1,\n        b: {\n            c: [1, 2, { d: 3 }],\n            e: 'test'\n        },\n        f: { g: null }\n    };\n\n    const obj3 = {\n        a: 1,\n        b: {\n            c: [1, 2, { d: 4 }],  // 这里的 d 值不同\n            e: 'test'\n        },\n        f: { g: null }\n    };\n\n    const obj4 = {\n        a: 1,\n        b: {\n            c: [1, 2, { d: 3 }],\n            e: 'different'\n        },\n        f: { g: null }\n    };\n\n    const obj5 = {\n        a: 1,\n        b: {\n            c: [1, 2, { d: 3 }],\n            e: 'test'\n        }\n    };\n\n    const obj6 = {\n        a: 1,\n        b: {\n            c: [1, 2, { d: 3 }],\n            e: 'test'\n        },\n        f: { g: null },\n        extra: 'value'  // 额外的属性\n    };\n\n    // 运行测试\n    console.assert(deepEqual(obj1, obj2) === true, 'Test Case 1 Failed');\n    console.assert(deepEqual(obj1, obj3) === false, 'Test Case 2 Failed');\n    console.assert(deepEqual(obj1, obj4) === false, 'Test Case 3 Failed');\n    console.assert(deepEqual(obj1, obj5) === false, 'Test Case 4 Failed');\n    console.assert(deepEqual(obj1, obj6) === false, 'Test Case 5 Failed');\n\n    console.log('All test cases passed');\n}\n\n// 运行测试\nrunTests();\n\n```\n\n在上述示例中，`deepEqual`函数会递归比较两个对象的每个属性的值，包括嵌套的对象或数组。如果两个对象是相等的，则返回`true`，否则返回`false`。\n\n注意，该函数不会检查函数、正则表达式、日期等复杂类型的值。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 2.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:22.000Z",
    "updateAt": "2024-09-09T13:47:51.000Z",
    "isCollected": false,
    "currentIndex": 252,
    "filterTotalNum": 1487,
    "prev": "5a7dd073-22ba-4081-94a2-51635c94f3c6",
    "next": "62546213-8ab6-473e-8b24-1e53e17ab9fb"
  },
  "post": {
    "exerciseKey": "9dca4260-e672-471d-91b6-19a7cc16d876",
    "category": "QA",
    "title": "JS 中如何实现大对象深度对比",
    "level": 2.5,
    "createAt": "2024-08-13T08:30:22+00:00",
    "updateAt": "2024-09-09T13:47:51+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}