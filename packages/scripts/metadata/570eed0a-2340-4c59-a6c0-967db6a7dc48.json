{
  "data": {
    "id": 1630,
    "exerciseKey": "570eed0a-2340-4c59-a6c0-967db6a7dc48",
    "category": "QA",
    "renderType": "md",
    "title": "【Promise第38题】下面代码的输出是什么？",
    "desc": "```js\nconst first = () => (new Promise((resolve, reject) => {\n    console.log(3);\n    let p = new Promise((resolve, reject) => {\n        console.log(7);\n        setTimeout(() => {\n            console.log(5);\n            resolve(6);\n            console.log(p)\n        }, 0)\n        resolve(1);\n    });\n    resolve(2);\n    p.then((arg) => {\n        console.log(arg);\n    });\n}));\nfirst().then((arg) => {\n    console.log(arg);\n});\nconsole.log(4);\n\n```",
    "options": null,
    "explanation": "## 解析\n\n* 第一段代码定义的是一个函数，所以我们得看看它是在哪执行的，发现它在4之前，所以可以来看看first函数里面的内容了。\n* 函数first返回的是一个`new Promise()`，因此先执行里面的同步代码3\n* 接着又遇到了一个`new Promise()`，直接执行里面的同步代码7\n* 执行完7之后，在p中，遇到了一个定时器，先将它放到下一个宏任务队列里不管它，接着向下走\n* 碰到了`resolve(1)`，这里就把p的状态改为了resolved，且返回值为1，不过这里也先不执行\n* 跳出p，碰到了`resolve(2)`，这里的`resolve(2)`，表示的是把first函数返回的那个Promise的状态改了，也先不管它。\n* 然后碰到了`p.then`，将它加入本次循环的微任务列表，等待执行\n* 跳出first函数，遇到了`first().then()`，将它加入本次循环的微任务列表(p.then的后面执行)\n* 然后执行同步代码4\n* 本轮的同步代码全部执行完毕，查找微任务列表，发现`p.then`和`first().then()`，依次执行，打印出1和2\n* 本轮任务执行完毕了，发现还有一个定时器没有跑完，接着执行这个定时器里的内容，执行同步代码5\n* 然后又遇到了一个resolve(6)，它是放在p里的，但是p的状态在之前已经发生过改变了，因此这里就不会再改变，也就是说resolve(6)相当于没任何用处，因此打印出来的p为`Promise{<resolved>: 1}`。\n\n## 结果\n\n```\n3\n7\n4\n1\n2\n5\nPromise{<resolved>: 1}\n```",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2022-01-09T15:20:04.000Z",
    "updateAt": "2022-01-09T23:24:06.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 644,
    "prev": "41c2b7e0-3ab2-4a94-8017-1804b0ddf868",
    "next": "59b71384-0a0a-4d2e-a63a-f4fb75650b60"
  },
  "post": {
    "exerciseKey": "570eed0a-2340-4c59-a6c0-967db6a7dc48",
    "category": "QA",
    "title": "【Promise第38题】下面代码的输出是什么？",
    "level": 4,
    "updateAt": "2022-01-09T23:24:06+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}