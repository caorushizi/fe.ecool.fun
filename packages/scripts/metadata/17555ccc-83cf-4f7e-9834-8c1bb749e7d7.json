{
  "data": {
    "id": 1880,
    "exerciseKey": "17555ccc-83cf-4f7e-9834-8c1bb749e7d7",
    "category": "QA",
    "renderType": "md",
    "title": "请对以下数组，根据 `born` 的值降序排列",
    "desc": "```js\nconst singers = [\n  { name: 'Steven Tyler', band: 'Aerosmith', born: 1948 },\n  { name: 'Karen Carpenter', band: 'The Carpenters', born: 1950 },\n  { name: 'Kurt Cobain', band: 'Nirvana', born: 1967 },\n  { name: 'Stevie Nicks', band: 'Fleetwood Mac', born: 1948 },\n];\n```",
    "options": null,
    "explanation": "`Array.prototype.sort()` 方法用原地算法对数组的元素进行排序，并返回数组。在很多排序场景下推荐使用。\n\n语法： \n\n> arr.sort([compareFunction])\n\n这道题在实现上也比较简单，我们直接看实现方法：\n\n```js\nfunction compare(a, b) {\n  return a.born < b.born ? 1: -1 \n}\n\nsingers.sort(compare);\n\n// 也可以进行简写\nsingers.sort((a,b) => b.born - a.born)\n\n```\n\n",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2022-08-07T14:47:19.000Z",
    "updateAt": "2023-03-03T20:25:56.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 444,
    "prev": "da532e2b-898c-4a7d-b179-fbe8052c8c60",
    "next": "8313f0e7-db8e-4ecd-bf57-099dca7656fb"
  },
  "post": {
    "exerciseKey": "17555ccc-83cf-4f7e-9834-8c1bb749e7d7",
    "category": "QA",
    "title": "请对以下数组，根据 `born` 的值降序排列",
    "level": 1,
    "updateAt": "2023-03-03T20:25:56+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
