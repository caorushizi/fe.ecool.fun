{
  "data": {
    "id": 1817,
    "exerciseKey": "1b4bdc45-8a73-42b2-a304-872ddee851ab",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对 useContext 的理解",
    "desc": null,
    "options": null,
    "explanation": "# 什么是Context\n`context`（上下文）可以看成是扩大版的`props`，它可以将全局的数据通过`provider`接口传递value给局部的组件，让包围在`provider`中的局部组件可以获取到全局数据的读写接口\n\n全局变量可以看成是全局的上下文\n\n而上下文则是局部的全局变量，因为只有包围在`provider`中的局部组件才可以获取到这些全局变量的读写接口\n# 用法\n* 创建context\n* 设置`provider`并通过value接口传递state\n* 局部组件获取读写接口\n\n# 案例理解\n\n案例理解是最快的方式，我在下面的代码中，将设置一个父组件，一个子组件，通过useContext来传递state，并在子组件上设置一个按钮来改变全局state\n\n```js\nimport React, { createContext, useContext, useState } from \\\"react\\\";\nconst initialState = { m: 100, n: 50 }; // 定义初始state\nconst X = createContext(); // 创建Context\nlet a = 0;\nexport default function App() {\n  console.log(`render了${a}次`);//用来检查执行App函数多少次\n  const [state, setState] = useState(initialState); // 创建state读写接口\n  a += 1;\n  return (\n    <X.Provider value={{ state, setState }}> // 通过provider提供value给包围里内部组件，只有包围里的组件才有效\n      <Father></Father>\n    </X.Provider>\n  );\n}\n\nconst Father = (props) => {\n  const { state, setState } = useContext(X);//拿到 名字为X的上下文的value，用两个变量来接收读写接口\n  const addN = () => {\n    setState((state) => {\n      return { ...state, n: state.n + 1 };\n    });\n  };\n  const addM = () => {\n    setState((state) => {\n      return { ...state, m: state.m + 1 };\n    });\n  };\n  return (\n    <div>\n      爸爸组件\n      <div>n:{state.n}</div>\n      <Child />\n      <button onClick={addN}>设置n</button>\n      <button onClick={addM}>设置m</button>\n    </div>\n  );\n};\nconst Child = (props) => {\n  const { state } = useContext(X); // 读取state\n  return (\n    <div>\n      儿子组件\n      <div>m:{state.m}</div>\n    </div>\n  );\n};\n```\n拿到读写接口的组件就可以控制state数据\n\n![](https://static.ecool.fun//article/1d403884-7b95-4c31-a72e-6a864b9769bb.jpeg)\n\n>tips：注意到最上层的变量a没？这是我用来测试的，我发现点击按钮后会触发App函数并更新页面，说明react下使用`context`来修改数据的时候，都会重新进行全局执行，而不是数据响应式的。\n\n# 总结\n\n我们学习到`Context`上下文的基本概念和作用，并且通过小案例总结得出`context`的使用方法：\n* 使用`creacteContext`创建一个上下文\n* 设置`provider`并通过`value`接口传递`state`数据\n* 局部组件从`value`接口中传递的数据对象中获取读写接口",
    "pivot": "",
    "vipLimit": 0,
    "level": 1,
    "appId": 7,
    "createAt": "2022-05-29T13:03:03.000Z",
    "updateAt": "2024-08-10T17:06:41.000Z",
    "isCollected": false,
    "currentIndex": 571,
    "filterTotalNum": 1487,
    "prev": "33a7cf04-f6d0-4b57-9a9b-60983f09b553",
    "next": "672716f5-203b-4928-afdc-44d6e8793663"
  },
  "post": {
    "exerciseKey": "1b4bdc45-8a73-42b2-a304-872ddee851ab",
    "category": "QA",
    "title": "说说你对 useContext 的理解",
    "level": 1,
    "createAt": "2022-05-29T13:03:03+00:00",
    "updateAt": "2024-08-10T17:06:41+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}