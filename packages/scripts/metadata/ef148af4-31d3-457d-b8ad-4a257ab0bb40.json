{
  "data": {
    "id": 241,
    "exerciseKey": "ef148af4-31d3-457d-b8ad-4a257ab0bb40",
    "category": "QA",
    "renderType": "md",
    "title": "Vue常用的修饰符有哪些？分别有什么应用场景？",
    "desc": null,
    "options": null,
    "explanation": "## 一、修饰符是什么\n\n在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号\n\n在`Vue`中，修饰符处理了许多`DOM`事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理\n\n`vue`中修饰符分为以下五种：\n\n- 表单修饰符\n- 事件修饰符\n- 鼠标按键修饰符\n- 键值修饰符\n- v-bind修饰符\n\n## 二、修饰符的作用\n\n### 表单修饰符\n\n在我们填写表单的时候用得最多的是`input`标签，指令用得最多的是`v-model`\n\n关于表单的修饰符有如下：\n\n- lazy\n- trim\n- number\n\n#### lazy\n\n在我们填完信息，光标离开标签的时候，才会将值赋予给`value`，也就是在`change`事件之后再进行信息同步\n\n```js\n<input type=\"text\" v-model.lazy=\"value\">\n<p>{{value}}</p>\n```\n\n#### trim\n\n自动过滤用户输入的首空格字符，而中间的空格不会过滤\n\n```js\n<input type=\"text\" v-model.trim=\"value\">\n```\n\n#### number\n\n自动将用户的输入值转为数值类型，但如果这个值无法被`parseFloat`解析，则会返回原来的值\n\n```js\n<input v-model.number=\"age\" type=\"number\">\n```\n\n### 事件修饰符\n\n事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符：\n\n- stop\n- prevent\n- self\n- once\n- capture\n- passive\n- native\n\n#### stop\n\n阻止了事件冒泡，相当于调用了`event.stopPropagation`方法\n\n```js\n<div @click=\"shout(2)\">\n  <button @click.stop=\"shout(1)\">ok</button>\n</div>\n//只输出1\n```\n\n#### prevent\n\n阻止了事件的默认行为，相当于调用了`event.preventDefault`方法\n\n```js\n<form v-on:submit.prevent=\"onSubmit\"></form>\n```\n\n#### self\n\n只当在 `event.target` 是当前元素自身时触发处理函数\n\n```js\n<div v-on:click.self=\"doThat\">...</div>\n```\n\n> 使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 `v-on:click.prevent.self` 会阻止**所有的点击**，而 `v-on:click.self.prevent` 只会阻止对元素自身的点击\n\n#### once\n\n绑定了事件以后只能触发一次，第二次就不会触发\n\n```js\n<button @click.once=\"shout(1)\">ok</button>\n```\n\n#### capture\n\n使事件触发从包含这个元素的顶层开始往下触发\n\n```js\n<div @click.capture=\"shout(1)\">\n    obj1\n<div @click.capture=\"shout(2)\">\n    obj2\n<div @click=\"shout(3)\">\n    obj3\n<div @click=\"shout(4)\">\n    obj4\n</div>\n</div>\n</div>\n</div>\n// 输出结构: 1 2 4 3 \n```\n\n#### passive\n\n在移动端，当我们在监听元素滚动事件的时候，会一直触发`onscroll`事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给`onscroll`事件整了一个`.lazy`修饰符\n\n```js\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->\n<!-- 而不会等待 `onScroll` 完成  -->\n<!-- 这其中包含 `event.preventDefault()` 的情况 -->\n<div v-on:scroll.passive=\"onScroll\">...</div>\n```\n\n> 不要把 `.passive` 和 `.prevent` 一起使用,因为 `.prevent` 将会被忽略，同时浏览器可能会向你展示一个警告。\n>\n> `passive` 会告诉浏览器你不想阻止事件的默认行为\n\n#### native\n\n让组件变成像`html`内置标签那样监听根元素的原生事件，否则组件上使用 `v-on` 只会监听自定义事件\n\n```js\n<my-component v-on:click.native=\"doSomething\"></my-component>\n```\n\n> 使用.native修饰符来操作普通HTML标签是会令事件失效的\n\n### 鼠标按钮修饰符\n\n鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：\n\n- left 左键点击\n- right 右键点击\n- middle 中键点击\n\n```js\n<button @click.left=\"shout(1)\">ok</button>\n<button @click.right=\"shout(1)\">ok</button>\n<button @click.middle=\"shout(1)\">ok</button>\n```\n\n### 键盘修饰符\n\n键盘修饰符是用来修饰键盘事件（`onkeyup`，`onkeydown`）的，有如下：\n\n`keyCode`存在很多，但`vue`为我们提供了别名，分为以下两种：\n\n- 普通键（enter、tab、delete、space、esc、up...）\n- 系统修饰键（ctrl、alt、meta、shift...）\n\n```js\n// 只有按键为keyCode的时候才触发\n<input type=\"text\" @keyup.keyCode=\"shout()\">\n```\n\n还可以通过以下方式自定义一些全局的键盘码别名\n\n```js\nVue.config.keyCodes.f2 = 113\n```\n\n### v-bind修饰符\n\n\n\nv-bind修饰符主要是为属性进行操作，用来分别有如下：\n\n- sync\n- prop\n- camel\n\n#### sync\n\n能对`props`进行一个双向绑定\n\n```js\n//父组件\n<comp :myMessage.sync=\"bar\"></comp> \n//子组件\nthis.$emit('update:myMessage',params);\n```\n\n以上这种方法相当于以下的简写\n\n```js\n//父亲组件\n<comp :myMessage=\"bar\" @update:myMessage=\"func\"></comp>\nfunc(e){\n this.bar = e;\n}\n//子组件js\nfunc2(){\n  this.$emit('update:myMessage',params);\n}\n```\n\n使用`sync`需要注意以下两点：\n\n- 使用`sync`的时候，子组件传递的事件名格式必须为`update:value`，其中`value`必须与子组件中`props`中声明的名称完全一致\n\n- 注意带有 `.sync` 修饰符的 `v-bind` 不能和表达式一起使用\n\n- 将 `v-bind.sync` 用在一个字面量的对象上，例如 `v-bind.sync=”{ title: doc.title }”`，是无法正常工作的\n\n#### props\n\n设置自定义标签属性，避免暴露数据，防止污染HTML结构\n\n```js\n<input id=\"uid\" title=\"title1\" value=\"1\" :index.prop=\"index\">\n```\n\n#### camel\n\n将命名变为驼峰命名法，如将` view-Box`属性名转换为 `viewBox`\n\n```js\n<svg :viewBox=\"viewBox\"></svg>\n```\n\n## 三、应用场景\n\n根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景：\n\n- .stop：阻止事件冒泡\n- .native：绑定原生事件\n- .once：事件只执行一次\n- .self ：将事件绑定在自身身上，相当于阻止事件冒泡\n- .prevent：阻止默认事件\n- .capture：用于事件捕获\n- .once：只触发一次\n- .keyCode：监听特定键盘按下\n- .right：右键\n\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:42:08.000Z",
    "updateAt": "2023-06-02T16:11:57.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 331,
    "prev": "ac91c80a-17f4-4ede-931e-2f458660e3e0",
    "next": "00499f71-c1c2-46aa-9e87-d3ae7b79f268"
  },
  "post": {
    "exerciseKey": "ef148af4-31d3-457d-b8ad-4a257ab0bb40",
    "category": "QA",
    "title": "Vue常用的修饰符有哪些？分别有什么应用场景？",
    "level": 2,
    "updateAt": "2023-06-02T16:11:57+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
