{
  "data": {
    "id": 388,
    "exerciseKey": "b8ef6782-9f7e-4bb2-824f-3e0259322dae",
    "category": "QA",
    "renderType": "md",
    "title": "说说webpack中常见的Plugin？解决了什么问题？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n`Plugin`（Plug-in）是一种计算机应用程序，它和主应用程序互相交互，以提供特定的功能\n\n是一种遵循一定规范的应用程序接口编写出来的程序，只能运行在程序规定的系统下，因为其需要调用原纯净系统提供的函数库或者数据\n\n`webpack`中的`plugin`也是如此，`plugin`赋予其各种灵活的功能，例如打包优化、资源管理、环境变量注入等，它们会运行在 `webpack` 的不同阶段（钩子 / 生命周期），贯穿了`webpack`整个编译周期\n\n![](https://static.ecool.fun//article/5a030d77-c60e-4318-b6f4-d5402e37de3b.png)\n\n目的在于解决`loader` 无法实现的其他事\n\n### 配置方式\n\n这里讲述文件的配置方式，一般情况，通过配置文件导出对象中`plugins`属性传入`new`实例对象。如下所示：\n\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack'); // 访问内置的插件\nmodule.exports = {\n  ...\n  plugins: [\n    new webpack.ProgressPlugin(),\n    new HtmlWebpackPlugin({ template: './src/index.html' }),\n  ],\n};\n```\n\n\n\n## 二、特性\n\n其本质是一个具有`apply`方法`javascript`对象\n\n`apply` 方法会被 `webpack compiler `调用，并且在整个编译生命周期都可以访问 `compiler `对象\n\n```javascript\nconst pluginName = 'ConsoleLogOnBuildWebpackPlugin';\n\nclass ConsoleLogOnBuildWebpackPlugin {\n  apply(compiler) {\n    compiler.hooks.run.tap(pluginName, (compilation) => {\n      console.log('webpack 构建过程开始！');\n    });\n  }\n}\n\nmodule.exports = ConsoleLogOnBuildWebpackPlugin;\n```\n\n`compiler hook` 的 `tap `方法的第一个参数，应是驼峰式命名的插件名称\n\n关于整个编译生命周期钩子，有如下：\n\n- entry-option ：初始化 option\n- run\n- compile： 真正开始的编译，在创建 compilation 对象之前\n- compilation ：生成好了 compilation 对象\n- make 从 entry 开始递归分析依赖，准备对每个模块进行 build\n- after-compile： 编译 build 过程结束\n- emit ：在将内存中 assets 内容写到磁盘文件夹之前\n- after-emit ：在将内存中 assets 内容写到磁盘文件夹之后\n- done： 完成所有的编译过程\n- failed： 编译失败的时候\n\n\n\n## 三、常见的Plugin\n\n常见的`plugin`有如图所示：\n\n![](https://static.ecool.fun//article/eb9e149a-fda3-4b36-adf3-d938547221ee.png)\n\n\n\n下面介绍几个常用的插件用法：\n\n### HtmlWebpackPlugin\n\n在打包结束后，⾃动生成⼀个 `html` ⽂文件，并把打包生成的` js` 模块引⼊到该 `html` 中\n\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n\n```js\n// webpack.config.js\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n ...\n  plugins: [\n     new HtmlWebpackPlugin({\n       title: \"My App\",\n       filename: \"app.html\",\n       template: \"./src/html/index.html\"\n     }) \n  ]\n};\n```\n\n```html\n<!--./src/html/index.html-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title><%=htmlWebpackPlugin.options.title%></title>\n</head>\n<body>\n    <h1>html-webpack-plugin</h1>\n</body>\n</html>\n```\n\n在 `html` 模板中，可以通过 `<%=htmlWebpackPlugin.options.XXX%>` 的方式获取配置的值\n\n更多的配置可以自寻查找\n\n\n\n### clean-webpack-plugin\n\n删除（清理）构建目录\n\n```bash\nnpm install --save-dev clean-webpack-plugin\n```\n\n```js\nconst {CleanWebpackPlugin} = require('clean-webpack-plugin');\nmodule.exports = {\n ...\n  plugins: [\n    ...,\n    new CleanWebpackPlugin(),\n    ...\n  ]\n}\n```\n\n\n\n### mini-css-extract-plugin\n\n提取 `CSS` 到一个单独的文件中\n\n```bash\nnpm install --save-dev mini-css-extract-plugin\n```\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = { ...,  module: {   rules: [    {     test: /\\.s[ac]ss$/,     use: [      {       loader: MiniCssExtractPlugin.loader     },          'css-loader',          'sass-loader'        ]   }   ] },  plugins: [    ...,    new MiniCssExtractPlugin({     filename: '[name].css'    }),    ...  ]}\n```\n\n\n\n### DefinePlugin\n\n允许在编译时创建配置的全局对象，是一个`webpack`内置的插件，不需要安装\n\n```js\nconst { DefinePlugun } = require('webpack')module.exports = { ...    plugins:[        new DefinePlugin({            BASE_URL:'\"./\"'        })    ]}\n```\n\n这时候编译`template`模块的时候，就能通过下述形式获取全局对象\n\n```html\n<link rel=\"icon\" href=\"<%= BASE_URL%>favicon.ico>\"\n```\n\n\n\n\n\n### copy-webpack-plugin\n\n复制文件或目录到执行区域，如`vue`的打包过程中，如果我们将一些文件放到`public`的目录下，那么这个目录会被复制到`dist`文件夹中\n\n```cmd\nnpm install copy-webpack-plugin -D\n```\n\n```js\nnew CopyWebpackPlugin({    parrerns:[        {            from:\"public\",            globOptions:{                ignore:[                    '**/index.html'                ]            }        }    ]})\n```\n\n复制的规则在`patterns`属性中设置：\n\n- from：设置从哪一个源中开始复制\n- to：复制到的位置，可以省略，会默认复制到打包的目录下\n\n- globOptions：设置一些额外的选项，其中可以编写需要忽略的文件\n\n",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-05T15:32:00.000Z",
    "updateAt": "2024-01-25T19:06:44.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 106,
    "prev": "89eda79c-6cfb-4593-86d3-69d9ce9eb43d",
    "next": "3c6c5215-5db9-45ea-b2c1-6cc1c6aa6acd"
  },
  "post": {
    "exerciseKey": "b8ef6782-9f7e-4bb2-824f-3e0259322dae",
    "category": "QA",
    "title": "说说webpack中常见的Plugin？解决了什么问题？",
    "level": 1.5,
    "updateAt": "2024-01-25T19:06:44+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 33
  }
}
