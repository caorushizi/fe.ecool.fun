{
  "data": {
    "id": 2459,
    "exerciseKey": "b3c9e524-a1b4-4348-9ce5-f2beb80caf32",
    "category": "QA",
    "renderType": "md",
    "title": "普通函数动态参数 和 箭头函数的动态参数有什么区别？",
    "desc": "",
    "options": "",
    "explanation": "普通函数和箭头函数在处理动态参数（即不确定数量的参数）时，有一些重要的区别，主要体现在参数处理和 `this` 上下文的处理方式。以下是这两种函数在处理动态参数时的主要区别：\n\n### 1. **普通函数的动态参数**\n\n普通函数可以使用 `arguments` 对象来处理不确定数量的参数。`arguments` 是一个类数组对象，包含了传递给函数的所有参数。\n\n- **示例**：\n\n  ```javascript\n  function normalFunction() {\n      console.log(arguments); // 输出: 类数组对象\n      for (let i = 0; i < arguments.length; i++) {\n          console.log(arguments[i]);\n      }\n  }\n\n  normalFunction(1, 2, 3); // 输出: 1 2 3\n  ```\n\n- **特点**：\n  - `arguments` 对象在普通函数中自动可用，可以用来访问所有传入的参数。\n  - `arguments` 是一个类数组对象，但不具备数组的方法（如 `push`, `pop`）。\n  - `arguments` 在箭头函数中不可用。\n\n### 2. **箭头函数的动态参数**\n\n箭头函数不支持 `arguments` 对象。箭头函数的参数必须使用 ES6 的剩余参数语法（rest parameters）来处理不确定数量的参数。\n\n- **示例**：\n\n  ```javascript\n  const arrowFunction = (...args) => {\n      console.log(args); // 输出: 数组\n      args.forEach(arg => console.log(arg));\n  };\n\n  arrowFunction(1, 2, 3); // 输出: 1 2 3\n  ```\n\n- **特点**：\n  - 箭头函数使用剩余参数语法（`...args`）将所有传入的参数收集到一个数组中。\n  - `args` 是一个真正的数组，可以使用数组的方法（如 `forEach`, `map`, `filter`）。\n  - 没有 `arguments` 对象，如果需要访问所有参数，必须使用剩余参数语法。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-22T11:09:10.000Z",
    "isCollected": false,
    "currentIndex": 203,
    "filterTotalNum": 1487,
    "prev": "112b5d92-47d7-40eb-9d8a-4321af6247bd",
    "next": "c830ad90-3291-4123-81db-223c81244f41"
  },
  "post": {
    "exerciseKey": "b3c9e524-a1b4-4348-9ce5-f2beb80caf32",
    "category": "QA",
    "title": "普通函数动态参数 和 箭头函数的动态参数有什么区别？",
    "level": 2,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-22T11:09:10+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}