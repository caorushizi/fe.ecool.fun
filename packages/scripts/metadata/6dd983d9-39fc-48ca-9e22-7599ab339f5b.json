{
  "data": {
    "id": 627,
    "exerciseKey": "6dd983d9-39fc-48ca-9e22-7599ab339f5b",
    "category": "QA",
    "renderType": "md",
    "title": "如何检查Javascript中的内存泄漏？",
    "desc": null,
    "options": null,
    "explanation": "## 浏览器\n\nChrome 浏览器查看内存占用，按照以下步骤操作。\n\n![image.png](https://static.ecool.fun//article/b822300b-cf04-4c9f-9d88-06bd331726c0.png)\n\n```\n1、打开开发者工具，选择 Timeline 面板\n2、在顶部的Capture字段里面勾选 Memory\n3、点击左上角的录制按钮。\n4、在页面上进行各种操作，模拟用户的使用情况。\n5、一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。\n```\n\n如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。\n\n![image.png](https://static.ecool.fun//article/5b616638-2dbc-49a7-9bde-97271ec206b1.png)\n\n反之，就是内存泄漏了。\n\n![image.png](https://static.ecool.fun//article/a05a6942-5cbe-42c8-a213-9122a9a851db.png)\n\n## 命令行\n\n命令行可以使用 Node 提供的process.memoryUsage方法。\n\n```js\nconsole.log(process.memoryUsage());\n// { rss: 27709440,\n//  heapTotal: 5685248,\n//  heapUsed: 3449392,\n//  external: 8772 }\n```\n\nprocess.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，含义如下。\n\n![image.png](https://static.ecool.fun//article/518da811-c80c-4bc2-a4d6-ba02bf8c508b.png)\n\n```\nrss（resident set size）：所有内存占用，包括指令区和堆栈。\nheapTotal：\"堆\"占用的内存，包括用到的和没用到的。\nheapUsed：用到的堆的部分。\nexternal： V8 引擎内部的 C++ 对象占用的内存。\n```\n\n判断内存泄漏，以 `heapUsed` 字段为准。\n\n\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-09-25T02:46:37.000Z",
    "updateAt": "2024-01-25T19:19:51.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 77,
    "prev": "791b77aa-0432-440b-bedb-506a4f8eac36",
    "next": "319f4c73-a33b-42bb-842c-a5a5e31c101e"
  },
  "post": {
    "exerciseKey": "6dd983d9-39fc-48ca-9e22-7599ab339f5b",
    "category": "QA",
    "title": "如何检查Javascript中的内存泄漏？",
    "level": 2,
    "updateAt": "2024-01-25T19:19:51+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 30
  }
}