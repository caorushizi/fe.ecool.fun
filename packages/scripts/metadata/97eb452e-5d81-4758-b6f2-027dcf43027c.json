{
  "data": {
    "id": 1860,
    "exerciseKey": "97eb452e-5d81-4758-b6f2-027dcf43027c",
    "category": "QA",
    "renderType": "md",
    "title": "JavaScript 中如何取消请求",
    "desc": null,
    "options": null,
    "explanation": "JavaScript 实现异步请求就靠浏览器提供的两个 API —— **XMLHttpRequest 和 Fetch**。我们平常用的较多的是 Promise 请求库 axios，它基于 XMLHttpRequest。\n\n本篇带来 XMLHttpRequest、Fetch 和 axios 分别是怎样“取消请求”的。\n\n### 取消 XMLHttpRequest 请求\n\n当请求已经发送了，可以使用 **XMLHttpRequest.abort()** 方法取消发送，代码示例如下：\n\n```js\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', '<http://127.0.0.1:3000/api/get>', true);\nxhr.send();\nsetTimeout(() => {\n\t xhr.abort();\n}, 1000);\n```\n\n取消请求，[readyState](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState) 会变成 `XMLHttpRequest.UNSENT`(0)；请求的 xhr.[status](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status) 会被设为 0 ；\n\n不如在 Chrome DevTools Network 中，看看正常请求和取消请求的对比图：\n\n![image.png](https://static.ecool.fun//article/86b6d8c6-1afb-465f-b084-bf4716fab7b2.png)\n\n### 取消 Fetch 请求\n\n取消 Fetch 请求，需要用到 [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) API。我们可以构造一个 controller 实例：**`const controller = new AbortController()` ,** controller 它有一个只读属性 [AbortController.signal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal)，可以作为参数传入到 fetch 中，用于将控制器与获取请求相关联；\n\n代码示例如下：\n\n```js\nconst controller = new AbortController();\nvoid (async function () {\n    const response = await fetch('<http://127.0.0.1:3000/api/get>', {\n        signal: controller.signal,\n    });\n    const data = await response.json();\n})();\n\nsetTimeout(() => {\n    controller.abort();\n}, 1000);\n```\n\n浏览器控制台对比图：\n\n![image.png](https://static.ecool.fun//article/3d2f4cfa-dd06-4e83-973a-a2c5c6fbfc7f.png)\n\n我们其实可以在 controller.abort() 传入“取消请求的原因”参数，然后进行 try...catch 捕获\n\n![image.png](https://static.ecool.fun//article/db951d09-396d-44e9-bd3c-5c1857dd0b28.png)\n\n### 取消 axios 请求\n\naxios 同样支持 [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n\n```js\nconst controller = new AbortController();\nconst API_URL = '<http://127.0.0.1:3000/api/get>';\nvoid (async function () {\n    const response = await axios.get(API_URL, {\n        signal: controller.signal,\n    });\n    const { data } = response;\n})();\nsetTimeout(() => {\n    controller.abort();\n}, 1000);\n```\n\n控制台截图：\n\n![image.png](https://static.ecool.fun//article/fd990541-a05b-4d70-b802-130a83e47617.png)\n\n错误捕获：\n\n![image.png](https://static.ecool.fun//article/a917101b-364e-43a9-a80f-fe0030ebec20.png)\n\n注意：axios 之前用于取消请求的 CancelToken 方法已经被弃用，更多请见文档 [axios-http.com/docs/cancel…](https://axios-http.com/docs/cancellation)；\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2.5,
    "appId": 7,
    "createAt": "2022-07-24T03:14:22.000Z",
    "updateAt": "2024-08-10T17:06:50.000Z",
    "isCollected": false,
    "currentIndex": 529,
    "filterTotalNum": 1487,
    "prev": "77336d84-243e-49a0-b4b2-47bad83292e9",
    "next": "ac0148e2-09c1-4634-acf6-a027eeee37bb"
  },
  "post": {
    "exerciseKey": "97eb452e-5d81-4758-b6f2-027dcf43027c",
    "category": "QA",
    "title": "JavaScript 中如何取消请求",
    "level": 2.5,
    "createAt": "2022-07-24T03:14:22+00:00",
    "updateAt": "2024-08-10T17:06:50+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}