{
  "data": {
    "id": 521,
    "exerciseKey": "e221664e-c3b1-4c18-827e-7a6bd2a2593e",
    "category": "QA",
    "renderType": "md",
    "title": "请手写“堆排序”",
    "desc": null,
    "options": null,
    "explanation": "## 算法简介\n\n堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\n\n## 算法描述\n\n具体算法描述如下：\n\n* 将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；\n* 将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]；\n* 由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。\n\n## 代码实现\n\n```javascript\n/*方法说明：堆排序\n@param  array 待排序数组*/\nfunction heapSort(array) {\n    console.time('堆排序耗时');\n    if (Object.prototype.toString.call(array).slice(8, -1) === 'Array') {\n        //建堆\n        var heapSize = array.length, temp;\n        for (var i = Math.floor(heapSize / 2) - 1; i >= 0; i--) {\n            heapify(array, i, heapSize);\n        }\n\n        //堆排序\n        for (var j = heapSize - 1; j >= 1; j--) {\n            temp = array[0];\n            array[0] = array[j];\n            array[j] = temp;\n            heapify(array, 0, --heapSize);\n        }\n        console.timeEnd('堆排序耗时');\n        return array;\n    } else {\n        return 'array is not an Array!';\n    }\n}\n/*方法说明：维护堆的性质\n@param  arr 数组\n@param  x   数组下标\n@param  len 堆大小*/\nfunction heapify(arr, x, len) {\n    if (Object.prototype.toString.call(arr).slice(8, -1) === 'Array' && typeof x === 'number') {\n        var l = 2 * x + 1, r = 2 * x + 2, largest = x, temp;\n        if (l < len && arr[l] > arr[largest]) {\n            largest = l;\n        }\n        if (r < len && arr[r] > arr[largest]) {\n            largest = r;\n        }\n        if (largest != x) {\n            temp = arr[x];\n            arr[x] = arr[largest];\n            arr[largest] = temp;\n            heapify(arr, largest, len);\n        }\n    } else {\n        return 'arr is not an Array or x is not a number!';\n    }\n}\nvar arr=[91,60,96,13,35,65,46,65,10,30,20,31,77,81,22];\nconsole.log(heapSort(arr));//[10, 13, 20, 22, 30, 31, 35, 46, 60, 65, 65, 77, 81, 91, 96]\n\n```\n\n## 算法分析\n\n* 最佳情况：T(n) = O(nlogn)\n* 最差情况：T(n) = O(nlogn)\n* 平均情况：T(n) = O(nlogn)",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-17T12:08:28.000Z",
    "updateAt": "2021-07-17T20:17:11.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 835,
    "prev": "4972c81e-86f9-4ef4-b59b-ae3d7680374c",
    "next": "42405faa-2be2-4ded-8836-96a05586cd43"
  },
  "post": {
    "exerciseKey": "e221664e-c3b1-4c18-827e-7a6bd2a2593e",
    "category": "QA",
    "title": "请手写“堆排序”",
    "level": 4,
    "updateAt": "2021-07-17T20:17:11+00:00"
  },
  "tag": {
    "id": 15,
    "tagName": "算法",
    "type": "1",
    "exerciseCount": 19
  }
}