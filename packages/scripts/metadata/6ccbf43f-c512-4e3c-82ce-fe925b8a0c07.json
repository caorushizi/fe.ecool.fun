{
  "data": {
    "id": 379,
    "exerciseKey": "6ccbf43f-c512-4e3c-82ce-fe925b8a0c07",
    "category": "QA",
    "renderType": "html",
    "title": "webpack的Loader和Plugin的不同",
    "desc": null,
    "options": null,
    "explanation": "<p><strong>不同的作用:</strong><br/> </p><ul><li> <strong>Loader</strong>直译为&quot;加载器&quot;。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到<code>loader</code>。 所以Loader的作用是让webpack拥有了加载和解析<em>非JavaScript文件</em>的能力。</li><li> <strong>Plugin</strong>直译为&quot;插件&quot;。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li></ul><p> <strong>不同的用法:</strong><br/> </p><ul><li> <strong>Loader</strong>在<code>module.rules</code>中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个<code>Object</code>，里面描述了对于什么类型的文件（<code>test</code>），使用什么加载(<code>loader</code>)和使用的参数（<code>options</code>）</li><li> <strong>Plugin</strong>在<code>plugins</code>中单独配置。 类型为数组，每一项是一个<code>plugin</code>的实例，参数都通过构造函数传入。</li></ul><p><br/></p>",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-05T14:56:11.000Z",
    "updateAt": "2021-07-07T00:10:52.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 958,
    "prev": "fe099894-7e1f-4b13-bc0a-8f065b7b4616",
    "next": "9caf3dd4-c7a3-44a1-98ee-37566a737c58"
  },
  "post": {
    "exerciseKey": "6ccbf43f-c512-4e3c-82ce-fe925b8a0c07",
    "category": "QA",
    "title": "webpack的Loader和Plugin的不同",
    "level": 1,
    "updateAt": "2021-07-07T00:10:52+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 33
  }
}
