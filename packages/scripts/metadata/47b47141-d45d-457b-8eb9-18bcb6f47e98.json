{
  "data": {
    "id": 2674,
    "exerciseKey": "47b47141-d45d-457b-8eb9-18bcb6f47e98",
    "category": "QA",
    "renderType": "md",
    "title": "https 的证书验证过程是什么样的",
    "desc": "",
    "options": "",
    "explanation": "HTTPS 的证书验证过程是确保用户与服务器之间的安全通信的关键步骤。\n\n以下是证书验证过程的详细步骤：\n\n### **1. 客户端发起连接**\n\n1. **客户端请求**：\n   - 客户端（如浏览器）发起一个 HTTPS 请求，连接到服务器。\n\n### **2. 服务器响应**\n\n2. **服务器发送证书**：\n   - 服务器将 SSL/TLS 证书发送给客户端。证书包含了服务器的公钥和由受信任的证书颁发机构（CA）签名的信息。\n\n### **3. 客户端验证证书**\n\n3. **验证证书链**：\n   - **检查证书有效性**：\n     - 客户端检查证书是否在有效期内。\n   - **验证证书签名**：\n     - 客户端使用 CA 的公钥验证证书的签名，以确保证书未被篡改。\n   - **检查证书颁发机构**：\n     - 客户端检查证书是否由受信任的 CA 颁发。浏览器内置了受信任的 CA 列表，用于验证证书的有效性。\n\n4. **验证证书用途**：\n   - **检查证书用途**：\n     - 客户端检查证书是否适用于其目的（例如服务器身份验证）。\n\n5. **验证域名**：\n   - **域名匹配**：\n     - 客户端检查证书中的域名是否与请求的域名匹配。证书中的“主体”字段（Common Name）或“主题备用名称”字段（Subject Alternative Name）应与请求的 URL 匹配。\n\n### **4. 生成和交换密钥**\n\n6. **密钥交换**：\n   - **客户端生成密钥**：\n     - 客户端生成一个对称密钥（Session Key），用于加密会话数据。\n   - **加密密钥**：\n     - 客户端用服务器的公钥加密生成的对称密钥，并将其发送到服务器。\n   - **服务器解密密钥**：\n     - 服务器用私钥解密客户端发送的对称密钥。\n\n### **5. 加密通信**\n\n7. **建立安全通道**：\n   - **数据加密**：\n     - 服务器和客户端使用对称密钥加密和解密数据，确保通信内容的机密性和完整性。\n   - **数据传输**：\n     - 所有后续的通信数据都通过加密的通道传输。\n\n### **6. 完成握手**\n\n8. **握手完成**：\n   - 一旦安全通道建立，客户端和服务器就可以安全地交换数据，握手过程结束。",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:36.000Z",
    "updateAt": "2024-08-14T23:52:09.000Z",
    "isCollected": false,
    "currentIndex": 93,
    "filterTotalNum": 1487,
    "prev": "5102cc7e-824a-4ecb-bcab-e04a5f32d522",
    "next": "9b0272bb-d110-45f6-a9e9-7e426c8288d5"
  },
  "post": {
    "exerciseKey": "47b47141-d45d-457b-8eb9-18bcb6f47e98",
    "category": "QA",
    "title": "https 的证书验证过程是什么样的",
    "level": 2,
    "createAt": "2024-08-13T08:30:36+00:00",
    "updateAt": "2024-08-14T23:52:09+00:00"
  },
  "tag": {
    "id": 16,
    "tagName": "计算机网络",
    "type": "1",
    "exerciseCount": 95
  }
}