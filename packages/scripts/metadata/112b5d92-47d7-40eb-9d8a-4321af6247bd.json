{
  "data": {
    "id": 2461,
    "exerciseKey": "112b5d92-47d7-40eb-9d8a-4321af6247bd",
    "category": "QA",
    "renderType": "md",
    "title": "手写实现一个缓存函数 memoize",
    "desc": "缓存函数（`memoize`）是一个优化技术，用于缓存函数的计算结果，以避免重复计算相同的输入。",
    "options": "",
    "explanation": "下面是一个简单的手写 `memoize` 函数实现：\n\n### 实现\n\n```javascript\nfunction memoize(fn) {\n    // 创建一个 Map 对象，用于存储缓存结果\n    const cache = new Map();\n\n    // 返回一个新的函数，这个函数会使用缓存\n    return function(...args) {\n        // 将参数转换为一个唯一的键\n        const key = JSON.stringify(args);\n\n        // 检查缓存中是否已有结果\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n\n        // 调用原始函数并存储结果\n        const result = fn(...args);\n        cache.set(key, result);\n\n        return result;\n    };\n}\n\n// 示例用法\nfunction slowFunction(n) {\n    // 模拟一个耗时操作\n    for (let i = 0; i < 1e6; i++) {}\n    return n * n;\n}\n\n// 创建一个缓存版本的 slowFunction\nconst memoizedSlowFunction = memoize(slowFunction);\n\nconsole.time('First call');\nconsole.log(memoizedSlowFunction(5)); // 输出: 25\nconsole.timeEnd('First call'); // 第一次调用会比较慢\n\nconsole.time('Second call');\nconsole.log(memoizedSlowFunction(5)); // 输出: 25\nconsole.timeEnd('Second call'); // 第二次调用会更快，因为结果被缓存了\n```\n\n### 说明\n\n1. **`memoize` 函数**：\n   - 接受一个函数 `fn` 作为参数。\n   - 创建一个 `Map` 对象 `cache` 用于存储函数调用的结果，`Map` 是用于存储键值对的结构，支持按键访问。\n   - 返回一个新函数，该函数首先检查缓存中是否存在对应参数的结果：\n     - 如果存在，直接返回缓存中的结果。\n     - 如果不存在，计算结果、缓存它，并返回结果。\n\n2. **`JSON.stringify(args)`**：\n   - 将函数参数转换为一个唯一的键，以便在 `Map` 中存储和检索结果。这种方式适用于简单参数（如基本数据类型和对象），但对于复杂对象（如函数、日期等），可能需要更复杂的键生成策略。\n\n3. **性能测试**：\n   - 使用 `console.time` 和 `console.timeEnd` 测量函数调用的时间。第一次调用通常较慢，因为需要计算并缓存结果；第二次调用较快，因为结果已经在缓存中。\n\n### 注意事项\n\n- **键的唯一性**：`JSON.stringify` 对于复杂的对象或参数可能会生成不唯一的键。如果需要处理更复杂的参数或数据类型，可以考虑其他方法来生成唯一键（例如，使用哈希函数）。\n- **缓存清理**：上面的实现没有清理缓存。如果函数的输入参数非常多或者结果很大，可能需要实现缓存清理策略来避免内存泄漏。\n\n### 扩展\n\n可以根据实际需求对 `memoize` 函数进行扩展，例如添加缓存大小限制、定时缓存清理等。",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-22T11:07:45.000Z",
    "isCollected": false,
    "currentIndex": 202,
    "filterTotalNum": 1487,
    "prev": "30b5a8a5-5420-49cb-94b4-f45684eecba9",
    "next": "b3c9e524-a1b4-4348-9ce5-f2beb80caf32"
  },
  "post": {
    "exerciseKey": "112b5d92-47d7-40eb-9d8a-4321af6247bd",
    "category": "QA",
    "title": "手写实现一个缓存函数 memoize",
    "level": 1,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-22T11:07:45+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 124
  }
}