{
  "data": {
    "id": 2349,
    "exerciseKey": "7e744ea0-1c66-4ef9-b984-bb8828d98279",
    "category": "QA",
    "renderType": "md",
    "title": "JavaScript 是怎么做内存管理的？",
    "desc": "",
    "options": "",
    "explanation": "JavaScript 的内存管理主要依赖于自动垃圾回收机制。以下是内存管理的几个关键点：\n\n### **1. 内存分配**\n\n- **堆与栈**：JavaScript 使用堆（Heap）和栈（Stack）两种内存区域。基本数据类型（如数字、字符串、布尔值）通常存储在栈中，而对象和数组等复杂类型则存储在堆中。\n\n### **2. 垃圾回收**\n\n- **自动垃圾回收**：JavaScript 使用垃圾回收器（Garbage Collector，GC）自动管理内存。开发者不需要手动释放内存。\n  \n- **引用计数**：一种垃圾回收策略，通过跟踪对象的引用数量来判断是否可以回收。当引用计数为零时，对象会被回收。\n\n- **标记-清除算法**：最常用的垃圾回收算法。首先，GC 标记活动对象（从根对象出发遍历），然后清除未被标记的对象，释放其占用的内存。\n\n### **3. 内存泄漏**\n\n- **内存泄漏**：当不再使用的对象仍被引用，导致内存无法被回收。常见原因包括：\n  - 全局变量的使用。\n  - 闭包中引用外部变量。\n  - 事件监听器未被移除。\n\n### **4. 优化内存使用**\n\n- **减少全局变量**：尽量使用局部变量，避免全局作用域中的变量占用内存。\n  \n- **及时清理引用**：在不再需要对象时，及时将其引用设为 `null`，帮助 GC 识别可回收的对象。\n\n- **避免循环引用**：确保对象之间的循环引用不会导致内存泄漏，特别是在使用闭包时。",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:22.000Z",
    "updateAt": "2024-09-19T01:20:52.000Z",
    "isCollected": false,
    "currentIndex": 259,
    "filterTotalNum": 1487,
    "prev": "ac53c402-1c0b-4ccc-b8f0-c629bf0260bf",
    "next": "cd3ffbb1-582b-4d92-be2d-baeda2c8d050"
  },
  "post": {
    "exerciseKey": "7e744ea0-1c66-4ef9-b984-bb8828d98279",
    "category": "QA",
    "title": "JavaScript 是怎么做内存管理的？",
    "level": 3,
    "createAt": "2024-08-13T08:30:22+00:00",
    "updateAt": "2024-09-19T01:20:52+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}