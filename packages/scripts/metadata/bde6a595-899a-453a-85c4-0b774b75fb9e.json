{
  "data": {
    "id": 1535,
    "exerciseKey": "bde6a595-899a-453a-85c4-0b774b75fb9e",
    "category": "QA",
    "renderType": "md",
    "title": "寻找两个正序数组的中位数",
    "desc": "给定两个大小分别为 `m` 和 `n` 的正序（从小到大）数组 `nums1` 和 `nums2`。请你找出并返回这两个正序数组的**中位数**。\n\n* 示例 1：\n\n```\n输入：nums1 = [1,3], nums2 = [2]\n输出：2.00000\n解释：合并数组 = [1,2,3] ，中位数 2\n```\n\n* 示例 2：\n\n```\n输入：nums1 = [1,2], nums2 = [3,4]\n输出：2.50000\n解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5\n```\n\n* 示例 3：\n\n```\n输入：nums1 = [0,0], nums2 = [0,0]\n输出：0.00000\n```\n\n* 示例 4：\n\n```\n输入：nums1 = [], nums2 = [1]\n输出：1.00000\n```\n\n* 示例 5：\n\n```\n输入：nums1 = [2], nums2 = []\n输出：2.00000\n```\n \n* 提示：\n\n```\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n```\n",
    "options": null,
    "explanation": "# 暴力解法\n\n## 思路\n\n合并两个代码后从小到大排序，数组总数是奇数取nums[n/2]，是偶数则取(nums[n/2] + nums[n/2-1]) / 2\n\n## 代码\n\n```js\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    let n = nums1.length + nums2.length;\n    let nums = nums1.concat(nums2).sort((a, b) => a - b);\n    \n    let result = n % 2 == 0\n        ? (nums[n/2] + nums[n/2-1]) / 2\n        : nums[Math.floor(n/2)];\n\n    return result;\n};\n```\n\n## 复杂度\n\n* 时间复杂度 O(NlogN)，N为两数组的长度和\n* 空间复杂度 O(N)\n\n# 双指针法\n\n## 思路\n\n因为两个数组有序，求中位数不需要把两个数组合并\n\n当合并后的数组总长度len为奇数时，只要知道索引为len/2位置上的数就行了，如果数偶数，只要知道索引为len/2 - 1和len/2上的数就行，所以不管是奇数还是偶数只要遍历len/2次即可，用两个值来存遍历过程中len/2-1和len/2上的数即可\n\n两个指针point1和point2分别指向nums1和nums2，当nums1[point1] < nums2[point2]，则point1指针移动，否则point2指针移动\n\n## 代码\n\n```js\n/**\n * \n * \n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    let n1 = nums1.length;\n    let n2 = nums2.length;\n\n    // 两个数组总长度\n    let len = n1 + n2;\n\n    // 保存当前移动的指针的值(在nums1或nums2移动)，和上一个值\n    let preValue = -1;\n    let curValue = -1;\n\n    //  两个指针分别在nums1和nums2上移动\n    let point1 = 0;\n    let point2 = 0;\n\n    // 需要遍历len/2次，当len是奇数时，最后取curValue的值，是偶数时，最后取(preValue + curValue)/2的值\n    for (let i = 0; i <= Math.floor(len/2); i++) {\n        preValue = curValue;\n        // 需要在nums1上移动point1指针\n        if (point1 < n1 && (point2 >= n2 || nums1[point1] < nums2[point2])) {\n            curValue = nums1[point1];\n            point1++;\n        } else {\n            curValue = nums2[point2];\n            point2++;\n        }\n    }\n    \n    return len % 2 === 0 \n        ? (preValue + curValue) / 2\n        : curValue\n};\n```\n\n## 复杂度\n\n* 时间复杂度O(n+m)，n为nums1的长度，m为nums2的长度\n* 空间复杂度O(1)\n\n# 二分查找\n\n## 思路\n\n### 对于中位数的简单分析\n\n如果两个数组长度和为奇数，那么最终这个中位数是由一位数确定的。\n\n如果两个数组长度和为偶数，那么最终这个中位数是由两位数取平均值确定的。\n\n### 对两个数组的简单分析：\n\n两个数组应该有一个长一点，另一个点一点(等长也不影响)。\n\n中位数可能让两个数组都分成两部分：一部分小于中位数，一部分大于中位数。但两个部分合起来总数量应该一致。\n\n### 对两数组和中位数位置分析：\n\n我们知道两数组虽然可能等长(不影响)，但正常情况应该是一个长(m)一个短(n)。长短数组分别对应的坐标m1和n1和中位数坐标有什么关系？\n\n无论总和奇数偶数，都满足(m1+n1)=(m+n)/2;因为两个数组都是有序的所以总共小于中位数的占一半。其中m和n是定值。也就是不管你怎么变动，这两个坐标编号总和为定值。\n\n### 如何分析为定值得坐标\n\n既然两个坐标的总和为定值，那么可不可以把其中一个当为自变量，一个看成自变量呢？\n\n比如x+y=5你不好分析但是y=5-x，你分析x同时y就确定了。对吧？\n\n那么选择长的那个作为变量还是短的那个作为变量呢？短的。\n\n为啥？主要因为如果从长的当成变量咱们有些区域无法对应到短的(因为长度即使加上短的所有也到不了一半，处理起来麻烦，但是短的就可以很好避免这种情况。\n\n所以我们就用二分去查找小的这个区间，找到最终的结果，你可能会问：什么样情况能够满足确定这条线的附近就是产生中位数的？\n\n二分进行查找编号的时候，满足左侧都比线右侧小才行。这种情况在二分查找就是一个平衡的结果。\n\n最后找到这个index线了。取值比较你还要有注意的地方：取左侧的时候左侧如果有index为0，取右侧的时候index为最大值。\n\n所以在最后取值的时候，需要考虑左右侧是否有值。同时取长的那个也要比较，因为可能出现等长情况例如：1 2 3 4,和5 6 7 8这种去到临界。需要判断当然在实现过程用三目运算简化！\n\n总结：\n* 根据短的进行二分查找位置，先找到线index，说明中位数在附近产生。（奇数偶数在查找因为要除2可以通用表达式）\n* 如果总个数奇数，那么就是线左侧最大的那个(两个比较或只有一个)\n* 如果总个数偶数，那么就是线左侧最大的那个(两个比较或只有一个)和线右侧最小的那个(两个比较或只有一个)的值取平均，注意是double类型。\n* 其他注意点，搞清index从0开始，搞清逻辑上的第几个和数组显示使用的第几个的index的区别。\n\n## 代码\n```js\n/**\n * \n * \n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    // nums1长度比nums2小\n    if (nums1.length > nums2.length) {\n        [nums1, nums2] = [nums2, nums1];\n    }\n\n    let m = nums1.length;\n    let n = nums2.length;\n    // 在0～m中查找\n    let left = 0;\n    let right = m;\n\n    // median1：前一部分的最大值\n    // median2：后一部分的最小值\n    let median1 = 0;\n    let median2 = 0;\n\n    while(left <= right) {\n        // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]\n        // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]\n        const i = left + Math.floor((right - left) / 2);\n        const j = Math.floor((m + n + 1) / 2) - i;\n        \n        const maxLeft1 = i === 0 ? -Infinity : nums1[i - 1];\n        const minRight1 = i === m ? Infinity : nums1[i];\n\n        const maxLeft2 = j === 0 ? -Infinity : nums2[j - 1];\n        const minRight2 = j === n ? Infinity : nums2[j];\n\n        if (maxLeft1 <= minRight2) {\n            median1 = Math.max(maxLeft1, maxLeft2);\n            median2 = Math.min(minRight1, minRight2);\n            left = i + 1;\n        } else{\n            right = i - 1;\n        }\n    }\n    return (m + n) % 2 == 0 ? (median1 + median2) / 2 : median1;\n};\n```\n\n## 复杂度\n\n* 时间复杂度O(log(min(m, n)))，n为nums1的长度，m为nums2的长度\n* 空间复杂度O(1)\n",
    "level": 4,
    "status": 2,
    "appId": 7,
    "createAt": "2021-11-08T11:07:27.000Z",
    "updateAt": "2021-11-18T20:39:28.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 709,
    "prev": "b1d982b1-a2fc-44b7-9124-7f47ba2a4707",
    "next": "a4e2774a-6ac9-4fd4-a2b3-04d88538ad62"
  },
  "post": {
    "exerciseKey": "bde6a595-899a-453a-85c4-0b774b75fb9e",
    "category": "QA",
    "title": "寻找两个正序数组的中位数",
    "level": 4,
    "updateAt": "2021-11-18T20:39:28+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}