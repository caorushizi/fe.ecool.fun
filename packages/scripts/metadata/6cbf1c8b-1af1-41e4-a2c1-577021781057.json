{
  "data": {
    "id": 2666,
    "exerciseKey": "6cbf1c8b-1af1-41e4-a2c1-577021781057",
    "category": "QA",
    "renderType": "md",
    "title": "给定两个数组，写一个方法来计算它们的交集？",
    "desc": "",
    "options": "",
    "explanation": "要计算两个数组的交集，可以使用多种方法。\n\n下面是一个使用 `Set` 数据结构的高效实现：\n\n### 使用 `Set` 数据结构\n\n```javascript\nfunction intersection(arr1, arr2) {\n  // 将第一个数组转换为 Set\n  const set1 = new Set(arr1);\n  \n  // 使用 filter 方法过滤出存在于 set1 中的元素\n  return arr2.filter(item => set1.has(item));\n}\n\n// 使用示例\nconst array1 = [1, 2, 2, 1];\nconst array2 = [2, 2];\nconst result = intersection(array1, array2);\nconsole.log(result); // 输出 [2, 2]\n```\n\n### **实现要点**：\n\n1. **将第一个数组转换为 `Set`**：\n   - 这样做的好处是 `Set` 提供了常数时间复杂度的查找操作，能够快速判断元素是否存在。\n\n2. **使用 `filter` 方法**：\n   - 遍历第二个数组，检查每个元素是否存在于第一个数组的 `Set` 中。\n\n### **说明**：\n\n- 如果需要去重，可以在返回结果前再使用 `Set` 对结果进行去重处理：\n\n  ```javascript\n  function intersection(arr1, arr2) {\n    const set1 = new Set(arr1);\n    return [...new Set(arr2.filter(item => set1.has(item)))];\n  }\n  ```\n\n  这样会确保交集结果中每个元素唯一。\n\n### **复杂度**：\n\n- 时间复杂度：O(n + m)，其中 n 和 m 分别是两个数组的长度。\n- 空间复杂度：O(n) 或 O(m)，取决于哪一个数组转换为 `Set`。",
    "pivot": "",
    "vipLimit": 1,
    "level": 2,
    "appId": 7,
    "createAt": "2024-08-13T08:30:36.000Z",
    "updateAt": "2024-08-14T23:59:06.000Z",
    "isCollected": false,
    "currentIndex": 98,
    "filterTotalNum": 1487,
    "prev": "82939890-c1de-45f8-b27d-b2675d58763e",
    "next": "832f41cd-27bb-4fae-bf8d-b63b52d7086a"
  },
  "post": {
    "exerciseKey": "6cbf1c8b-1af1-41e4-a2c1-577021781057",
    "category": "QA",
    "title": "给定两个数组，写一个方法来计算它们的交集？",
    "level": 2,
    "createAt": "2024-08-13T08:30:36+00:00",
    "updateAt": "2024-08-14T23:59:06+00:00"
  },
  "tag": {
    "id": 26,
    "tagName": "编程题",
    "type": "1",
    "exerciseCount": 124
  }
}