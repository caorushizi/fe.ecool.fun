{
  "data": {
    "id": 551,
    "exerciseKey": "2b415f44-7a22-4e74-bef4-1b7c09e170d4",
    "category": "QA",
    "renderType": "md",
    "title": "说说对Nodejs中的事件循环机制理解?",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n在[浏览器事件循环](https://github.com/febobo/web-interview/issues/73)中，我们了解到`javascript`在浏览器中的事件循环机制，其是根据`HTML5`定义的规范来实现\n\n而在`NodeJS`中，事件循环是基于`libuv`实现，`libuv`是一个多平台的专注于异步IO的库，如下图最右侧所示：\n\n ![](https://static.ecool.fun//article/a3883f83-894a-475e-9352-2c6d5fe3dc2d.png)\n\n上图`EVENT_QUEUE` 给人看起来只有一个队列，但`EventLoop`存在6个阶段，每个阶段都有对应的一个先进先出的回调队列\n\n\n## 二、流程\n\n上节讲到事件循环分成了六个阶段，对应如下：\n\n ![](https://static.ecool.fun//article/b120f48a-402c-4784-a78b-366151217ed5.png)\n\n- timers阶段：这个阶段执行timer（setTimeout、setInterval）的回调\n- 定时器检测阶段(timers)：本阶段执行 timer 的回调，即 setTimeout、setInterval 里面的回调函数\n- I/O事件回调阶段(I/O callbacks)：执行延迟到下一个循环迭代的 I/O 回调，即上一轮循环中未被执行的一些I/O回调\n- 闲置阶段(idle, prepare)：仅系统内部使用\n- 轮询阶段(poll)：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞\n- 检查阶段(check)：setImmediate() 回调函数在这里执行\n- 关闭事件回调阶段(close callback)：一些关闭的回调函数，如：socket.on('close', ...)\n\n每个阶段对应一个队列，当事件循环进入某个阶段时, 将会在该阶段内执行回调，直到队列耗尽或者回调的最大数量已执行, 那么将进入下一个处理阶段\n\n除了上述6个阶段，还存在`process.nextTick`，其不属于事件循环的任何一个阶段，它属于该阶段与下阶段之间的过渡, 即本阶段执行结束, 进入下一个阶段前, 所要执行的回调，类似插队\n\n流程图如下所示：\n\n ![](https://static.ecool.fun//article/6ab9a805-9ff5-4a47-985f-e15c2e3442c2.png)\n\n在`Node`中，同样存在宏任务和微任务，与浏览器中的事件循环相似\n\n微任务对应有：\n\n- next tick queue：process.nextTick\n- other queue：Promise的then回调、queueMicrotask\n\n宏任务对应有：\n\n- timer queue：setTimeout、setInterval\n- poll queue：IO事件\n- check queue：setImmediate\n- close queue：close事件\n\n其执行顺序为：\n\n- next tick microtask queue\n- other microtask queue\n- timer queue\n- poll queue\n- check queue\n- close queue\n\n\n\n## 三、题目\n\n通过上面的学习，下面开始看看题目\n\n```js\nasync function async1() {\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n}\n\nasync function async2() {\n    console.log('async2')\n}\n\nconsole.log('script start')\n\nsetTimeout(function () {\n    console.log('setTimeout0')\n}, 0)\n\nsetTimeout(function () {\n    console.log('setTimeout2')\n}, 300)\n\nsetImmediate(() => console.log('setImmediate'));\n\nprocess.nextTick(() => console.log('nextTick1'));\n\nasync1();\n\nprocess.nextTick(() => console.log('nextTick2'));\n\nnew Promise(function (resolve) {\n    console.log('promise1')\n    resolve();\n    console.log('promise2')\n}).then(function () {\n    console.log('promise3')\n})\n\nconsole.log('script end')\n```\n\n分析过程：\n\n- 先找到同步任务，输出script start\n- 遇到第一个 setTimeout，将里面的回调函数放到 timer 队列中\n- 遇到第二个 setTimeout，300ms后将里面的回调函数放到 timer 队列中\n- 遇到第一个setImmediate，将里面的回调函数放到 check 队列中\n- 遇到第一个 nextTick，将其里面的回调函数放到本轮同步任务执行完毕后执行\n\n- 执行 async1函数，输出 async1 start\n- 执行 async2 函数，输出 async2，async2 后面的输出 async1 end进入微任务，等待下一轮的事件循环\n- 遇到第二个，将其里面的回调函数放到本轮同步任务执行完毕后执行\n- 遇到 new Promise，执行里面的立即执行函数，输出 promise1、promise2\n- then里面的回调函数进入微任务队列\n- 遇到同步任务，输出 script end\n- 执行下一轮回到函数，先依次输出 nextTick 的函数，分别是 nextTick1、nextTick2\n- 然后执行微任务队列，依次输出 async1 end、promise3\n- 执行timer 队列，依次输出 setTimeout0\n- 接着执行 check  队列，依次输出 setImmediate\n- 300ms后，timer 队列存在任务，执行输出 setTimeout2\n\n执行结果如下：\n\n```\nscript start\nasync1 start\nasync2\npromise1\npromise2\nscript end\nnextTick1\nnextTick2\nasync1 end\npromise3\nsetTimeout0\nsetImmediate\nsetTimeout2\n```\n\n最后有一道是关于`setTimeout`与`setImmediate`的输出顺序\n\n```js\nsetTimeout(() => {\n  console.log(\"setTimeout\");\n}, 0);\n\nsetImmediate(() => {\n  console.log(\"setImmediate\");\n});\n```\n\n输出情况如下：\n\n```js\n情况一：\nsetTimeout\nsetImmediate\n\n情况二：\nsetImmediate\nsetTimeout\n```\n\n分析下流程：\n\n- 外层同步代码一次性全部执行完，遇到异步API就塞到对应的阶段\n- 遇到`setTimeout`，虽然设置的是0毫秒触发，但实际上会被强制改成1ms，时间到了然后塞入`times`阶段\n- 遇到`setImmediate`塞入`check`阶段\n- 同步代码执行完毕，进入Event Loop\n- 先进入`times`阶段，检查当前时间过去了1毫秒没有，如果过了1毫秒，满足`setTimeout`条件，执行回调，如果没过1毫秒，跳过\n- 跳过空的阶段，进入check阶段，执行`setImmediate`回调\n\n这里的关键在于这1ms，如果同步代码执行时间较长，进入`Event Loop`的时候1毫秒已经过了，`setTimeout`先执行，如果1毫秒还没到，就先执行了`setImmediate`\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-25T02:19:20.000Z",
    "updateAt": "2024-01-25T19:13:32.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 90,
    "prev": "f866a768-1751-49cc-aff2-133021222b20",
    "next": "9ee51dac-67c2-4181-b9a6-18a10b2a8f95"
  },
  "post": {
    "exerciseKey": "2b415f44-7a22-4e74-bef4-1b7c09e170d4",
    "category": "QA",
    "title": "说说对Nodejs中的事件循环机制理解?",
    "level": 3,
    "updateAt": "2024-01-25T19:13:32+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}
