{
  "data": {
    "id": 1797,
    "exerciseKey": "be6669ec-4d94-4c6a-9fc9-1b243e6ea777",
    "category": "QA",
    "renderType": "md",
    "title": "数据流中的中位数",
    "desc": "如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\n* void addNum(int num) - 从数据流中添加一个整数到数据结构中。\n* double findMedian() - 返回目前所有元素的中位数。\n\n**示例 1：**\n\n**输入：**\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n**输出：**[null,null,null,1.50000,null,2.00000]\n\n**示例 2：**\n\n**输入：**\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n**输出：**[null,null,2.00000,null,2.50000]\n\n**限制：**\n\n* 最多会对 `addNum、findMedian` 进行 `50000` 次调用。\n\n```js\n/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n\n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n```",
    "options": null,
    "explanation": "\n## 解法 1:暴力法\n\n每次取出中位数的时候，都先将所有元素进行排序，然后再计算中位数。代码如下：\n\n```javascript\n\nvar MedianFinder = function() {\n    this.data = [];\n};\n\nMedianFinder.prototype.addNum = function(num) {\n    this.data.push(num);\n};\n\nMedianFinder.prototype.findMedian = function() {\n    const length = this.data.length;\n    if (!length) {\n        return null;\n    }\n    this.data.sort((a, b) => a - b);\n\n    const mid = Math.floor((length - 1) / 2);\n    if (length % 2) {\n        return this.data[mid];\n    }\n    return (this.data[mid] + this.data[mid + 1]) / 2;\n};\n```\n\n也可以在添加元素的时候直接排序。时间复杂度一样，均是 O(NlogN)，**无法 ac**。\n\n## 解法 2: 二分查找\n\n其实不需要每次添加元素的时候，都对全部元素重新排序。如果之前一直保证元素是有序的，那么添加新元素的时候，只需要将元素插入到正确位置即可，查找正确位置可以通过「二分搜索」来完成。\n\n为了保证之前的元素有序，针对每个新添加的元素都将其放入正确位置。\n\n代码实现如下：\n\n```javascript\n\nvar MedianFinder = function() {\n    this.data = [];\n};\n\nMedianFinder.prototype.addNum = function(num) {\n    if (!this.data.length) {\n        this.data.push(num);\n        return;\n    }\n\n    let left = 0,\n        right = this.data.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (this.data[mid] === num) {\n            this.data.splice(mid, 0, num);\n            return;\n        } else if (this.data[mid] < num) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    this.data.splice(right + 1, 0, num);\n};\n\nMedianFinder.prototype.findMedian = function() {\n    const length = this.data.length;\n    if (!length) {\n        return null;\n    }\n\n    const mid = Math.floor((length - 1) / 2);\n    if (length % 2) {\n        return this.data[mid];\n    }\n    return (this.data[mid] + this.data[mid + 1]) / 2;\n};\n```\n\n二分查找需要O(logN)的复杂度，移动元素需要O(N)复杂度，所以时间复杂度是O(N)。\n\n## 解法 3: 最大堆 + 最小堆\n\n对于这种动态数据，堆是极好的解决方案。准备两个堆：\n\n-   最大堆：存放数据流中较小的一半元素\n-   最小堆：存放数据流中较大的一半元素\n\n需要保证这 2 个堆的“平衡”。这里的平衡指得是：最大堆的大小 = 最小堆的大小， 或者 最大堆的大小 = 最小堆的大小 + 1。\n\n当调用 findMedian 查询中位数的时候，中位数就是最大堆的堆顶元素，或者 (最大堆的堆顶元素 + 最小堆的堆顶元素)/2\n\n剩下的问题就是怎么保证堆的平衡？步骤如下：\n\n-   先让 num 入 maxHeap\n-   取出 maxHeap 的堆顶元素，放入 minHeap\n-   若此时`最大堆的大小 < 最小堆的大小`，取出 minHeap 的堆顶元素，让入 maxHeap\n\n由于 JavaScript 中没有堆，所以要自己实现。**在实现的时候，堆的代码其实只需要一份，堆中进行判定的比较函数由外界传入即可**。\n\n```javascript\n\nconst defaultCmp = (x, y) => x > y; // 默认是最大堆\n\nconst swap = (arr, i, j) => ([arr[i], arr[j]] = [arr[j], arr[i]]);\n\nclass Heap {\n    /**\n     * 默认是最大堆\n     * @param {Function} cmp\n     */\n    constructor(cmp = defaultCmp) {\n        this.container = [];\n        this.cmp = cmp;\n    }\n\n    insert(data) {\n        const { container, cmp } = this;\n\n        container.push(data);\n        let index = container.length - 1;\n        while (index) {\n            let parent = Math.floor((index - 1) / 2);\n            if (!cmp(container[index], container[parent])) {\n                return;\n            }\n            swap(container, index, parent);\n            index = parent;\n        }\n    }\n\n    extract() {\n        const { container, cmp } = this;\n        if (!container.length) {\n            return null;\n        }\n\n        swap(container, 0, container.length - 1);\n        const res = container.pop();\n        const length = container.length;\n        let index = 0,\n            exchange = index * 2 + 1;\n\n        while (exchange < length) {\n            // // 以最大堆的情况来说：如果有右节点，并且右节点的值大于左节点的值\n            let right = index * 2 + 2;\n            if (right < length && cmp(container[right], container[exchange])) {\n                exchange = right;\n            }\n            if (!cmp(container[exchange], container[index])) {\n                break;\n            }\n            swap(container, exchange, index);\n            index = exchange;\n            exchange = index * 2 + 1;\n        }\n\n        return res;\n    }\n\n    top() {\n        if (this.container.length) return this.container[0];\n        return null;\n    }\n}\n```\n\n整体的代码逻辑如下：\n\n```javascript\n\nvar MedianFinder = function() {\n    this.maxHeap = new Heap();\n    this.minHeap = new Heap((x, y) => x < y);\n};\n\nMedianFinder.prototype.addNum = function(num) {\n    this.maxHeap.insert(num);\n    this.minHeap.insert(this.maxHeap.top());\n    this.maxHeap.extract();\n\n    if (this.maxHeap.container.length < this.minHeap.container.length) {\n        this.maxHeap.insert(this.minHeap.top());\n        this.minHeap.extract();\n    }\n};\n\nMedianFinder.prototype.findMedian = function() {\n    return this.maxHeap.container.length > this.minHeap.container.length\n        ? this.maxHeap.top()\n        : (this.maxHeap.top() + this.minHeap.top()) / 2;\n};\n```\n\n时间复杂度是O(logN)，空间复杂度是O(N)。\n",
    "level": 5,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-11T01:20:47.000Z",
    "updateAt": "2022-05-11T09:20:58.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 544,
    "prev": "7e9fd9a8-e8d8-44e6-8ffd-73faf1372a1b",
    "next": "43899450-bd19-491c-b9b0-0277f61725b0"
  },
  "post": {
    "exerciseKey": "be6669ec-4d94-4c6a-9fc9-1b243e6ea777",
    "category": "QA",
    "title": "数据流中的中位数",
    "level": 5,
    "updateAt": "2022-05-11T09:20:58+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}