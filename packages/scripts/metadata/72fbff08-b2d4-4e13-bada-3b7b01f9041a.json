{
  "data": {
    "id": 2331,
    "exerciseKey": "72fbff08-b2d4-4e13-bada-3b7b01f9041a",
    "category": "QA",
    "renderType": "md",
    "title": "React 中，构建组件的方式有哪些？",
    "desc": "",
    "options": "",
    "explanation": "在 React 中，构建组件的方式主要有以下几种：\n\n### **1. 函数组件 (Function Components)**\n\n函数组件是最常用的组件形式，使用 JavaScript 函数来定义。自 React Hooks 引入以来，函数组件得到了广泛使用。\n\n```jsx\nimport React from 'react';\n\nconst MyComponent = () => {\n  return <div>Hello, Function Component!</div>;\n};\n\nexport default MyComponent;\n```\n\n### **2. 类组件 (Class Components)**\n\n类组件是通过 ES6 的类语法定义的，适合需要使用生命周期方法的场景。虽然现在推荐使用函数组件和 Hooks，但类组件依然在一些老旧代码中存在。\n\n```jsx\nimport React, { Component } from 'react';\n\nclass MyClassComponent extends Component {\n  render() {\n    return <div>Hello, Class Component!</div>;\n  }\n}\n\nexport default MyClassComponent;\n```\n\n### **3. 高阶组件 (Higher-Order Components, HOCs)**\n\n高阶组件是接受一个组件作为参数并返回一个新的组件的函数。这种模式用于代码复用和逻辑封装。\n\n```jsx\nimport React from 'react';\n\nconst withExtraInfo = (WrappedComponent) => {\n  return (props) => {\n    return (\n      <div>\n        <WrappedComponent {...props} />\n        <p>Additional Info</p>\n      </div>\n    );\n  };\n};\n\nexport default withExtraInfo;\n```\n\n### **4. 组合组件 (Composition Components)**\n\n通过组合多个小组件来构建复杂组件。使用组合的方式可以提高组件的复用性和可维护性。\n\n```jsx\nconst ParentComponent = () => (\n  <div>\n    <ChildComponentA />\n    <ChildComponentB />\n  </div>\n);\n```\n\n### **5. Render Props**\n\n通过将一个函数作为 props 传递给组件，允许调用该函数来控制组件的渲染。这种模式用于实现复杂的逻辑和状态共享。\n\n```jsx\nconst DataProvider = ({ render }) => {\n  const data = { /* some data */ };\n  return render(data);\n};\n\n// 使用\n<DataProvider render={(data) => <MyComponent data={data} />} />\n```\n\n### **6. 自定义 Hook**\n\n虽然不直接构建组件，但自定义 Hook 是一种封装逻辑和状态的方式，可以在函数组件中复用。\n\n```jsx\nimport { useState, useEffect } from 'react';\n\nconst useFetchData = (url) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => setData(data));\n  }, [url]);\n\n  return data;\n};\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:22.000Z",
    "updateAt": "2024-09-19T01:24:55.000Z",
    "isCollected": false,
    "currentIndex": 269,
    "filterTotalNum": 1487,
    "prev": "41d27d78-a7fd-4c87-a1a4-99a96d7dedb9",
    "next": "3be464fd-88db-4533-b10b-c8accc872e50"
  },
  "post": {
    "exerciseKey": "72fbff08-b2d4-4e13-bada-3b7b01f9041a",
    "category": "QA",
    "title": "React 中，构建组件的方式有哪些？",
    "level": 3,
    "createAt": "2024-08-13T08:30:22+00:00",
    "updateAt": "2024-09-19T01:24:55+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}