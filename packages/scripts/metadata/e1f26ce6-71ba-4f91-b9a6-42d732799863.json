{
  "data": {
    "id": 1814,
    "exerciseKey": "e1f26ce6-71ba-4f91-b9a6-42d732799863",
    "category": "QA",
    "renderType": "md",
    "title": "合并两个有序数组",
    "desc": "给你两个按 **非递减顺序** 排列的整数数组 `nums1`和 `nums2`，另有两个整数 `m` 和 `n` ，分别表示 `nums1` 和 `nums2` 中的元素数目。\n\n请你 **合并** `nums2`到 `nums1` 中，使合并后的数组同样按 **非递减顺序** 排列。\n\n**注意：** 最终，合并后数组不应由函数返回，而是存储在数组 `nums1` 中。为了应对这种情况，`nums1` 的初始长度为 `m + n`，其中前 `m` 个元素表示应合并的元素，后 `n` 个元素为 `0` ，应忽略。`nums2` 的长度为 `n` 。\n\n**示例 1：**\n\n\n**输入：** nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n\n**输出：** [1,2,2,3,5,6]\n\n**解释：** 需要合并 [1,2,3] 和 [2,5,6] 。\n\n合并结果是 [_**1**_,_**2**_,2,_**3**_,5,6] ，其中斜体加粗标注的为 nums1 中的元素。\n\n**示例 2：**\n\n**输入：** nums1 = [1], m = 1, nums2 = [], n = 0\n\n**输出：** [1]\n\n**解释：** 需要合并 [1] 和 [] 。\n\n合并结果是 [1] 。\n\n**示例 3：**\n\n\n**输入：**nums1 = [0], m = 0, nums2 = [1], n = 1\n**输出：**[1]\n**解释：**需要合并的数组是 [] 和 [1] 。\n合并结果是 [1] 。\n注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。\n\n**提示：**\n\n* `nums1.length == m + n`\n* `nums2.length == n`\n* `0 <= m, n <= 200`\n* `1 <= m + n <= 200`\n* `-109 <= nums1[i], nums2[j] <= 109`\n\n**进阶：**你可以设计实现一个时间复杂度为 `O(m + n)` 的算法解决此问题吗？\n\n```js\n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n\n};\n```",
    "options": null,
    "explanation": "## 思路\n\n- 标签：从后向前数组遍历\n- 因为 `nums1` 的空间都集中在后面，所以从后向前处理排序的数据会更好，节省空间，一边遍历一边将值填充进去\n- 设置指针 `len1` 和 `len2` 分别指向 `nums1` 和 `nums2` 的有数字尾部，从尾部值开始比较遍历，同时设置指针 `len` 指向 `nums1` 的最末尾，每次遍历比较值大小之后，则进行填充\n- 当 `len1<0` 时遍历结束，此时 `nums2` 中海油数据未拷贝完全，将其直接拷贝到 `nums1` 的前面，最后得到结果数组\n- 时间复杂度：O(m+n)\n\n## 代码\n\n\n\n```JavaScript \n/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nvar merge = function(nums1, m, nums2, n) {\n    let len1 = m - 1;\n    let len2 = n - 1;\n    let len = m + n - 1;\n    while(len1 >= 0 && len2 >= 0) {\n        // 注意--符号在后面，表示先进行计算再减1，这种缩写缩短了代码\n        nums1[len--] = nums1[len1] > nums2[len2] ? nums1[len1--] : nums2[len2--];\n    }\n    function arrayCopy(src, srcIndex, dest, destIndex, length) {\n        dest.splice(destIndex, length, ...src.slice(srcIndex, srcIndex + length));\n    }\n    // 表示将nums2数组从下标0位置开始，拷贝到nums1数组中，从下标0位置开始，长度为len2+1\n    arrayCopy(nums2, 0, nums1, 0, len2 + 1);\n};\n```\n",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-16T15:00:39.000Z",
    "updateAt": "2022-05-16T23:00:41.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 534,
    "prev": "f0664776-84fa-45ea-800d-3873b9180d36",
    "next": "2c3871df-1368-4abe-943d-6cf5695620bc"
  },
  "post": {
    "exerciseKey": "e1f26ce6-71ba-4f91-b9a6-42d732799863",
    "category": "QA",
    "title": "合并两个有序数组",
    "level": 1,
    "updateAt": "2022-05-16T23:00:41+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}