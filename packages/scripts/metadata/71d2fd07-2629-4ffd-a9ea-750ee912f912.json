{
  "data": {
    "id": 245,
    "exerciseKey": "71d2fd07-2629-4ffd-a9ea-750ee912f912",
    "category": "QA",
    "renderType": "md",
    "title": "Vue项目中有封装过axios吗？怎么封装的？",
    "desc": null,
    "options": null,
    "explanation": "## 一、axios是什么\n\n`axios` 是一个轻量的 `HTTP`客户端\n\n基于 `XMLHttpRequest` 服务来执行 `HTTP` 请求，支持丰富的配置，支持 `Promise`，支持浏览器端和 `Node.js` 端。自`Vue`2.0起，尤大宣布取消对 `vue-resource` 的官方推荐，转而推荐 `axios`。现在 `axios` 已经成为大部分 `Vue` 开发者的首选\n\n### 特性\n\n- 从浏览器中创建 `XMLHttpRequests`\n- 从 `node.js` 创建 `http`请求\n- 支持 `Promise` API\n- 拦截请求和响应\n- 转换请求数据和响应数据\n- 取消请求\n- 自动转换` JSON` 数据\n- 客户端支持防御`XSRF`\n\n### 基本使用\n\n安装\n\n```js\n// 项目中安装\nnpm install axios --S\n// cdn 引入\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n导入\n\n```js\nimport axios from 'axios'\n```\n\n发送请求\n\n```js\naxios({        \n  url:'xxx',    // 设置请求的地址\n  method:\"GET\", // 设置请求方法\n  params:{      // get请求使用params进行参数凭借,如果是post请求用data\n    type: '',\n    page: 1\n  }\n}).then(res => {  \n  // res为后端返回的数据\n  console.log(res);   \n})\n```\n\n\n\n并发请求`axios.all([])`\n\n```js\nfunction getUserAccount() {\n    return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n    .then(axios.spread(function (res1, res2) { \n    // res1第一个请求的返回的内容，res2第二个请求返回的内容\n    // 两个请求都执行完成才会执行\n}));\n```\n\n\n\n## 二、为什么要封装\n\n`axios` 的 API 很友好，你完全可以很轻松地在项目中直接使用。\n\n不过随着项目规模增大，如果每发起一次`HTTP`请求，就要把这些比如设置超时时间、设置请求头、根据项目环境判断使用哪个请求地址、错误处理等等操作，都需要写一遍\n\n这种重复劳动不仅浪费时间，而且让代码变得冗余不堪，难以维护。为了提高我们的代码质量，我们应该在项目中二次封装一下 `axios` 再使用\n\n举个例子：\n\n```js\naxios('http://localhost:3000/data', {\n  // 配置代码\n  method: 'GET',\n  timeout: 1000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: 'xxx',\n  },\n  transformRequest: [function (data, headers) {\n    return data;\n  }],\n  // 其他请求配置...\n})\n.then((data) => {\n  // todo: 真正业务逻辑代码\n  console.log(data);\n}, (err) => {\n  // 错误处理代码  \n  if (err.response.status === 401) {\n  // handle authorization error\n  }\n  if (err.response.status === 403) {\n  // handle server forbidden error\n  }\n  // 其他错误处理.....\n  console.log(err);\n});\n```\n\n如果每个页面都发送类似的请求，都要写一堆的配置与错误处理，就显得过于繁琐了\n\n这时候我们就需要对`axios`进行二次封装，让使用更为便利\n\n\n\n## 三、如何封装\n\n封装的同时，你需要和 后端协商好一些约定，请求头，状态码，请求超时时间.......\n\n设置接口请求前缀：根据开发、测试、生产环境的不同，前缀需要加以区分\n\n请求头 :  来实现一些具体的业务，必须携带一些参数才可以请求(例如：会员业务)\n\n状态码:   根据接口返回的不同`status` ， 来执行不同的业务，这块需要和后端约定好\n\n请求方法：根据`get`、`post`等方法进行一个再次封装，使用起来更为方便\n\n请求拦截器:  根据请求的请求头设定，来决定哪些请求可以访问\n\n响应拦截器： 这块就是根据 后端`返回来的状态码判定执行不同业务\n\n\n\n### 设置接口请求前缀\n\n利用`node`环境变量来作判断，用来区分开发、测试、生产环境\n\n```js\nif (process.env.NODE_ENV === 'development') {\n  axios.defaults.baseURL = 'http://dev.xxx.com'\n} else if (process.env.NODE_ENV === 'production') {\n  axios.defaults.baseURL = 'http://prod.xxx.com'\n}\n```\n\n在本地调试的时候，还需要在`vue.config.js`文件中配置`devServer`实现代理转发，从而实现跨域\n\n```js\ndevServer: {\n    proxy: {\n      '/proxyApi': {\n        target: 'http://dev.xxx.com',\n        changeOrigin: true,\n        pathRewrite: {\n          '/proxyApi': ''\n        }\n      }\n    }\n  }\n```\n\n\n\n### 设置请求头与超时时间\n\n大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，这里将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置\n\n```js\nconst service = axios.create({\n    ...\n    timeout: 30000,  // 请求 30s 超时\n\t  headers: {\n        get: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        },\n        post: {\n          'Content-Type': 'application/json;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        }\n  },\n})\n```\n\n\n\n### 封装请求方法\n\n先引入封装好的方法，在要调用的接口重新封装成一个方法暴露出去\n\n```js\n// get 请求\nexport function httpGet({\n  url,\n  params = {}\n}) {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params\n    }).then((res) => {\n      resolve(res.data)\n    }).catch(err => {\n      reject(err)\n    })\n  })\n}\n\n// post\n// post请求\nexport function httpPost({\n  url,\n  data = {},\n  params = {}\n}) {\n  return new Promise((resolve, reject) => {\n    axios({\n      url,\n      method: 'post',\n      transformRequest: [function (data) {\n        let ret = ''\n        for (let it in data) {\n          ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&'\n        }\n        return ret\n      }],\n      // 发送的数据\n      data,\n      // \u0010url参数\n      params\n\n    }).then(res => {\n      resolve(res.data)\n    })\n  })\n}\n```\n\n把封装的方法放在一个`api.js`文件中\n\n```js\nimport { httpGet, httpPost } from './http'\nexport const getorglist = (params = {}) => httpGet({ url: 'apps/api/org/list', params })\n```\n\n页面中就能直接调用\n\n```js\n// .vue\nimport { getorglist } from '@/assets/js/api'\n\ngetorglist({ id: 200 }).then(res => {\n  console.log(res)\n})\n```\n\n这样可以把`api`统一管理起来，以后维护修改只需要在`api.js`文件操作即可\n\n\n\n### 请求拦截器\n\n请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便\n\n```js\n// 请求拦截器\naxios.interceptors.request.use(\n  config => {\n    // 每次发送请求之前判断是否存在token\n    // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的\n    token && (config.headers.Authorization = token)\n    return config\n  },\n  error => {\n    return Promise.error(error)\n  })\n```\n\n\n\n### 响应拦截器\n\n响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权\n\n```js\n// 响应拦截器\naxios.interceptors.response.use(response => {\n  // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n  // 否则的话抛出错误\n  if (response.status === 200) {\n    if (response.data.code === 511) {\n      // 未授权调取授权接口\n    } else if (response.data.code === 510) {\n      // 未登录跳转登录页\n    } else {\n      return Promise.resolve(response)\n    }\n  } else {\n    return Promise.reject(response)\n  }\n}, error => {\n  // 我们可以在这里对异常状态作统一处理\n  if (error.response.status) {\n    // 处理请求失败的情况\n    // 对不同返回码对相应处理\n    return Promise.reject(error.response)\n  }\n})\n```\n\n\n\n### 小结\n\n- 封装是编程中很有意义的手段，简单的`axios`封装，就可以让我们可以领略到它的魅力\n- 封装 `axios` 没有一个绝对的标准，只要你的封装可以满足你的项目需求，并且用起来方便，那就是一个好的封装方案\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:45:24.000Z",
    "updateAt": "2024-08-10T17:04:45.000Z",
    "isCollected": false,
    "currentIndex": 1254,
    "filterTotalNum": 1487,
    "prev": "4a0ca854-e576-4046-a740-f1ef8d4060c9",
    "next": "7d27dc57-5d95-4e3f-88a7-eb685b7c21e4"
  },
  "post": {
    "exerciseKey": "71d2fd07-2629-4ffd-a9ea-750ee912f912",
    "category": "QA",
    "title": "Vue项目中有封装过axios吗？怎么封装的？",
    "level": 2,
    "createAt": "2021-07-04T03:45:24+00:00",
    "updateAt": "2024-08-10T17:04:45+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}