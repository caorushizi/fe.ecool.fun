{
  "data": {
    "id": 2555,
    "exerciseKey": "d50af40c-df41-4601-9935-c6aa3c89e3d7",
    "category": "QA",
    "renderType": "md",
    "title": "Javascript 数组中有哪些方法可以改变自身，哪些不可以？",
    "desc": "",
    "options": "",
    "explanation": "在 JavaScript 中，数组方法可以分为改变原数组的方法和不改变原数组的方法。下面是对这些方法的详细分类：\n\n### **改变自身的方法**\n\n这些方法会直接修改数组本身：\n\n1. **`push()`**: 向数组末尾添加一个或多个元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.push(4); // arr 是 [1, 2, 3, 4]\n   ```\n\n2. **`pop()`**: 从数组末尾删除一个元素，并返回该元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.pop(); // arr 是 [1, 2]\n   ```\n\n3. **`shift()`**: 从数组开头删除一个元素，并返回该元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.shift(); // arr 是 [2, 3]\n   ```\n\n4. **`unshift()`**: 向数组开头添加一个或多个元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.unshift(0); // arr 是 [0, 1, 2, 3]\n   ```\n\n5. **`splice()`**: 从数组中添加或删除元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.splice(1, 1, 4, 5); // arr 是 [1, 4, 5, 3]\n   ```\n\n6. **`sort()`**: 对数组进行排序，默认按字符编码排序。\n   ```javascript\n   let arr = [3, 1, 2];\n   arr.sort(); // arr 是 [1, 2, 3]\n   ```\n\n7. **`reverse()`**: 反转数组的顺序。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.reverse(); // arr 是 [3, 2, 1]\n   ```\n\n8. **`fill()`**: 用指定的值填充数组的指定部分。\n   ```javascript\n   let arr = [1, 2, 3];\n   arr.fill(0, 1, 3); // arr 是 [1, 0, 0]\n   ```\n\n### **不改变自身的方法**\n\n这些方法不会修改原数组，而是返回一个新数组或结果：\n\n1. **`concat()`**: 合并两个或多个数组，返回一个新数组。\n   ```javascript\n   let arr1 = [1, 2];\n   let arr2 = [3, 4];\n   let result = arr1.concat(arr2); // result 是 [1, 2, 3, 4]\n   ```\n\n2. **`slice()`**: 提取数组的一部分，并返回一个新数组。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.slice(1, 2); // result 是 [2]\n   ```\n\n3. **`map()`**: 创建一个新数组，其结果是调用一个提供的函数对每个数组元素执行操作后的结果。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.map(x => x * 2); // result 是 [2, 4, 6]\n   ```\n\n4. **`filter()`**: 创建一个新数组，其中包含所有通过测试的数组元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.filter(x => x > 1); // result 是 [2, 3]\n   ```\n\n5. **`reduce()`**: 对数组中的每个元素执行一个提供的函数，返回单个值。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.reduce((sum, x) => sum + x, 0); // result 是 6\n   ```\n\n6. **`find()`**: 返回数组中满足提供测试函数的第一个元素。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.find(x => x > 1); // result 是 2\n   ```\n\n7. **`some()`**: 检查数组中是否至少有一个元素满足提供的测试函数。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.some(x => x > 2); // result 是 true\n   ```\n\n8. **`every()`**: 检查数组中的所有元素是否都满足提供的测试函数。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.every(x => x > 0); // result 是 true\n   ```\n\n9. **`includes()`**: 检查数组中是否包含指定的值。\n   ```javascript\n   let arr = [1, 2, 3];\n   let result = arr.includes(2); // result 是 true\n   ```\n\n10. **`join()`**: 将数组中的所有元素连接成一个字符串。\n    ```javascript\n    let arr = [1, 2, 3];\n    let result = arr.join('-'); // result 是 '1-2-3'\n    ```\n\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 1,
    "appId": 7,
    "createAt": "2024-08-13T08:30:31.000Z",
    "updateAt": "2024-08-15T23:14:16.000Z",
    "isCollected": false,
    "currentIndex": 162,
    "filterTotalNum": 1487,
    "prev": "af29b30f-fe4e-4cbf-99cc-c1886badda2a",
    "next": "5426fc5b-0f7d-4095-98bf-f76016ca090e"
  },
  "post": {
    "exerciseKey": "d50af40c-df41-4601-9935-c6aa3c89e3d7",
    "category": "QA",
    "title": "Javascript 数组中有哪些方法可以改变自身，哪些不可以？",
    "level": 1,
    "createAt": "2024-08-13T08:30:31+00:00",
    "updateAt": "2024-08-15T23:14:16+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}