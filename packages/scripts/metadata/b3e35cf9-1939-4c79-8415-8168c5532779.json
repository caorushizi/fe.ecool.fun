{
  "data": {
    "id": 1679,
    "exerciseKey": "b3e35cf9-1939-4c79-8415-8168c5532779",
    "category": "QA",
    "renderType": "md",
    "title": "vuex中的辅助函数怎么使用？",
    "desc": null,
    "options": null,
    "explanation": "在实际开发中，我们经常会用到 vuex 来对数据进行管理，随着数据越来越多，我们逐渐开始使用一些语法糖来帮助我们快速开发。 即 vuex 中的 mapState、mapGetters、mapMutations、mapActions 等辅助函数是我们经常使用到的。\n\n## 辅助函数\n\n通过辅助函数`mapState`、`mapActions`、`mapMutations`，把`vuex.store`中的属性映射到`vue`实例身上，这样在`vue`实例中就能访问`vuex.store`中的属性了，对于操作`vuex.store`就很方便了。\n\n`state`辅助函数为`mapState`，`actions`辅助函数为`mapActions`，`mutations`辅助函数为`mapMutations`。（`Vuex`实例身上有`mapState`、`mapActions`、`mapMutations`属性，属性值都是函数）\n\n## 如何使用辅助函数\n\n首先，需要在当前组件中引入`Vuex`。\n\n然后，通过Vuex来调用辅助函数。\n\n## 辅助函数如何去映射vuex.store中的属性\n\n### 1、mapState:把state属性映射到computed身上\n\n```js\ncomputed:{\n  ...Vuex.mapState({\n    input:state=>state.inputVal,\n    n:state=>state.n\n  })   \n}\n\n```\n\n`state`：用来存储公共的状态  在`state`中的数据都是响应式的。\n\n响应式原因：`state`里面有一个`getters`、`setters`方法；`data`中的数据也是响应式的，因为里面也有`getters`和`setters`方法\n\n在`computed`属性中来接收`state`中的数据,接收方式有2种（数组和对象，推荐对象）.\n\n优点：\n\n*   本身key值是别名，要的是val的值，key的值a 和 val=\"a\"一样就行，随意写。减少state里面长的属性名。\n*   可以在函数内部查看state中的数据，数组方式的话，必须按照state中的属性名。\n\n```js\n  computed:Vuex.mapState({\n    key:state=>state.属性\n  })\n```\n\n如果自身组件也需要使用computed的话，通过解构赋值去解构出来\n\n```js\n  computed:{\n    ...Vuex.mapState({\n       key:state=>state.属性\n    })\n  }\n```\n\n### 2、mapAcions：把actions里面的方法映射到methods中\n\n```js\nmethods:{\n        ...Vuex.mapActions({\n            add:\"handleTodoAdd\",    //val为actions里面的方法名称\n            change:\"handleInput\"     \n        })\n    }\n\n```\n\nadd、change为action方法别名，直接代用add和change方法就行，不过要记得在actions里面做完数据业务逻辑的操作。\n\n等价于如下的函数调用，\n\n```js\nmethods: {\n\thandleInput(e){           \n\t\tlet val = e.target.value;\n\t\tthis.$store.dispatch(\"handleInput\",val )\n\t},\n\thandleAdd(){\n\t\tthis.$store.dispatch(\"handleTodoAdd\")\n\t}\n}\n\n```\n\n`actions`里面的函数主要用来处理异步的函数以及一些业务逻辑,每一个函数里面都有一个形参，这个形参是一个对象，里面有一个`commit`方法，这个方法用来触发mutations里面的方法\n\n### 3、mapMutations：把mutations里面的方法映射到methods中\n\n只是做简单的数据修改（例如n++），它没有涉及到数据的处理，没有用到业务逻辑或者异步函数，可以直接调用mutations里的方法修改数据。\n\n```js\nmethods:{\n        ...Vuex.mapMutations({\n            handleAdd:\"handlMutationseAdd\"\n        })\n    }\n\n```\n\n`mutations`里面的函数主要用来修改`state`中的数据。`mutations`里面的所有方法都会有2个参数，一个是`store`中的`state`，另外一个是需要传递的参数。\n\n理解`state`、`actions`、`mutations`，可以参考`MVC`框架。\n\n*   `state`看成一个数据库，只是它是响应式的，刷新页面数据就会改变；\n*   `actions`看成controller层，做数据的业务逻辑；\n*   `mutations`看成model层，做数据的增删改查操作。\n\n### 4、mapGetters:把getters属性映射到computed身上\n\n```js\n computed:{\n        ...Vuex.mapGetters({\n            NumN:\"NumN\"\n        })\n    }\n\n```\n\n`getters`类似于组件里面`computed`，同时也监听属性的变化，当`state`中的属性发生改变的时候就会触发`getters`里面的方法。`getters`里面的每一个方法中都会有一个参数 `state`。\n\n### 5、modules属性:  模块\n\n把公共的状态按照模块进行划分\n\n* 每个模块都相当于一个小型的Vuex\n* 每个模块里面都会有`state` `getters` `actions` `mutations`\n* 切记在导出模块的时候加一个 `namespaced:true` 主要的作用是将每个模块都有独立命名空间\n* `namespace：true`在多人协作开发的时候，可能子模块和主模块中的函数名字会相同，这样在调用函数的时候，相同名字的函数都会被调用，就会发生问题。为了解决这个问题，导出模块的时候要加`namespace：true`.\n\n那么怎么调用子模块中的函数呢？假如我的子模块名字为todo.js。 函数名字就需要改成todo/函数名字。输出模块后的store实例如下图所示：\n\n![image.png](https://static.ecool.fun//article/00e48252-2d3b-4dd5-9a39-97112785b566.png)\n\n可以看到模块化后，store实例的state属性的访问方式也改变了，`this.$store.state.todo.inputVal`\n\n可以简单总结一下辅助函数通过vuex使用，比喻成映射关系为：\n\n*   `mapState/mapGettes---&gt;computed` ；\n*   `mapAcions/mapMutations----&gt;methods`\n\n## 命名空间\n\n模块开启命名空间后，享有独自的命名空间。示例代码如下：\n\n```js\nexport default {\n\tnamespaced: true,\n\t....\n}\n```\n\n`mapState`、`mapGetters`、`mapMutations`、`mapActions`第一个参数是字符串（命名空间名称），第二个参数是数组（不需要重命名）/对象（需要重命名）。\n\n```js\nmapXXXs('命名空间名称',['属性名1','属性名2'])\n\nmapXXXs('命名空间名称',{\n\n　　'组件中的新名称1':'Vuex中的原名称1',\n\n　　'组件中的新名称2':'Vuex中的原名称2',\n\n})\n```",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-02-27T10:20:57.000Z",
    "updateAt": "2024-01-25T19:35:26.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 48,
    "prev": "1036468a-13c7-49d5-af8f-31c31135ceea",
    "next": "5f8efe01-0851-4c6f-87bc-f50d6e3ca279"
  },
  "post": {
    "exerciseKey": "b3e35cf9-1939-4c79-8415-8168c5532779",
    "category": "QA",
    "title": "vuex中的辅助函数怎么使用？",
    "level": 2,
    "updateAt": "2024-01-25T19:35:26+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}