{
  "data": {
    "id": 1910,
    "exerciseKey": "f5f2f81e-c0c8-409e-ba00-3f3428ae535b",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对模块化方案的理解，比如 CommonJS、AMD、CMD、ES Module 分别是什么？",
    "desc": null,
    "options": null,
    "explanation": " `时间轴：CommonJS --> AMD --> CMD --> ES Module`\n\n### CommonJS\n\n* 常用于：`服务器端`，`node`，`webpack`\n* 特点：`同步/运行时加载`，`磁盘读取速度快`\n* 语法：  \n\n```js\n// 1. 导出：通过module.exports或exports来暴露模块  \nmodule.exports = {  \n  attr1,  \n  attr2  \n}  \nexports.attr = xx  \n```\n\n**注意**  \n不可以`exports = xxx`，这样写会无效，因为更改了exports的地址，而 `exports` 是 `module.exports` 的引用指向的是同一个内存，模块最后导出的是 `module.exports`  \n\n```js\n// 2. 引用：require('x')  \nconst xx = require('xx') // 整体重命名  \nconst { attr } = require('xx') // 解构某一个导出\n```\n\n### AMD\n\n* 常用于：不常用，`CommonJs的浏览器端实现`\n* 特点：  \n   * `异步加载`：因为面向浏览器端，为了不影响渲染肯定是异步加载  \n   * `依赖前置`：所有的依赖必须写在最初的依赖数组中，速度快，但是会浪费资源，预先加载了所有依赖不管你是否用到\n* 语法：  \n\n```js\n// 1. 导出：通过define来定义模块  \n// 如果该模块还依赖其他模块，则将模块的路径填入第一个参数的数组中  \ndefine(['x'], function(x){  \n  function foo(){  \n      return x.fn() + 1  \n  }  \n  return {  \n      foo: foo  \n  };  \n});  \n// 2. 引用  \nrequire(['a'], function (a){  \n  a.foo()  \n});\n```\n\n### CMD\n\n* 常用于：不常用，`根据CommonJs和AMD实现，优化了加载方式`\n* 特点：  \n   * `异步加载`  \n   * `按需加载/依赖就近`：用到了再引用依赖，方便了开发，缺点是速度和性能较差\n* 语法：  \n\n```js\n// 1. 导出：通过define来定义模块  \n// 如果该模块还依赖其他模块，在用到的地方引用即可  \ndefine(function(){  \n  function foo(){  \n      var x = require('x')  \n      return x.fn() + 1  \n  }  \n  return {  \n      foo: foo  \n  };  \n});  \n// 2. 引用  \nvar x = require('a');  \na.foo();\n```\n\n### ES module\n\n* 常用于：`目前浏览器端的默认标准`\n* 特点：`静态编译：` 在编译的时候就能确定依赖关系，以及输入和输出的变量\n* 语法：  \n\n```js\n// 1. 导出：通过export 或 export default 输出模块  \n// 写法1: 边声明，边导出  \nexport var m = 1;  \nexport function m() {};  \nexport class M {};  \n\n// 写法2：导出一个接口 export {}，形似导出对象但不是, 本质上是引用集合，最常用的导出方法  \n\nexport {  \n  attr1,  \n  attr2  \n}  \n\n// 写法3：默认导出  \n\nexport default fn  \n\n// 2. 引用  \nimport { x } from 'test.js' // 导出模块中对应的值，必须知道值在模块中导出时的名字  \nimport { x as myx } from 'test.js' // 改名字  \nimport x from 'test.js' // 默认导出的引用方式  \n```\n\n**注意**  \n\n 1. `export default`在同一个文件中只可存在一个（一个模块只能有一个默认输出）  \n 2. 一个模块中可以同时使用export default 和 export  \n \n ```js\n // 模块 test.js\n var info = {  \n   name: 'name',  \n   age: 18  \n }  \n export default info  \n export var name= '海洋饼干'  \n export var age = 18  \n \n // 引用  \n import person, {name, age as myAge} from 'test.js'  \n console.log(person); // { name: 'name', age: 18 }  \n console.log(name+ '=' + myAge); // 海洋饼干=18\n ```",
    "pivot": "",
    "vipLimit": 0,
    "level": 4,
    "appId": 7,
    "createAt": "2022-10-10T12:42:00.000Z",
    "updateAt": "2024-08-10T17:07:03.000Z",
    "isCollected": false,
    "currentIndex": 479,
    "filterTotalNum": 1487,
    "prev": "1199c5d8-034c-4cb0-a3c7-55ef5f6ec56f",
    "next": "6100dbed-3600-470f-90b1-b1c6ef213a52"
  },
  "post": {
    "exerciseKey": "f5f2f81e-c0c8-409e-ba00-3f3428ae535b",
    "category": "QA",
    "title": "说说你对模块化方案的理解，比如 CommonJS、AMD、CMD、ES Module 分别是什么？",
    "level": 4,
    "createAt": "2022-10-10T12:42:00+00:00",
    "updateAt": "2024-08-10T17:07:03+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}