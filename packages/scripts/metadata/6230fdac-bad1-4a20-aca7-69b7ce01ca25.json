{
  "data": {
    "id": 2644,
    "exerciseKey": "6230fdac-bad1-4a20-aca7-69b7ce01ca25",
    "category": "QA",
    "renderType": "md",
    "title": "如何解决页面请求接口大规模并发问题",
    "desc": "",
    "options": "",
    "explanation": "主要包括以下几种策略：\n\n### **1. 使用防抖和节流**\n\n- **防抖（Debouncing）**：在一段时间内只执行最后一次请求，适用于用户输入场景。\n  \n  ```javascript\n  function debounce(func, delay) {\n    let timer;\n    return function (...args) {\n      clearTimeout(timer);\n      timer = setTimeout(() => func.apply(this, args), delay);\n    };\n  }\n  ```\n\n- **节流（Throttling）**：限制在一定时间内执行请求，适用于限制频繁的请求。\n  \n  ```javascript\n  function throttle(func, limit) {\n    let lastFunc;\n    let lastRan;\n    return function (...args) {\n      const context = this;\n      if (!lastRan) {\n        func.apply(context, args);\n        lastRan = Date.now();\n      } else {\n        clearTimeout(lastFunc);\n        lastFunc = setTimeout(function () {\n          if ((Date.now() - lastRan) >= limit) {\n            func.apply(context, args);\n            lastRan = Date.now();\n          }\n        }, limit - (Date.now() - lastRan));\n      }\n    };\n  }\n  ```\n\n### **2. 请求合并**\n\n- **请求去重**：避免同一请求被重复发起，通过设置请求唯一标识来防止重复请求。\n\n  ```javascript\n  const pendingRequests = new Map();\n\n  async function fetchData(url, options) {\n    const key = `${url}_${JSON.stringify(options)}`;\n    if (pendingRequests.has(key)) {\n      return pendingRequests.get(key);\n    }\n\n    const requestPromise = fetch(url, options).finally(() => {\n      pendingRequests.delete(key);\n    });\n    pendingRequests.set(key, requestPromise);\n    return requestPromise;\n  }\n  ```\n\n- **批量请求**：将多个请求合并为一个请求，通过接口支持批量请求功能来减少请求数量。\n\n### **3. 后端处理**\n\n- **负载均衡**：使用负载均衡器将请求分发到多个服务器，避免单台服务器过载。\n\n- **缓存**：在后端使用缓存（如 Redis）存储重复请求的数据，减少数据库压力。\n\n- **限流**：在后端实施限流策略，控制每秒处理的请求数量，防止系统过载。\n\n### **4. 异步处理**\n\n- **并发控制**：限制并发请求的数量，通过实现并发队列来控制请求的并发数。\n\n  ```javascript\n  class Queue {\n    constructor(limit) {\n      this.queue = [];\n      this.activeCount = 0;\n      this.limit = limit;\n    }\n\n    add(fn) {\n      return new Promise((resolve, reject) => {\n        this.queue.push(() => fn().then(resolve).catch(reject));\n        this.processQueue();\n      });\n    }\n\n    processQueue() {\n      if (this.activeCount < this.limit && this.queue.length > 0) {\n        const fn = this.queue.shift();\n        this.activeCount++;\n        fn().finally(() => {\n          this.activeCount--;\n          this.processQueue();\n        });\n      }\n    }\n  }\n  ```\n\n### **5. 前端缓存**\n\n- **使用浏览器缓存**：设置缓存头（如 `Cache-Control` 和 `ETag`）来缓存请求结果，减少重复请求。\n\n- **本地存储**：使用 `localStorage` 或 `sessionStorage` 来缓存数据，避免重复请求。\n\n### **6. 使用 Web Workers**\n\n- **Web Workers**：将一些计算密集型的请求处理任务放到 Web Worker 中，避免阻塞主线程，提升用户体验。\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:36.000Z",
    "updateAt": "2024-08-15T09:31:29.000Z",
    "isCollected": false,
    "currentIndex": 112,
    "filterTotalNum": 1487,
    "prev": "5ea871ee-7242-4aa3-9684-bb5ac3be2bed",
    "next": "d158ac72-5f69-434b-a00c-c7976efe8781"
  },
  "post": {
    "exerciseKey": "6230fdac-bad1-4a20-aca7-69b7ce01ca25",
    "category": "QA",
    "title": "如何解决页面请求接口大规模并发问题",
    "level": 3,
    "createAt": "2024-08-13T08:30:36+00:00",
    "updateAt": "2024-08-15T09:31:29+00:00"
  },
  "tag": {
    "id": 75,
    "tagName": "场景题",
    "type": "1",
    "exerciseCount": 39
  }
}