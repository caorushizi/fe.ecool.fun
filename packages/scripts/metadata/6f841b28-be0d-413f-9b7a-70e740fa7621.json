{
  "data": {
    "id": 173,
    "exerciseKey": "6f841b28-be0d-413f-9b7a-70e740fa7621",
    "category": "QA",
    "renderType": "md",
    "title": "如果使用CSS提高页面性能？",
    "desc": null,
    "options": null,
    "explanation": "## 一、前言\n\n每一个网页都离不开`css`，但是很多人又认为，`css`主要是用来完成页面布局的，像一些细节或者优化，就不需要怎么考虑，实际上这种想法是不正确的\n\n作为页面渲染和内容展现的重要环节，`css`影响着用户对整个网站的第一体验\n\n因此，在整个产品研发过程中，`css`性能优化同样需要贯穿全程\n\n\n\n## 二、实现方式\n\n\n\n实现方式有很多种，主要有如下：\n\n- 内联首屏关键CSS\n- 异步加载CSS\n- 资源压缩\n- 合理使用选择器\n- 减少使用昂贵的属性\n- 不要使用@import\n\n### 内联首屏关键CSS\n\n在打开一个页面，页面首要内容出现在屏幕的时间影响着用户的体验，而通过内联`css`关键代码能够使浏览器在下载完`html`后就能立刻渲染\n\n而如果外部引用`css`代码，在解析`html`结构过程中遇到外部`css`文件，才会开始下载`css`代码，再渲染\n\n所以，`CSS`内联使用使渲染时间提前\n\n注意：但是较大的`css`代码并不合适内联（初始拥塞窗口、没有缓存），而其余代码则采取外部引用方式\n\n\n\n### 异步加载CSS\n\n在`CSS`文件请求、下载、解析完成之前，`CSS`会阻塞渲染，浏览器将不会渲染任何已处理的内容\n\n前面加载内联代码后，后面的外部引用`css`则没必要阻塞浏览器渲染。这时候就可以采取异步加载的方案，主要有如下：\n\n- 使用javascript将link标签插到head标签最后\n\n```js\n// 创建link标签\nconst myCSS = document.createElement( \"link\" );\nmyCSS.rel = \"stylesheet\";\nmyCSS.href = \"mystyles.css\";\n// 插入到header的最后位置\ndocument.head.insertBefore( myCSS, document.head.childNodes[ document.head.childNodes.length - 1 ].nextSibling );\n```\n\n- 设置link标签media属性为noexis，浏览器会认为当前样式表不适用当前类型，会在不阻塞页面渲染的情况下再进行下载。加载完成后，将`media`的值设为`screen`或`all`，从而让浏览器开始解析CSS\n\n```html\n<link rel=\"stylesheet\" href=\"mystyles.css\" media=\"noexist\" onload=\"this.media='all'\">\n```\n\n- 通过rel属性将link元素标记为alternate可选样式表，也能实现浏览器异步加载。同样别忘了加载完成之后，将rel设回stylesheet\n\n```html\n<link rel=\"alternate stylesheet\" href=\"mystyles.css\" onload=\"this.rel='stylesheet'\">\n```\n\n\n\n### 资源压缩\n\n利用`webpack`、`gulp/grunt`、`rollup`等模块化工具，将`css`代码进行压缩，使文件变小，大大降低了浏览器的加载时间\n\n\n\n### 合理使用选择器\n\n`css`匹配的规则是从右往左开始匹配，例如`#markdown .content h3`匹配规则如下：\n\n- 先找到h3标签元素\n- 然后去除祖先不是.content的元素\n- 最后去除祖先不是#markdown的元素\n\n如果嵌套的层级更多，页面中的元素更多，那么匹配所要花费的时间代价自然更高\n\n所以我们在编写选择器的时候，可以遵循以下规则：\n\n- 不要嵌套使用过多复杂选择器，最好不要三层以上\n- 使用id选择器就没必要再进行嵌套\n- 通配符和属性选择器效率最低，避免使用\n\n\n\n### 减少使用昂贵的属性\n\n在页面发生重绘的时候，昂贵属性如`box-shadow`/`border-radius`/`filter`/透明度/`:nth-child`等，会降低浏览器的渲染性能\n\n\n\n### 不要使用@import\n\ncss样式文件有两种引入方式，一种是`link`元素，另一种是`@import`\n\n`@import`会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，增添了额外的往返耗时\n\n而且多个`@import`可能会导致下载顺序紊乱\n\n比如一个css文件`index.css`包含了以下内容：`@import url(\"reset.css\")`\n\n那么浏览器就必须先把`index.css`下载、解析和执行后，才下载、解析和执行第二个文件`reset.css`\n\n\n\n### 其他\n\n- 减少重排操作，以及减少不必要的重绘\n- 了解哪些属性可以继承而来，避免对这些属性重复编写\n- cssSprite，合成所有icon图片，用宽高加上backgroud-position的背景图方式显现出我们要的icon图，减少了http请求\n- 把小的icon图片转成base64编码\n- CSS3动画或者过渡尽量使用transform和opacity来实现动画，不要使用left和top属性\n\n\n\n## 三、总结\n\n`css`实现性能的方式可以从选择器嵌套、属性特性、减少`http`这三面考虑，同时还要注意`css`代码的加载顺序\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:28:26.000Z",
    "updateAt": "2024-08-10T17:04:25.000Z",
    "isCollected": false,
    "currentIndex": 1326,
    "filterTotalNum": 1487,
    "prev": "dc8c6233-f645-444c-8e31-f18bc3f5244f",
    "next": "cae03999-2c1e-4ecc-9c66-10c0714c61d6"
  },
  "post": {
    "exerciseKey": "6f841b28-be0d-413f-9b7a-70e740fa7621",
    "category": "QA",
    "title": "如果使用CSS提高页面性能？",
    "level": 2,
    "createAt": "2021-07-03T13:28:26+00:00",
    "updateAt": "2024-08-10T17:04:25+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 101
  }
}