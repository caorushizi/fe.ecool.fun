{
  "data": {
    "id": 663,
    "exerciseKey": "300d6f04-63e9-4360-82fa-e4a505d618a1",
    "category": "QA",
    "renderType": "md",
    "title": "说说React render方法的原理？在什么时候会被触发？",
    "desc": null,
    "options": null,
    "explanation": "## 一、原理\n\n首先，`render`函数在`react`中有两种形式：\n\n在类组件中，指的是`render`方法：\n\n```jsx\nclass Foo extends React.Component {\n    render() {\n        return <h1> Foo </h1>;\n    }\n}\n```\n\n在函数组件中，指的是函数组件本身：\n\n```js\nfunction Foo() {\n    return <h1> Foo </h1>;\n}\n```\n\n在`render`中，我们会编写`jsx`，`jsx`通过`babel`编译后就会转化成我们熟悉的`js`格式，如下：\n\n```jsx\nreturn (\n  <div className='cn'>\n    <Header> hello </Header>\n    <div> start </div>\n    Right Reserve\n  </div>\n)\n```\n\n`babel`编译后：\n\n```js\nreturn (\n  React.createElement(\n    'div',\n    {\n      className : 'cn'\n    },\n    React.createElement(\n      Header,\n      null,\n      'hello'\n    ),\n    React.createElement(\n      'div',\n      null,\n      'start'\n    ),\n    'Right Reserve'\n  )\n)\n```\n\n从名字上来看，`createElement`方法用来创建元素的。\n\n在`react`中，这个元素就是虚拟`DOM`树的节点，接收三个参数：\n\n- type：标签\n- attributes：标签属性，若无则为null\n\n- children：标签的子节点\n\n这些虚拟`DOM`树最终会渲染成真实`DOM`\n\n在`render`过程中，`React` 将新调用的 `render `函数返回的树与旧版本的树进行比较，这一步是决定如何更新 `DOM` 的必要步骤，然后进行 `diff` 比较，更新 `DOM `树\n\n\n\n\n\n## 二、触发时机\n\n`render`的执行时机主要分成了两部分：\n\n- 类组件调用 setState 修改状态\n\n```jsx\nclass Foo extends React.Component {\n  state = { count: 0 };\n\n  increment = () => {\n    const { count } = this.state;\n\n    const newCount = count < 10 ? count + 1 : count;\n\n    this.setState({ count: newCount });\n  };\n\n  render() {\n    const { count } = this.state;\n    console.log(\"Foo render\");\n\n    return (\n      <div>\n        <h1> {count} </h1>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n```\n\n点击按钮，则调用`setState`方法，无论`count`是否发生变化，控制台都会输出`Foo render`，这就证明`render`执行了\n\n- 函数组件通过`useState hook`修改状态\n\n```jsx\nfunction Foo() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    const newCount = count < 10 ? count + 1 : count;\n    setCount(newCount);\n  }\n\n  console.log(\"Foo render\");\n  \n  return (\n    <div>\n      <h1> {count} </h1>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n函数组件通过`useState`这种形式更新数据，当数组的值不发生改变了，就不会触发`render`\n\n- 类组件重新渲染\n\n```js\nclass App extends React.Component {\n  state = { name: \"App\" };\n  render() {\n    return (\n      <div className=\"App\">\n        <Foo />\n        <button onClick={() => this.setState({ name: \"App\" })}>\n          Change name\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction Foo() {\n  console.log(\"Foo render\");\n\n  return (\n    <div>\n      <h1> Foo </h1>\n    </div>\n  );\n}\n```\n\n只要点击了 `App` 组件内的 `Change name` 按钮，不管 `Foo` 具体实现是什么，都会被重新`render`渲染\n\n- 函数组件重新渲染\n\n```jsx\nfunction App(){\n    const [name,setName] = useState('App')\n\n    return (\n        <div className=\"App\">\n            <Foo />\n            <button onClick={() => setName(\"aaa\")}>\n                { name }\n            </button>\n      </div>\n    )\n}\n\nfunction Foo() {\n  console.log(\"Foo render\");\n\n  return (\n    <div>\n      <h1> Foo </h1>\n    </div>\n  );\n}\n```\n\n可以发现，使用`useState`来更新状态的时候，只有首次会触发`Foo render`，后面并不会导致`Foo render`\n\n\n\n## 三、总结\n\n`render`函数里面可以编写`JSX`，转化成`createElement`这种形式，用于生成虚拟`DOM`，最终转化成真实`DOM`\n\n在` React` 中，类组件只要执行了 `setState` 方法，就一定会触发 `render` 函数执行，函数组件使用`useState`更改状态不一定导致重新`render`\n\n组件的` props` 改变了，不一定触发 `render` 函数的执行，但是如果 `props` 的值来自于父组件或者祖先组件的 `state`\n\n在这种情况下，父组件或者祖先组件的 `state` 发生了改变，就会导致子组件的重新渲染\n\n所以，一旦执行了`setState`就会执行`render`方法，`useState` 会判断当前值有无发生改变确定是否执行`render`方法，一旦父组件发生渲染，子组件也会渲染\n\n ![](https://static.ecool.fun//article/b93f5616-6085-48da-b9fb-450660a41e4b.png)\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T04:29:26.000Z",
    "updateAt": "2024-03-18T19:18:30.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 8,
    "prev": "7ddb0505-9a75-4d2b-acb5-9d3bebdcf07d",
    "next": "7625104a-b9e7-4cab-915a-d1cccfa31d5c"
  },
  "post": {
    "exerciseKey": "300d6f04-63e9-4360-82fa-e4a505d618a1",
    "category": "QA",
    "title": "说说React render方法的原理？在什么时候会被触发？",
    "level": 2,
    "updateAt": "2024-03-18T19:18:30+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
