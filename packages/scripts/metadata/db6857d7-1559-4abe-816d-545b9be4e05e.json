{
  "data": {
    "id": 1597,
    "exerciseKey": "db6857d7-1559-4abe-816d-545b9be4e05e",
    "category": "QA",
    "renderType": "md",
    "title": "【Promise第四题】下面代码的输出是什么？",
    "desc": "```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  console.log('promise1')\n  resolve('resolve1')\n})\nconst promise2 = promise1.then(res => {\n  console.log(res)\n})\nconsole.log('1', promise1);\nconsole.log('2', promise2);\n```",
    "options": null,
    "explanation": "## 过程分析\n\n* 从上至下，先遇到new Promise，执行该构造函数中的代码promise1\n* 碰到resolve函数, 将promise1的状态改变为resolved, 并将结果保存下来\n* 碰到promise1.then这个微任务，将它放入微任务队列\n* promise2是一个新的状态为pending的Promise\n* 执行同步代码1， 同时打印出promise1的状态是resolved\n* 执行同步代码2，同时打印出promise2的状态是pending\n* 宏任务执行完毕，查找微任务队列，发现promise1.then这个微任务且状态为resolved，执行它。\n\n## 结果\n\n```\n'promise1'\n'1' Promise{<resolved>: 'resolve1'}\n'2' Promise{<pending>}\n'resolve1'\n```",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2022-01-09T14:22:13.000Z",
    "updateAt": "2024-07-20T11:01:50.000Z",
    "isCollected": false,
    "currentIndex": 772,
    "filterTotalNum": 1487,
    "prev": "1b7efa22-c54d-4dc9-a54e-7faa69f5b821",
    "next": "3c969c35-6d25-4932-977e-d9ba31000ccd"
  },
  "post": {
    "exerciseKey": "db6857d7-1559-4abe-816d-545b9be4e05e",
    "category": "QA",
    "title": "【Promise第四题】下面代码的输出是什么？",
    "level": 2,
    "createAt": "2022-01-09T14:22:13+00:00",
    "updateAt": "2024-07-20T11:01:50+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}