{
  "data": {
    "id": 654,
    "exerciseKey": "44c29904-83b1-4e51-905e-2bd3599f9e45",
    "category": "QA",
    "renderType": "md",
    "title": "说说react中引入css的方式有哪几种？区别？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n组件式开发选择合适的`css`解决方案尤为重要\n\n通常会遵循以下规则：\n\n- 可以编写局部css，不会随意污染其他组件内的原生；\n- 可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式；\n- 支持所有的css特性：伪类、动画、媒体查询等；\n- 编写起来简洁方便、最好符合一贯的css风格特点\n\n在这一方面，`vue`使用`css`起来更为简洁：\n\n- 通过 style 标签编写样式\n- scoped 属性决定编写的样式是否局部有效\n- lang 属性设置预处理器\n- 内联样式风格的方式来根据最新状态设置和改变css\n\n而在`react`中，引入`CSS`就不如`Vue`方便简洁，其引入`css`的方式有很多种，各有利弊\n\n\n## 二、方式\n\n常见的`CSS`引入方式有以下：\n\n- 在组件内直接使用\n- 组件中引入 .css 文件\n- 组件中引入 .module.css 文件\n- CSS in JS\n\n\n### 在组件内直接使用\n\n直接在组件中书写`css`样式，通过`style`属性直接引入，如下：\n\n```js\nimport React, { Component } from \"react\";\n\nconst div1 = {\n  width: \"300px\",\n  margin: \"30px auto\",\n  backgroundColor: \"#44014C\",  //驼峰法\n  minHeight: \"200px\",\n  boxSizing: \"border-box\"\n};\n\nclass Test extends Component {\n  constructor(props, context) {\n    super(props);\n  }\n \n  render() {\n    return (\n     <div>\n       <div style={div1}>123</div>\n       <div style={{backgroundColor:\"red\"}}>\n     </div>\n    );\n  }\n}\n\nexport default Test;\n```\n\n上面可以看到，`css`属性需要转换成驼峰写法\n\n这种方式优点：\n\n- 内联样式, 样式之间不会有冲突\n- 可以动态获取当前state中的状态\n\n缺点：\n\n- 写法上都需要使用驼峰标识\n\n- 某些样式没有提示\n\n- 大量的样式, 代码混乱\n\n- 某些样式无法编写(比如伪类/伪元素)\n\n \n\n### 组件中引入css文件\n\n将`css`单独写在一个`css`文件中，然后在组件中直接引入\n\n`App.css`文件：\n\n```css\n.title {\n  color: red;\n  font-size: 20px;\n}\n\n.desc {\n  color: green;\n  text-decoration: underline;\n}\n```\n\n组件中引入：\n\n```js\nimport React, { PureComponent } from 'react';\n\nimport Home from './Home';\n\nimport './App.css';\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n      <div className=\"app\">\n        <h2 className=\"title\">我是App的标题</h2>\n        <p className=\"desc\">我是App中的一段文字描述</p >\n        <Home/>\n      </div>\n    )\n  }\n}\n```\n\n这种方式存在不好的地方在于样式是全局生效，样式之间会互相影响\n\n\n\n### 组件中引入 .module.css 文件\n\n将`css`文件作为一个模块引入，这个模块中的所有`css`，只作用于当前组件。不会影响当前组件的后代组件\n\n这种方式是`webpack`特工的方案，只需要配置`webpack`配置文件中`modules:true`即可\n\n```jsx\nimport React, { PureComponent } from 'react';\n\nimport Home from './Home';\n\nimport './App.module.css';\n\nexport default class App extends PureComponent {\n  render() {\n    return (\n      <div className=\"app\">\n        <h2 className=\"title\">我是App的标题</h2>\n        <p className=\"desc\">我是App中的一段文字描述</p >\n        <Home/>\n      </div>\n    )\n  }\n}\n```\n\n这种方式能够解决局部作用域问题，但也有一定的缺陷：\n\n- 引用的类名，不能使用连接符(.xxx-xx)，在 JavaScript 中是不识别的\n- 所有的 className 都必须使用 {style.className} 的形式来编写\n- 不方便动态来修改某些样式，依然需要使用内联样式的方式；\n\n\n\n### CSS in JS\n\nCSS-in-JS， 是指一种模式，其中` CSS `由 `JavaScript `生成而不是在外部文件中定义\n\n此功能并不是 React 的一部分，而是由第三方库提供，例如：\n\n- styled-components\n- emotion\n- glamorous\n\n\n\n下面主要看看`styled-components`的基本使用\n\n本质是通过函数的调用，最终创建出一个组件：\n\n- 这个组件会被自动添加上一个不重复的class\n- styled-components会给该class添加相关的样式\n\n基本使用如下：\n\n创建一个`style.js`文件用于存放样式组件：\n\n```js\nexport const SelfLink = styled.div`\n  height: 50px;\n  border: 1px solid red;\n  color: yellow;\n`;\n\nexport const SelfButton = styled.div`\n  height: 150px;\n  width: 150px;\n  color: ${props => props.color};\n  background-image: url(${props => props.src});\n  background-size: 150px 150px;\n`;\n```\n\n引入样式组件也很简单：\n\n```jsx\nimport React, { Component } from \"react\";\n\nimport { SelfLink, SelfButton } from \"./style\";\n\nclass Test extends Component {\n  constructor(props, context) {\n    super(props);\n  }  \n \n  render() {\n    return (\n     <div>\n       <SelfLink title=\"People's Republic of China\">app.js</SelfLink>\n       <SelfButton color=\"palevioletred\" style={{ color: \"pink\" }} src={fist}>\n          SelfButton\n        </SelfButton>\n     </div>\n    );\n  }\n}\n\nexport default Test;\n```\n\n\n\n## 三、区别\n\n通过上面四种样式的引入，可以看到：\n\n- 在组件内直接使用`css`该方式编写方便，容易能够根据状态修改样式属性，但是大量的演示编写容易导致代码混乱\n- 组件中引入 .css 文件符合我们日常的编写习惯，但是作用域是全局的，样式之间会层叠\n- 引入.module.css 文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写\n\n- 通过css in js 这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等\n\n至于使用`react`用哪种方案引入`css`，并没有一个绝对的答案，可以根据各自情况选择合适的方案\n",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T04:21:46.000Z",
    "updateAt": "2021-10-24T20:58:31.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 743,
    "prev": "f28ca2b5-ff42-4522-8cf3-b4e3e835b85d",
    "next": "d428fd54-972b-44de-b0ab-cb8ac1ed27ca"
  },
  "post": {
    "exerciseKey": "44c29904-83b1-4e51-905e-2bd3599f9e45",
    "category": "QA",
    "title": "说说react中引入css的方式有哪几种？区别？",
    "level": 1.5,
    "updateAt": "2021-10-24T20:58:31+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
