{
  "data": {
    "id": 185,
    "exerciseKey": "6b4f3ad8-5cd8-49f3-941c-c916615546d0",
    "category": "QA",
    "renderType": "md",
    "title": "怎么理解ES6中 Generator的？使用场景有哪些？",
    "desc": null,
    "options": null,
    "explanation": "## 一、介绍\n\nGenerator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同\n\n回顾下上文提到的解决异步的手段：\n\n- 回调函数\n- promise\n\n那么，上文我们提到`promsie`已经是一种比较流行的解决异步方案，那么为什么还出现`Generator`？甚至`async/await`呢？\n\n该问题我们留在后面再进行分析，下面先认识下`Generator`\n\n### Generator函数\n\n执行 `Generator` 函数会返回一个遍历器对象，可以依次遍历 `Generator` 函数内部的每一个状态\n\n形式上，`Generator `函数是一个普通函数，但是有两个特征：\n\n- `function`关键字与函数名之间有一个星号\n- 函数体内部使用`yield`表达式，定义不同的内部状态\n\n```javascript\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n```\n\n\n\n## 二、使用\n\n`Generator` 函数会返回一个遍历器对象，即具有`Symbol.iterator`属性，并且返回给自己\n\n```javascript\nfunction* gen(){\n  // some code\n}\n\nvar g = gen();\n\ng[Symbol.iterator]() === g\n// true\n```\n\n通过`yield`关键字可以暂停`generator`函数返回的遍历器对象的状态\n\n```javascript\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\nvar hw = helloWorldGenerator();\n```\n\n上述存在三个状态：`hello`、`world`、`return`\n\n通过`next`方法才会遍历到下一个内部状态，其运行逻辑如下：\n\n- 遇到`yield`表达式，就暂停执行后面的操作，并将紧跟在`yield`后面的那个表达式的值，作为返回的对象的`value`属性值。\n- 下一次调用`next`方法时，再继续往下执行，直到遇到下一个`yield`表达式\n- 如果没有再遇到新的`yield`表达式，就一直运行到函数结束，直到`return`语句为止，并将`return`语句后面的表达式的值，作为返回的对象的`value`属性值。\n- 如果该函数没有`return`语句，则返回的对象的`value`属性值为`undefined`\n\n```javascript\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n`done`用来判断是否存在下个状态，`value`对应状态值\n\n`yield`表达式本身没有返回值，或者说总是返回`undefined`\n\n通过调用`next`方法可以带一个参数，该参数就会被当作上一个`yield`表达式的返回值\n\n```javascript\nfunction* foo(x) {\n  var y = 2 * (yield (x + 1));\n  var z = yield (y / 3);\n  return (x + y + z);\n}\n\nvar a = foo(5);\na.next() // Object{value:6, done:false}\na.next() // Object{value:NaN, done:false}\na.next() // Object{value:NaN, done:true}\n\nvar b = foo(5);\nb.next() // { value:6, done:false }\nb.next(12) // { value:8, done:false }\nb.next(13) // { value:42, done:true }\n```\n\n正因为`Generator `函数返回`Iterator`对象，因此我们还可以通过`for...of`进行遍历\n```javascript\nfunction* foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n// 1 2 3 4 5\n```\n\n原生对象没有遍历接口，通过`Generator `函数为它加上这个接口，就能使用`for...of`进行遍历了\n\n```javascript\nfunction* objectEntries(obj) {\n  let propKeys = Reflect.ownKeys(obj);\n\n  for (let propKey of propKeys) {\n    yield [propKey, obj[propKey]];\n  }\n}\n\nlet jane = { first: 'Jane', last: 'Doe' };\n\nfor (let [key, value] of objectEntries(jane)) {\n  console.log(`${key}: ${value}`);\n}\n// first: Jane\n// last: Doe\n```\n\n\n\n## 三、异步解决方案\n\n回顾之前展开异步解决的方案：\n\n- 回调函数\n- Promise 对象\n- generator 函数\n- async/await\n\n\n\n这里通过文件读取案例，将几种解决异步的方案进行一个比较：\n\n### 回调函数\n\n所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，再调用这个函数\n\n```javascript\nfs.readFile('/etc/fstab', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n  fs.readFile('/etc/shells', function (err, data) {\n    if (err) throw err;\n    console.log(data);\n  });\n});\n```\n\n`readFile`函数的第三个参数，就是回调函数，等到操作系统返回了`/etc/passwd`这个文件以后，回调函数才会执行\n\n\n\n### Promise\n\n`Promise`就是为了解决回调地狱而产生的，将回调函数的嵌套，改成链式调用\n\n```js\nconst fs = require('fs');\n\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\n\n\nreadFile('/etc/fstab').then(data =>{\n    console.log(data)\n    return readFile('/etc/shells')\n}).then(data => {\n    console.log(data)\n})\n```\n\n这种链式操作形式，使异步任务的两段执行更清楚了，但是也存在了很明显的问题，代码变得冗杂了，语义化并不强\n\n\n\n### generator\n\n`yield`表达式可以暂停函数执行，`next`方法用于恢复函数执行，这使得`Generator`函数非常适合将异步任务同步化\n\n```javascript\nconst gen = function* () {\n  const f1 = yield readFile('/etc/fstab');\n  const f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n\n\n### async/await\n\n将上面`Generator`函数改成`async/await`形式，更为简洁，语义化更强了\n\n```js\nconst asyncReadFile = async function () {\n  const f1 = await readFile('/etc/fstab');\n  const f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n### 区别：\n\n通过上述代码进行分析，将`promise`、`Generator`、`async/await`进行比较：\n\n- `promise`和`async/await`是专门用于处理异步操作的\n- `Generator`并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署`Interator`接口...）\n- `promise`编写代码相比`Generator`、`async`更为复杂化，且可读性也稍差\n\n- `Generator`、`async`需要与`promise`对象搭配处理异步情况\n- `async`实质是`Generator`的语法糖，相当于会自动执行`Generator`函数\n- `async`使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案\n\n\n\n## 四、使用场景\n\n`Generator`是异步解决的一种方案，最大特点则是将异步操作同步化表达出来\n\n```js\nfunction* loadUI() {\n  showLoadingScreen();\n  yield loadUIDataAsynchronously();\n  hideLoadingScreen();\n}\nvar loader = loadUI();\n// 加载UI\nloader.next()\n\n// 卸载UI\nloader.next()\n```\n\n包括`redux-saga `中间件也充分利用了`Generator`特性\n\n```js\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* fetchUser(action) {\n   try {\n      const user = yield call(Api.fetchUser, action.payload.userId);\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\n   } catch (e) {\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\n   }\n}\n\nfunction* mySaga() {\n  yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nfunction* mySaga() {\n  yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\n}\n\nexport default mySaga;\n```\n\n还能利用`Generator`函数，在对象上实现`Iterator`接口\n\n```js\nfunction* iterEntries(obj) {\n  let keys = Object.keys(obj);\n  for (let i=0; i < keys.length; i++) {\n    let key = keys[i];\n    yield [key, obj[key]];\n  }\n}\n\nlet myObj = { foo: 3, bar: 7 };\n\nfor (let [key, value] of iterEntries(myObj)) {\n  console.log(key, value);\n}\n\n// foo 3\n// bar 7\n```\n\n\n",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:37:25.000Z",
    "updateAt": "2024-01-24T17:31:45.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 174,
    "prev": "70db8e81-b858-4f3a-8bf9-d2bd1eb142e2",
    "next": "34d5eef9-20cb-4aac-b34b-87ab513456a7"
  },
  "post": {
    "exerciseKey": "6b4f3ad8-5cd8-49f3-941c-c916615546d0",
    "category": "QA",
    "title": "怎么理解ES6中 Generator的？使用场景有哪些？",
    "level": 3.5,
    "updateAt": "2024-01-24T17:31:45+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
