{
  "data": {
    "id": 2853,
    "exerciseKey": "f433ce42-7095-4c20-8461-dc71f39bea39",
    "category": "QA",
    "renderType": "md",
    "title": "JS 有哪些迭代器，该如何使用？",
    "desc": "",
    "options": "",
    "explanation": "\n## 迭代器分类\n在 JavaScript 中，有三种类型的迭代器：\n\n- **Array Iterator（数组迭代器）**：通过对数组进行迭代以访问其元素。\n\n- **String Iterator（字符串迭代器）**：通过对字符串进行迭代以访问其字符。\n\n- **Map Iterator（映射迭代器）和 Set Iterator（集合迭代器）**：通过对 Map 和 Set 数据结构进行迭代以访问其键和值。\n\n此外，在 ES6 中，我们还可以使用自定义迭代器来迭代对象中的元素。我们可以使用 Symbol.iterator 方法来创建自定义迭代器，该方法返回一个具有 next 方法的迭代器对象。\n\n另外，`Generator` 函数可以看作是一种特殊的迭代器，它能够暂停执行和恢复执行，使得我们可以通过控制迭代器的执行来生成序列。\n\n## Array Iterator（数组迭代器）有哪些迭代方法？\n\nArray Iterator（数组迭代器）是针对 JavaScript 数组的迭代器，它可以通过 `Array.prototype[Symbol.iterator]()` 方法来获取。\n\n获取到数组迭代器后，我们可以使用以下迭代方法：\n\n`next()`: 返回一个包含 value 和 done 属性的对象，value 表示下一个元素的值，done 表示是否迭代结束。\n\n`return()`: 用于提前终止迭代，并返回给定的值。\n\n`throw()`: 用于向迭代器抛出一个异常。\n\n下面是一个使用迭代器的示例代码：\n```js\nconst arr = ['a', 'b', 'c'];\nconst iterator = arr[Symbol.iterator]();\n\nconsole.log(iterator.next()); // { value: 'a', done: false }\nconsole.log(iterator.next()); // { value: 'b', done: false }\nconsole.log(iterator.next()); // { value: 'c', done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n除了以上的迭代方法，还可以通过 for...of 语句来使用迭代器，如下所示：\n```js\nconst arr = ['a', 'b', 'c'];\nfor (const item of arr) {\n  console.log(item);\n}\n// output:\n// a\n// b\n// c\n```\n\n另外，数组迭代器除了上述的迭代方法，还可以使用 forEach()、map()、filter()、reduce() 等常见数组方法进行迭代操作；\n\n## String Iterator（字符串迭代器） 有哪些迭代方法？\n`String Iterator` 是 ES6 引入的一种迭代器，可以用于遍历字符串。String Iterator 没有自己的迭代方法，但可以使用通用的迭代方法。以下是 String Iterator 可以使用的迭代方法：\n\n`next()`：返回迭代器的下一个值，格式为 {value: string, done: boolean}。\n`Symbol.iterator`：返回一个迭代器对象，可以使用 for...of 循环来遍历字符串。\n\n示例代码如下：\n```js\nconst str = \"hello\";\nconst strIterator = str[Symbol.iterator]();\n\nconsole.log(strIterator.next()); // { value: 'h', done: false }\nconsole.log(strIterator.next()); // { value: 'e', done: false }\nconsole.log(strIterator.next()); // { value: 'l', done: false }\nconsole.log(strIterator.next()); // { value: 'l', done: false }\nconsole.log(strIterator.next()); // { value: 'o', done: false }\nconsole.log(strIterator.next()); // { value: undefined, done: true }\n\nfor (let char of str) {\n  console.log(char);\n}\n// Output:\n// h\n// e\n// l\n// l\n// o\n```\n\n## Map Iterator（映射迭代器）和 Set Iterator（集合迭代器）有哪些迭代方法？\n\n**Map Iterator 和 Set Iterator 都有以下迭代方法：**\n`next()`: 返回迭代器中下一个元素的对象，对象包含 value 和 done 两个属性。value 属性是当前元素的值，done 属性表示迭代器是否已经迭代完成。\n`Symbol.iterator`: 返回迭代器本身，使其可被 for...of 循环使用。\n\n\n**Map Iterator 还有以下方法：**\n`entries()`: 返回一个新的迭代器对象，该迭代器对象的元素是 [key, value] 数组。\n`keys()`: 返回一个新的迭代器对象，该迭代器对象的元素是 Map 中的键名。\n`values()`: 返回一个新的迭代器对象，该迭代器对象的元素是 Map 中的键值。\n\n\n**Set Iterator 还有以下方法：**\n`entries()`: 返回一个新的迭代器对象，该迭代器对象的元素是 [value, value] 数组。\n`keys()`: 返回一个新的迭代器对象，该迭代器对象的元素是 Set 中的值。\n`values()`: 返回一个新的迭代器对象，该迭代器对象的元素是 Set 中的值。\n\n\n**Map Iterator 使用举例**\n```js\nconst myMap = new Map();\nmyMap.set(\"key1\", \"value1\");\nmyMap.set(\"key2\", \"value2\");\nmyMap.set(\"key3\", \"value3\");\n\nconst mapIterator = myMap.entries();\n\nconsole.log(mapIterator.next().value); // [\"key1\", \"value1\"]\nconsole.log(mapIterator.next().value); // [\"key2\", \"value2\"]\nconsole.log(mapIterator.next().value); // [\"key3\", \"value3\"]\nconsole.log(mapIterator.next().value); // undefined\n```\n\n\n**Set Iterator 使用举例**\n```js\nconst mySet = new Set(['apple', 'banana', 'orange']);\n\n// 使用 for...of 循环遍历 Set\nfor (const item of mySet) {\n  console.log(item);\n}\n\n// 使用 Set 迭代器手动遍历 Set\nconst setIterator = mySet.values();\nlet next = setIterator.next();\nwhile (!next.done) {\n  console.log(next.value);\n  next = setIterator.next();\n}\n```\n",
    "pivot": "",
    "vipLimit": 1,
    "level": 4,
    "appId": 7,
    "createAt": "2024-08-13T08:30:45.000Z",
    "updateAt": "2024-08-14T12:21:55.000Z",
    "isCollected": false,
    "currentIndex": 22,
    "filterTotalNum": 1487,
    "prev": "51259019-fe69-4400-84d8-c31902875be9",
    "next": "eca441f6-10bd-41e4-b154-a409d43ad44b"
  },
  "post": {
    "exerciseKey": "f433ce42-7095-4c20-8461-dc71f39bea39",
    "category": "QA",
    "title": "JS 有哪些迭代器，该如何使用？",
    "level": 4,
    "createAt": "2024-08-13T08:30:45+00:00",
    "updateAt": "2024-08-14T12:21:55+00:00"
  },
  "tag": {
    "id": 24,
    "tagName": "ES6",
    "type": "1",
    "exerciseCount": 40
  }
}