{
  "data": {
    "id": 1678,
    "exerciseKey": "48c834b2-fe33-42ce-8a99-f25235cbbcb6",
    "category": "QA",
    "renderType": "md",
    "title": "Vuex有几种属性，它们存在的意义分别是什么？",
    "desc": null,
    "options": null,
    "explanation": "有五种，分别是 State、 Getter、Mutation 、Action、 Module。\n\n## State\n\nVuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。\n\nState属性是Vuex的单一状态树\n\n## Getter\n\n有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数\n\nGetter类似于Vue的 computed 对象。是根据业务逻辑来处理State，使得生成业务所需的属性。\n\n## Mutation\n\n更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。\n\nMutation是唯一用来更改Vuex中状态的方法。\n\n## Action\n\nAction 类似于 mutation，不同在于：\n\n* Action 提交的是 mutation，而不是直接变更状态。\n* Action 可以包含任意异步操作。\n\nAction是用来解决异步操作而产生的，它提交的是Mutation。\n\n## Module\n\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。\n为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割\n\nModule是将Vuex模块化的对象，目的是更好的维护。",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2022-02-27T10:20:30.000Z",
    "updateAt": "2022-02-27T18:36:14.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 603,
    "prev": "e9f00b7b-d638-4d98-8166-7f056fb2b6a1",
    "next": "35165e2d-0ef5-4c15-8b4c-a895c59216dc"
  },
  "post": {
    "exerciseKey": "48c834b2-fe33-42ce-8a99-f25235cbbcb6",
    "category": "QA",
    "title": "Vuex有几种属性，它们存在的意义分别是什么？",
    "level": 1.5,
    "updateAt": "2022-02-27T18:36:14+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}
