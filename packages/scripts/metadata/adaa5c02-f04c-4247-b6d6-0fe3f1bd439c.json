{
  "data": {
    "id": 238,
    "exerciseKey": "adaa5c02-f04c-4247-b6d6-0fe3f1bd439c",
    "category": "QA",
    "renderType": "md",
    "title": "Vue.observable是什么？",
    "desc": null,
    "options": null,
    "explanation": "## 一、Observable 是什么\n\n`Observable` 翻译过来我们可以理解成**可观察的**\n\n我们先来看一下其在`Vue`中的定义\n\n> `Vue.observable`，让一个对象变成响应式数据。`Vue` 内部会用它来处理 `data` 函数返回的对象\n\n返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器\n\n```js\nVue.observable({ count : 1})\n```\n\n其作用等同于\n\n```js\nnew vue({ count : 1})\n```\n\n在 `Vue 2.x` 中，被传入的对象会直接被 `Vue.observable` 变更，它和被返回的对象是同一个对象\n\n在 `Vue 3.x` 中，则会返回一个可响应的代理，而对源对象直接进行变更仍然是不可响应的\n\n## 二、使用场景\n\n在非父子组件通信时，可以使用通常的`bus`或者使用`vuex`，但是实现的功能不是太复杂，而使用上面两个又有点繁琐。这时，`observable`就是一个很好的选择\n\n创建一个`js`文件\n\n```js\n// 引入vue\nimport Vue from 'vue\n// 创建state对象，使用observable让state对象可响应\nexport let state = Vue.observable({\n  name: '张三',\n  'age': 38\n})\n// 创建对应的方法\nexport let mutations = {\n  changeName(name) {\n    state.name = name\n  },\n  setAge(age) {\n    state.age = age\n  }\n}\n```\n\n在`.vue`文件中直接使用即可\n\n```js\n<template>\n  <div>\n    姓名：{{ name }}\n    年龄：{{ age }}\n    <button @click=\"changeName('李四')\">改变姓名</button>\n    <button @click=\"setAge(18)\">改变年龄</button>\n  </div>\n</template>\nimport { state, mutations } from '@/store\nexport default {\n  // 在计算属性中拿到值\n  computed: {\n    name() {\n      return state.name\n    },\n    age() {\n      return state.age\n    }\n  },\n  // 调用mutations里面的方法，更新数据\n  methods: {\n    changeName: mutations.changeName,\n    setAge: mutations.setAge\n  }\n}\n```\n\n## 三、原理分析\n\n源码位置：src\\core\\observer\\index.js\n\n```js\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  let ob: Observer | void\n  // 判断是否存在__ob__响应式属性\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    // 实例化Observer响应式对象\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n```\n\n`Observer`类\n\n```js\nexport class Observer {\n    value: any;\n    dep: Dep;\n    vmCount: number; // number of vms that have this object as root $data\n\n    constructor (value: any) {\n        this.value = value\n        this.dep = new Dep()\n        this.vmCount = 0\n        def(value, '__ob__', this)\n        if (Array.isArray(value)) {\n            if (hasProto) {\n                protoAugment(value, arrayMethods)\n            } else {\n                copyAugment(value, arrayMethods, arrayKeys)\n            }\n            this.observeArray(value)\n        } else {\n            // 实例化对象是一个对象，进入walk方法\n            this.walk(value)\n        }\n}\n```\n\n`walk`函数\n\n```js\nwalk (obj: Object) {\n    const keys = Object.keys(obj)\n    // 遍历key，通过defineReactive创建响应式对象\n    for (let i = 0; i < keys.length; i++) {\n        defineReactive(obj, keys[i])\n    }\n}\n```\n\n`defineReactive`方法\n\n```js\nexport function defineReactive (\n  obj: Object,\n  key: string,\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n  const dep = new Dep()\n\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  let childOb = !shallow && observe(val)\n  // 接下来调用Object.defineProperty()给对象定义响应式属性\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      if (Dep.target) {\n        dep.depend()\n        if (childOb) {\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter()\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n      childOb = !shallow && observe(newVal)\n      // 对观察者watchers进行通知,state就成了全局响应式对象\n      dep.notify()\n    }\n  })\n}\n```\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:40:12.000Z",
    "updateAt": "2024-08-10T17:04:43.000Z",
    "isCollected": false,
    "currentIndex": 1261,
    "filterTotalNum": 1487,
    "prev": "17f833d6-5312-4150-abb8-f3a320581109",
    "next": "28305428-953c-4daa-9b4e-f3d01b694017"
  },
  "post": {
    "exerciseKey": "adaa5c02-f04c-4247-b6d6-0fe3f1bd439c",
    "category": "QA",
    "title": "Vue.observable是什么？",
    "level": 2,
    "createAt": "2021-07-04T03:40:12+00:00",
    "updateAt": "2024-08-10T17:04:43+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}