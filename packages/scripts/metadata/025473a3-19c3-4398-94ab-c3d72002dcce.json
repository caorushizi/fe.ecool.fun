{
  "data": {
    "id": 659,
    "exerciseKey": "025473a3-19c3-4398-94ab-c3d72002dcce",
    "category": "QA",
    "renderType": "md",
    "title": "说说对Redux中间件的理解？常用的中间件有哪些？实现原理？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的\n\n在上篇文章中，了解到了`Redux`整个工作流程，当`action`发出之后，`reducer`立即算出`state`，整个过程是一个同步的操作\n\n那么如果需要支持异步操作，或者支持错误处理、日志监控，这个过程就可以用上中间件\n\n`Redux`中，中间件就是放在就是在`dispatch`过程，在分发`action`进行拦截处理，如下图：\n\n ![](https://static.ecool.fun//article/dd0c2f66-095e-422b-bb79-0332e5d3a909.png)\n\n其本质上一个函数，对`store.dispatch`方法进行了改造，在发出 `Action `和执行 `Reducer `这两步之间，添加了其他功能\n\n\n## 二、常用的中间件\n\n有很多优秀的`redux`中间件，如：\n\n- redux-thunk：用于异步操作\n- redux-logger：用于日志记录\n\n上述的中间件都需要通过`applyMiddlewares`进行注册，作用是将所有的中间件组成一个数组，依次执行\n\n然后作为第二个参数传入到`createStore`中\n\n```js\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, logger)\n);\n```\n\n### redux-thunk\n\n`redux-thunk`是官网推荐的异步处理中间件\n\n默认情况下的`dispatch(action)`，`action`需要是一个`JavaScript`的对象\n\n`redux-thunk`中间件会判断你当前传进来的数据类型，如果是一个函数，将会给函数传入参数值（dispatch，getState）\n\n- dispatch函数用于我们之后再次派发action\n- getState函数考虑到我们之后的一些操作需要依赖原来的状态，用于让我们可以获取之前的一些状态\n\n所以`dispatch`可以写成下述函数的形式：\n\n```js\nconst getHomeMultidataAction = () => {\n  return (dispatch) => {\n    axios.get(\"http://xxx.xx.xx.xx/test\").then(res => {\n      const data = res.data.data;\n      dispatch(changeBannersAction(data.banner.list));\n      dispatch(changeRecommendsAction(data.recommend.list));\n    })\n  }\n}\n```\n\n\n\n### redux-logger\n\n\n如果想要实现一个日志功能，则可以使用现成的`redux-logger`\n\n```js\nimport { applyMiddleware, createStore } from 'redux';\nimport createLogger from 'redux-logger';\nconst logger = createLogger();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n);\n```\n\n这样我们就能简单通过中间件函数实现日志记录的信息\n\n\n\n## 三、实现原理\n\n首先看看`applyMiddlewares`的源码\n\n```js\nexport default function applyMiddleware(...middlewares) {\n  return (createStore) => (reducer, preloadedState, enhancer) => {\n    var store = createStore(reducer, preloadedState, enhancer);\n    var dispatch = store.dispatch;\n    var chain = [];\n\n    var middlewareAPI = {\n      getState: store.getState,\n      dispatch: (action) => dispatch(action)\n    };\n    chain = middlewares.map(middleware => middleware(middlewareAPI));\n    dispatch = compose(...chain)(store.dispatch);\n\n    return {...store, dispatch}\n  }\n}\n```\n\n所有中间件被放进了一个数组`chain`，然后嵌套执行，最后执行`store.dispatch`。可以看到，中间件内部（`middlewareAPI`）可以拿到`getState`和`dispatch`这两个方法\n\n在上面的学习中，我们了解到了`redux-thunk`的基本使用\n\n内部会将`dispatch`进行一个判断，然后执行对应操作，原理如下：\n\n```js\nfunction patchThunk(store) {\n    let next = store.dispatch;\n\n    function dispatchAndThunk(action) {\n        if (typeof action === \"function\") {\n            action(store.dispatch, store.getState);\n        } else {\n            next(action);\n        }\n    }\n\n    store.dispatch = dispatchAndThunk;\n}\n```\n\n实现一个日志输出的原理也非常简单，如下：\n\n```js\nlet next = store.dispatch;\n\nfunction dispatchAndLog(action) {\n  console.log(\"dispatching:\", addAction(10));\n  next(addAction(5));\n  console.log(\"新的state:\", store.getState());\n}\n\nstore.dispatch = dispatchAndLog;\n```\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T04:27:03.000Z",
    "updateAt": "2024-01-25T19:27:20.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 60,
    "prev": "89865bbd-72ac-4866-b4f6-a24f9c594d07",
    "next": "5438d05b-ec3b-42f6-8819-1f73213d654b"
  },
  "post": {
    "exerciseKey": "025473a3-19c3-4398-94ab-c3d72002dcce",
    "category": "QA",
    "title": "说说对Redux中间件的理解？常用的中间件有哪些？实现原理？",
    "level": 3,
    "updateAt": "2024-01-25T19:27:20+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}
