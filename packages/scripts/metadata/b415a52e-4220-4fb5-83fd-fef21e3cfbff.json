{
  "data": {
    "id": 547,
    "exerciseKey": "b415a52e-4220-4fb5-83fd-fef21e3cfbff",
    "category": "QA",
    "renderType": "md",
    "title": "说说对 Node 中的 fs模块的理解? 有哪些常用方法",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\nfs（filesystem），该模块提供本地文件的读写能力，基本上是`POSIX`文件操作命令的简单包装\n\n可以说，所有与文件的操作都是通过`fs`核心模块实现\n\n导入模块如下：\n\n```js\nconst fs = require('fs');\n```\n\n这个模块对所有文件系统操作提供异步（不具有`sync` 后缀）和同步（具有 `sync` 后缀）两种操作方式，而供开发者选择\n\n\n\n### 二、文件知识\n\n在计算机中有关于文件的知识：\n\n- 权限位 mode\n- 标识位 flag\n- 文件描述为 fd\n\n\n\n### 权限位 mode\n\n ![](https://static.ecool.fun//article/e4b10b9f-221f-41f6-b5b1-83531101091c.png)\n\n针对文件所有者、文件所属组、其他用户进行权限分配，其中类型又分成读、写和执行，具备权限位4、2、1，不具备权限为0\n\n如在`linux`查看文件权限位：\n\n```js\ndrwxr-xr-x 1 PandaShen 197121 0 Jun 28 14:41 core\n-rw-r--r-- 1 PandaShen 197121 293 Jun 23 17:44 index.md\n```\n\n在开头前十位中，`d`为文件夹，`-`为文件，后九位就代表当前用户、用户所属组和其他用户的权限位，按每三位划分，分别代表读（r）、写（w）和执行（x），- 代表没有当前位对应的权限\n\n\n\n### 标识位\n\n标识位代表着对文件的操作方式，如可读、可写、即可读又可写等等，如下表所示：\n\n| 符号 | 含义                                                     |\n| ---- | -------------------------------------------------------- |\n| r    | 读取文件，如果文件不存在则抛出异常。                     |\n| r+   | 读取并写入文件，如果文件不存在则抛出异常。               |\n| rs   | 读取并写入文件，指示操作系统绕开本地文件系统缓存。       |\n| w    | 写入文件，文件不存在会被创建，存在则清空后写入。         |\n| wx   | 写入文件，排它方式打开。                                 |\n| w+   | 读取并写入文件，文件不存在则创建文件，存在则清空后写入。 |\n| wx+  | 和 w+ 类似，排他方式打开。                               |\n| a    | 追加写入，文件不存在则创建文件。                         |\n| ax   | 与 a 类似，排他方式打开。                                |\n| a+   | 读取并追加写入，不存在则创建。                           |\n| ax+  | 与 a+ 类似，排他方式打开。                               |\n\n\n\n### 文件描述为 fd\n\n操作系统会为每个打开的文件分配一个名为文件描述符的数值标识，文件操作使用这些文件描述符来识别与追踪每个特定的文件\n\n`Window `系统使用了一个不同但概念类似的机制来追踪资源，为方便用户，`NodeJS `抽象了不同操作系统间的差异，为所有打开的文件分配了数值的文件描述符\n\n在 `NodeJS `中，每操作一个文件，文件描述符是递增的，文件描述符一般从 `3` 开始，因为前面有 `0`、`1`、`2`三个比较特殊的描述符，分别代表 `process.stdin`（标准输入）、`process.stdout`（标准输出）和 `process.stderr`（错误输出）\n\n\n\n## 三、方法\n\n下面针对`fs`模块常用的方法进行展开：\n\n- 文件读取\n- 文件写入\n- 文件追加写入\n- 文件拷贝\n- 创建目录\n\n\n\n### 文件读取\n\n####  fs.readFileSync\n\n同步读取，参数如下：\n\n- 第一个参数为读取文件的路径或文件描述符\n- 第二个参数为 options，默认值为 null，其中有 encoding（编码，默认为 null）和 flag（标识位，默认为 r），也可直接传入 encoding\n\n结果为返回文件的内容\n\n```js\nconst fs = require(\"fs\");\n\nlet buf = fs.readFileSync(\"1.txt\");\nlet data = fs.readFileSync(\"1.txt\", \"utf8\");\n\nconsole.log(buf); // <Buffer 48 65 6c 6c 6f>\nconsole.log(data); // Hello\n```\n\n\n\n#### fs.readFile\n\n异步读取方法 `readFile` 与 `readFileSync` 的前两个参数相同，最后一个参数为回调函数，函数内有两个参数 `err`（错误）和 `data`（数据），该方法没有返回值，回调函数在读取文件成功后执行\n\n```js\nconst fs = require(\"fs\");\n\nfs.readFile(\"1.txt\", \"utf8\", (err, data) => {\n   if(!err){\n       console.log(data); // Hello\n   }\n});\n```\n\n\n\n### 文件写入\n\n#### writeFileSync\n\n同步写入，有三个参数：\n\n- 第一个参数为写入文件的路径或文件描述符\n\n- 第二个参数为写入的数据，类型为 String 或 Buffer\n\n- 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 w）和 mode（权限位，默认为 0o666），也可直接传入 encoding\n\n```js\nconst fs = require(\"fs\");\n\nfs.writeFileSync(\"2.txt\", \"Hello world\");\nlet data = fs.readFileSync(\"2.txt\", \"utf8\");\n\nconsole.log(data); // Hello world\n```\n\n\n\n#### writeFile\n\n异步写入，`writeFile` 与 `writeFileSync` 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 `err`（错误），回调函数在文件写入数据成功后执行\n\n```js\nconst fs = require(\"fs\");\n\nfs.writeFile(\"2.txt\", \"Hello world\", err => {\n    if (!err) {\n        fs.readFile(\"2.txt\", \"utf8\", (err, data) => {\n            console.log(data); // Hello world\n        });\n    }\n});\n```\n\n\n\n### 文件追加写入\n\n#### appendFileSync\n\n参数如下：\n\n- 第一个参数为写入文件的路径或文件描述符\n- 第二个参数为写入的数据，类型为 String 或 Buffer\n- 第三个参数为 options，默认值为 null，其中有 encoding（编码，默认为 utf8）、 flag（标识位，默认为 a）和 mode（权限位，默认为 0o666），也可直接传入 encoding\n\n```js\nconst fs = require(\"fs\");\n\nfs.appendFileSync(\"3.txt\", \" world\");\nlet data = fs.readFileSync(\"3.txt\", \"utf8\");\n```\n\n\n\n#### appendFile\n\n异步追加写入方法 `appendFile` 与 `appendFileSync` 的前三个参数相同，最后一个参数为回调函数，函数内有一个参数 `err`（错误），回调函数在文件追加写入数据成功后执行\n\n```js\nconst fs = require(\"fs\");\n\nfs.appendFile(\"3.txt\", \" world\", err => {\n    if (!err) {\n        fs.readFile(\"3.txt\", \"utf8\", (err, data) => {\n            console.log(data); // Hello world\n        });\n    }\n});\n```\n\n\n\n### 文件拷贝\n\n#### copyFileSync\n\n同步拷贝\n\n```js\nconst fs = require(\"fs\");\n\nfs.copyFileSync(\"3.txt\", \"4.txt\");\nlet data = fs.readFileSync(\"4.txt\", \"utf8\");\n\nconsole.log(data); // Hello world\n```\n\n\n\n#### copyFile\n\n异步拷贝\n\n```js\nconst fs = require(\"fs\");\n\nfs.copyFile(\"3.txt\", \"4.txt\", () => {\n    fs.readFile(\"4.txt\", \"utf8\", (err, data) => {\n        console.log(data); // Hello world\n    });\n});\n```\n\n\n\n### 创建目录\n\n#### mkdirSync\n\n同步创建，参数为一个目录的路径，没有返回值，在创建目录的过程中，必须保证传入的路径前面的文件目录都存在，否则会抛出异常\n\n```js\n// 假设已经有了 a 文件夹和 a 下的 b 文件夹\nfs.mkdirSync(\"a/b/c\")\n```\n\n\n\n#### mkdir\n\n异步创建，第二个参数为回调函数\n\n```js\nfs.mkdir(\"a/b/c\", err => {\n    if (!err) console.log(\"创建成功\");\n});\n```",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-25T02:16:11.000Z",
    "updateAt": "2024-01-25T19:12:07.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 94,
    "prev": "b32040b5-50a0-40a8-931d-82738916e4ee",
    "next": "3805f290-f20b-4ded-8805-e963ed7f243e"
  },
  "post": {
    "exerciseKey": "b415a52e-4220-4fb5-83fd-fef21e3cfbff",
    "category": "QA",
    "title": "说说对 Node 中的 fs模块的理解? 有哪些常用方法",
    "level": 2,
    "updateAt": "2024-01-25T19:12:07+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}