{
  "data": {
    "id": 555,
    "exerciseKey": "dfc602d9-11d7-4730-99e2-312b4236f206",
    "category": "QA",
    "renderType": "md",
    "title": "如何实现文件上传？说说你的思路",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n文件上传在日常开发中应用很广泛，我们发微博、发微信朋友圈都会用到了图片上传功能\n\n因为浏览器限制，浏览器不能直接操作文件系统的，需要通过浏览器所暴露出来的统一接口，由用户主动授权发起来访问文件动作，然后读取文件内容进指定内存里，最后执行提交请求操作，将内存里的文件内容数据上传到服务端，服务端解析前端传来的数据信息后存入文件里\n\n对于文件上传，我们需要设置请求头为`content-type:multipart/form-data`\n\n> multipart互联网上的混合资源，就是资源由多种元素组成，form-data表示可以使用HTML Forms 和 POST 方法上传文件\n\n结构如下：\n\n```http\nPOST /t2/upload.do HTTP/1.1\nUser-Agent: SOHUWapRebot\nAccept-Language: zh-cn,zh;q=0.5\nAccept-Charset: GBK,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nContent-Length: 60408\nContent-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nHost: w.sohu.com\n\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data; name=\"city\"\n\nSanta colo\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"desc\"\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n \n...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC\nContent-Disposition: form-data;name=\"pic\"; filename=\"photo.jpg\"\nContent-Type: application/octet-stream\nContent-Transfer-Encoding: binary\n \n... binary data of the jpg ...\n--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--\n```\n\n`boundary`表示分隔符，如果要上传多个表单项，就要使用`boundary`分割，每个表单项由`———XXX`开始，以`———XXX`结尾\n\n而`xxx`是即时生成的字符串，用以确保整个分隔符不会在文件或表单项的内容中出现\n\n每个表单项必须包含一个 `Content-Disposition` 头，其他的头信息则为可选项， 比如 `Content-Type` \n\n`Content-Disposition` 包含了 `type `和 一个名字为` name `的 `parameter`，`type` 是 `form-data`，`name `参数的值则为表单控件（也即 field）的名字，如果是文件，那么还有一个 `filename `参数，值就是文件名\n\n```kotlin\nContent-Disposition: form-data; name=\"user\"; filename=\"logo.png\"\n```\n\n至于使用`multipart/form-data`，是因为文件是以二进制的形式存在，其作用是专门用于传输大型二进制数据，效率高\n\n\n\n### 二、如何实现\n\n关于文件的上传的上传，我们可以分成两步骤：\n\n- 文件的上传\n- 文件的解析\n\n\n\n### 文件上传\n\n传统前端文件上传的表单结构如下：\n\n```html\n<form action=\"http://localhost:8080/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\" id=\"file\" value=\"\" multiple=\"multiple\" />\n    <input type=\"submit\" value=\"提交\"/>\n</form>\n```\n\n`action` 就是我们的提交到的接口，`enctype=\"multipart/form-data\"` 就是指定上传文件格式，`input` 的 `name` 属性一定要等于`file`\n\n\n\n### 文件解析\n\n在服务器中，这里采用`koa2`中间件的形式解析上传的文件数据，分别有下面两种形式：\n\n- koa-body\n- koa-multer\n\n\n#### koa-body\n\n安装依赖\n\n```cmd\nnpm install koa-body\n```\n\n引入`koa-body`中间件\n\n```js\nconst koaBody = require('koa-body');\napp.use(koaBody({\n    multipart: true,\n    formidable: {\n        maxFileSize: 200*1024*1024    // 设置上传文件大小最大限制，默认2M\n    }\n}));\n```\n\n获取上传的文件\n\n```js\nconst file = ctx.request.files.file; // 获取上传文件\n```\n\n获取文件数据后，可以通过`fs`模块将文件保存到指定目录\n\n```js\nrouter.post('/uploadfile', async (ctx, next) => {\n  // 上传单个文件\n  const file = ctx.request.files.file; // 获取上传文件\n  // 创建可读流\n  const reader = fs.createReadStream(file.path);\n  let filePath = path.join(__dirname, 'public/upload/') + `/${file.name}`;\n  // 创建可写流\n  const upStream = fs.createWriteStream(filePath);\n  // 可读流通过管道写入可写流\n  reader.pipe(upStream);\n  return ctx.body = \"上传成功！\";\n});\n```\n\n\n\n#### koa-multer\n\n安装依赖：\n\n```cmd \nnpm install koa-multer\n```\n\n使用 `multer` 中间件实现文件上传\n\n```js\nconst storage = multer.diskStorage({  \n\tdestination: (req, file, cb) => {    \n    \tcb(null, \"./upload/\")\n    },  \n    filename: (req, file, cb) => {    \n       \tcb(null, Date.now() + path.extname(file.originalname))\n    }\n})\n\nconst upload = multer({  storage});\nconst fileRouter = new Router();\nfileRouter.post(\"/upload\", upload.single('file'), (ctx, next) => {  \n\tconsole.log(ctx.req.file); // 获取文件\n})\n \napp.use(fileRouter.routes());\n```\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-25T02:23:00.000Z",
    "updateAt": "2024-01-25T19:14:35.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 86,
    "prev": "d6a31677-c085-4ce9-8841-257659a14034",
    "next": "53a6d5df-e7b0-4f11-a1ee-c55fd1f1f8c2"
  },
  "post": {
    "exerciseKey": "dfc602d9-11d7-4730-99e2-312b4236f206",
    "category": "QA",
    "title": "如何实现文件上传？说说你的思路",
    "level": 3,
    "updateAt": "2024-01-25T19:14:35+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}
