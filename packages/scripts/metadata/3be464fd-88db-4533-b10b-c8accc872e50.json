{
  "data": {
    "id": 2327,
    "exerciseKey": "3be464fd-88db-4533-b10b-c8accc872e50",
    "category": "QA",
    "renderType": "md",
    "title": "React 是怎么渲染出页面的？",
    "desc": "",
    "options": "",
    "explanation": "React 渲染页面的过程主要包括以下几个步骤：\n\n### **1. 创建虚拟 DOM**\n\n- **组件定义**：当你定义一个组件并调用 `render` 方法时，React 会根据组件的 JSX 结构创建一个虚拟 DOM。这是一个轻量级的 JavaScript 对象，描述了 UI 的结构。\n\n### **2. 渲染到真实 DOM**\n\n- **初始渲染**：在组件首次渲染时，React 会将虚拟 DOM 转换为实际的 DOM 元素，并将其插入到页面中。通常是通过 `ReactDOM.render()` 方法完成的。\n\n```jsx\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<MyComponent />, document.getElementById('root'));\n```\n\n### **3. 组件更新**\n\n- **状态或属性变化**：当组件的状态（state）或属性（props）发生变化时，React 会重新调用组件的 `render` 方法，生成新的虚拟 DOM。\n\n### **4. Diff 算法**\n\n- **比较新旧虚拟 DOM**：React 使用高效的 Diff 算法对比新旧虚拟 DOM，以找到需要更新的部分。这个过程称为“调和”（reconciliation）。\n\n### **5. 更新真实 DOM**\n\n- **最小化 DOM 操作**：根据 Diff 算法的结果，React 会计算出最小的 DOM 更新操作，只对那些发生变化的部分进行实际更新，而不是重新渲染整个页面。\n\n### **6. 生命周期方法**\n\n- **调用生命周期方法**：在渲染过程中，React 会调用组件的生命周期方法，例如 `componentDidMount`、`componentDidUpdate` 等，以允许开发者在不同的渲染阶段执行特定的逻辑。\n\n### **7. 批处理更新**\n\n- **批量更新**：在事件处理时，React 会将多个状态更新合并为一次渲染，减少不必要的 DOM 操作，提高性能。\n\n### **8. 异步渲染**\n\n- **并发渲染**：从 React 16 开始，React 支持异步渲染，可以在不阻塞主线程的情况下进行 UI 更新，以提升用户体验。",
    "pivot": "",
    "vipLimit": 1,
    "level": 3,
    "appId": 7,
    "createAt": "2024-08-13T08:30:22.000Z",
    "updateAt": "2024-09-19T01:27:41.000Z",
    "isCollected": false,
    "currentIndex": 270,
    "filterTotalNum": 1487,
    "prev": "72fbff08-b2d4-4e13-bada-3b7b01f9041a",
    "next": "29d0b7c1-722e-476f-a02d-96d6792d273c"
  },
  "post": {
    "exerciseKey": "3be464fd-88db-4533-b10b-c8accc872e50",
    "category": "QA",
    "title": "React 是怎么渲染出页面的？",
    "level": 3,
    "createAt": "2024-08-13T08:30:22+00:00",
    "updateAt": "2024-09-19T01:27:41+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 129
  }
}