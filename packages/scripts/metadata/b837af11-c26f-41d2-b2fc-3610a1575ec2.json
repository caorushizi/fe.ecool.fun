{
  "data": {
    "id": 1915,
    "exerciseKey": "b837af11-c26f-41d2-b2fc-3610a1575ec2",
    "category": "QA",
    "renderType": "md",
    "title": "Map 和 WeakMap 有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "### Map\n\n##### 1.传统对象结构\nMap本质上是一个键值对的集合。和传统对象结构相比，传统对象只能用字符串作为键名，这在使用上造成了很大的限制。\n\n```javascript\nconst data = {}\n//element为节点对象\nconst element = document.querySelector('.node')\nconsole.log(element)  //输出div.node对象\nconsole.log(element.toString())\n//用点操作符不能有空格，所以采用中括号的形式给对象赋值\ndata[element] = 'objectData'\n//输出objectData，说明在对象中存在[object HTMLDivElement]键名\nconsole.log(data['[object HTMLDivElement]'])\n\n```\n上面带代码中，我们创建了一个对象并将一个节点对象作为它的键名，并进行了代码测试，首先验证了获取到的element节点为一个对象，再确定了经过toString方法转化后的结果，以这个值为键名成功的输出了value值objectData。\n\n上面的代码证明了传统对象的键名会通过toString方法转化为字符串类型\n\n注意：在我们访问对象成员的时，键名有空格时不能采用点访问，例如data.ab c\n这是错误的。我们可以用data['ab c']的形式访问\n\n##### 2.Map结构\n\nMap类似于对象，但是键名不限于字符串，可以说Object结构提供键值对应，Map提供值值对应，因此采用Map结构会优于传统对象。\n\n```javascript\nconst dataMap = new Map()\nconst element = document.querySelector('.node')\ndataMap.set(element,'objectData')\nconsole.log(dataMap.get(element))\nconsole.log(dataMap)\n```\n上面的代码中我们获取值时直接传入了element对象，成功将对象作为键名，弥补了传统对象的不足。\n\n##### 3.Map的特点\n\n1. Map默认情况下不包含任何键，所有键都是自己添加进去的。不同于Object原型链上有一写默认的键。\n2. Map的键可以时任何类型数据，就连函数都可以。\n3. Map的键值对个数可以轻易通过size属性获取，Object需要手动计算。\n4. Map在频繁增删键值对的场景下性能比Object更好。\n\n##### 4.什么时候用Map\n\n1. 想要添加的键值名和Object上的默认键值名冲突，又不想改名，用Map。\n2. 需要String和Symbol以外的数据类型做键值时，用Map。\n3. 键值对很多，有时需要计算数量，用Map。\n4. 需要频繁地增删键值对时，用Map。\n\n### WeakMap\n#### 什么是WeakMap\n\nWeakMap是ES6中新增的一种集合类型，叫做'弱映射'。它和Map是兄弟关系，与Map的区别在于这个弱字，API还是Map那套API\n\n#### WeakMap的特性\n\n##### 1. WeakMap只能将对象作为键名\n只接受对象作为键名(null除外)，不接受其它类型的值作为键名。\n\n##### 2.WeakMap的键名引用的对象是弱引用\n\n首先我们需要知道什么是强引用什么是弱引用\n\n**强引用**\n\n```javascript\nconst e1 = document.getElementById('foo')\nconst e2 = document.getElementById('bar')\nconst arr = [\n    [e1,'foo'],\n    [e2,'bar'],\n];\n```\n\n上面的代码中e1和e2是两个对象，通过arr数组对这两个对象添加一些文字说明。但是这样就形成了arr对e1和e2的引用，而这种引用又是强引用。它的区别就体现在这。当我们不再需要这两个对象时，我们必须手动删除这个引用，接触arr对两个对象的引用关系，否则垃圾回收机制不会释放e1和e2占用的内存。因为arr仍然存在着对对象的引用。\n\n```javascript\narr[0] = null;\narr[1] = null;\n```\n\n**弱引用**\n\n是指不能确保其引用的对象不会被垃圾回收器回收的引用。一个对象若只被弱引用所引用，则被认为是不可访问的，并因此可能在任何时刻被回收。\n\n也就是说当我们创建一个弱引用的对象时，我们就可以静静地等待其被垃圾回收器回收。\n\n总的来说，局势WeakMap保持了对键名所引用对象的弱引用，即垃圾回收机制不将该引用考虑在内。只要所引用的对象的其它引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap里面的键名对象和所对应的键值对会自动消失，不需要手动删除引用。\n\n##### 3.不可遍历\n\n正因为WeakMap对键名引用的对象是弱引用关系 ，因此WeakMap内部成员是会取决于垃圾回收机制有没有执行，运行前后成员个数很可能是不一样的，而垃圾回收机制的执行又是不可预测的，因此不可遍历。\n\n## Map和WeakMap区别\n\n- Map的键可以是任意类型，WeakMap只接受对象作为键，不接受其它类型的值作为键\n- Map的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键；WeakMap的键是弱引用，键所指向的对象是可以被垃圾回收，此时键是无效的。\n- Map可以被遍历，WeakMap不能被遍历\n\n",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2022-10-10T12:42:35.000Z",
    "updateAt": "2022-11-15T09:39:37.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 462,
    "prev": "e4c43a21-1621-4281-9340-1839ec880382",
    "next": "8bf5ed84-131a-405e-9385-0b3b75a42723"
  },
  "post": {
    "exerciseKey": "b837af11-c26f-41d2-b2fc-3610a1575ec2",
    "category": "QA",
    "title": "Map 和 WeakMap 有什么区别？",
    "level": 2.5,
    "updateAt": "2022-11-15T09:39:37+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
