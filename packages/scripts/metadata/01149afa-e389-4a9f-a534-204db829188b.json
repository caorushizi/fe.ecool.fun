{
  "data": {
    "id": 1538,
    "exerciseKey": "01149afa-e389-4a9f-a534-204db829188b",
    "category": "QA",
    "renderType": "md",
    "title": "['10', '10', '10', '10', '10'].map(parseInt)",
    "desc": null,
    "options": null,
    "explanation": "## parseInt\n\n`parseInt()` 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。\n\n> const intValue = parseInt(string[, radix]);\n\n* `string` 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。\n\n* `radix` 一个介于2和36之间的整数(数学系统的基础)，表示上述字符串的基数。默认为10。\n\n* `返回值` 返回一个整数或NaN\n\n## map \n\n`map()` 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n```js\nvar new_array = arr.map(function callback(currentValue[,index[, array]]) {\n // Return element for new_array\n }[, thisArg])\n```\n\n可以看到callback回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。\n\n* currentValue 是callback 数组中正在处理的当前元素。\n* index可选, 是callback 数组中正在处理的当前元素的索引。\n* array可选, 是callback map 方法被调用的数组。\n* 另外还有thisArg可选, 执行 callback 函数时使用的this 值\n\n```js\nconst arr = [1, 2, 3];\narr.map((num) => num + 1); // [2, 3, 4]\n```\n\n## 题目分析\n\n回到真实的事例上：\n```js\n['1', '2', '3'].map(parseInt)\n```\n\n对于每个迭代map, parseInt()传递两个参数: 字符串和基数。\n\n所以实际执行的的代码是：\n\n```js\n['1', '2', '3'].map((item, index) => {\n    return parseInt(item, index)\n})\n```\n\n即返回的值分别为：\n\n```js\nparseInt('1', 0) // 1\nparseInt('2', 1) // NaN\nparseInt('3', 2) // NaN, 3 不是二进制\n```\n\n所以：\n\n```js\n['1', '2', '3'].map(parseInt)\n// 1, NaN, NaN\n```\n\n再回到我们的题目，很明显答案应该是：\n\n```js\n['10','10','10','10','10'].map(parseInt);\n// [10, NaN, 2, 3, 4]\n```\n\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-11-17T09:01:39.000Z",
    "updateAt": "2021-11-17T17:01:48.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 738,
    "prev": "01c20a11-d5c8-4e32-bbb2-a8d3a5da1961",
    "next": "fff79f62-47be-438a-83bf-6f81bcc0dfe9"
  },
  "post": {
    "exerciseKey": "01149afa-e389-4a9f-a534-204db829188b",
    "category": "QA",
    "title": "['10', '10', '10', '10', '10'].map(parseInt)",
    "level": 2,
    "updateAt": "2021-11-17T17:01:48+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}