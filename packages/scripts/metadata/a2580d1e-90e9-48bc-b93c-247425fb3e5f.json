{
  "data": {
    "id": 392,
    "exerciseKey": "a2580d1e-90e9-48bc-b93c-247425fb3e5f",
    "category": "QA",
    "renderType": "md",
    "title": "说说如何借助webpack来优化前端性能？",
    "desc": null,
    "options": null,
    "explanation": "## 一、背景\n\n随着前端的项目逐渐扩大，必然会带来的一个问题就是性能\n\n尤其在大型复杂的项目中，前端业务可能因为一个小小的数据依赖，导致整个页面卡顿甚至奔溃\n\n一般项目在完成后，会通过`webpack`进行打包，利用`webpack`对前端项目性能优化是一个十分重要的环节\n\n\n\n## 二、如何优化\n\n\n\n通过`webpack`优化前端的手段有：\n\n- JS代码压缩\n- CSS代码压缩\n- Html文件代码压缩\n- 文件大小压缩\n- 图片压缩\n- Tree Shaking\n- 代码分离\n- 内联 chunk\n\n\n\n### JS代码压缩\n\n`terser`是一个`JavaScript`的解释、绞肉机、压缩机的工具集，可以帮助我们压缩、丑化我们的代码，让`bundle`更小\n\n在`production`模式下，`webpack` 默认就是使用 `TerserPlugin` 来处理我们的代码的。如果想要自定义配置它，配置方法如下：\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin')\nmodule.exports = {\n    ...\n    optimization: {\n        minimize: true,\n        minimizer: [\n            new TerserPlugin({\n                parallel: true // 电脑cpu核数-1\n            })\n        ]\n    }\n}\n```\n\n属性介绍如下：\n\n-  extractComments：默认值为true，表示会将注释抽取到一个单独的文件中，开发阶段，我们可设置为 false ，不保留注释\n-  parallel：使用多进程并发运行提高构建的速度，默认值是true，并发运行的默认数量： os.cpus().length - 1\n-  terserOptions：设置我们的terser相关的配置：\n   - compress：设置压缩相关的选项，mangle：设置丑化相关的选项，可以直接设置为true\n   - mangle：设置丑化相关的选项，可以直接设置为true\n   - toplevel：底层变量是否进行转换\n   - keep_classnames：保留类的名称\n   - keep_fnames：保留函数的名称\n\n\n\n### CSS代码压缩\n\n`CSS`压缩通常是去除无用的空格等，因为很难去修改选择器、属性的名称、值等\n\nCSS的压缩我们可以使用另外一个插件：`css-minimizer-webpack-plugin`\n\n```cmd\nnpm install css-minimizer-webpack-plugin -D\n```\n\n配置方法如下：\n\n```js\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')\nmodule.exports = {\n    // ...\n    optimization: {\n        minimize: true,\n        minimizer: [\n            new CssMinimizerPlugin({\n                parallel: true\n            })\n        ]\n    }\n}\n```\n\n\n\n\n\n### Html文件代码压缩\n\n使用`HtmlWebpackPlugin`插件来生成`HTML`的模板时候，通过配置属性`minify`进行`html`优化\n\n```js\nmodule.exports = {\n    ...\n    plugin:[\n        new HtmlwebpackPlugin({\n            ...\n            minify:{\n                minifyCSS:false, // 是否压缩css\n                collapseWhitespace:false, // 是否折叠空格\n                removeComments:true // 是否移除注释\n            }\n        })\n    ]\n}\n```\n\n设置了`minify`，实际会使用另一个插件`html-minifier-terser`\n\n\n\n### 文件大小压缩\n\n对文件的大小进行压缩，减少`http`传输过程中宽带的损耗\n\n```js\nnpm install compression-webpack-plugin -D\n```\n\n```js\nnew ComepressionPlugin({\n    test:/\\.(css|js)$/,  // 哪些文件需要压缩\n    threshold:500, // 设置文件多大开始压缩\n    minRatio:0.7, // 至少压缩的比例\n    algorithm:\"gzip\", // 采用的压缩算法\n})\n```\n\n\n\n\n\n### 图片压缩\n\n一般来说在打包之后，一些图片文件的大小是远远要比 `js` 或者 `css` 文件要来的大，所以图片压缩较为重要\n\n配置方法如下：\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.(png|jpg|gif)$/,\n      use: [\n        {\n          loader: 'file-loader',\n          options: {\n            name: '[name]_[hash].[ext]',\n            outputPath: 'images/',\n          }\n        },\n        {\n          loader: 'image-webpack-loader',\n          options: {\n            // 压缩 jpeg 的配置\n            mozjpeg: {\n              progressive: true,\n              quality: 65\n            },\n            // 使用 imagemin**-optipng 压缩 png，enable: false 为关闭\n            optipng: {\n              enabled: false,\n            },\n            // 使用 imagemin-pngquant 压缩 png\n            pngquant: {\n              quality: '65-90',\n              speed: 4\n            },\n            // 压缩 gif 的配置\n            gifsicle: {\n              interlaced: false,\n            },\n            // 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式\n            webp: {\n              quality: 75\n            }\n          }\n        }\n      ]\n    },\n  ]\n} \n```\n\n\n\n\n\n### Tree Shaking\n\n`Tree Shaking` 是一个术语，在计算机中表示消除死代码，依赖于`ES Module`的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）\n\n在`webpack`实现`Trss shaking`有两种不同的方案：\n\n- usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的\n- sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用\n\n两种不同的配置方案， 有不同的效果\n\n\n\n#### usedExports\n\n配置方法也很简单，只需要将`usedExports`设为`true`\n\n```js\nmodule.exports = {\n    ...\n    optimization:{\n        usedExports\n    }\n}\n```\n\n使用之后，没被用上的代码在`webpack`打包中会加入`unused harmony export mul`注释，用来告知 `Terser` 在优化时，可以删除掉这段代码\n\n 如下面`sum`函数没被用到，`webpack`打包会添加注释，`terser`在优化时，则将该函数去掉\n\n ![](https://static.ecool.fun//article/f8754a88-bb08-4d81-9a12-e7621cd74abf.png)\n\n\n\n\n\n#### sideEffects\n\n`sideEffects`用于告知`webpack compiler`哪些模块时有副作用，配置方法是在`package.json`中设置`sideEffects`属性\n\n如果`sideEffects`设置为false，就是告知`webpack`可以安全的删除未用到的`exports`\n\n如果有些文件需要保留，可以设置为数组的形式\n\n```js\n\"sideEffecis\":[    \"./src/util/format.js\",    \"*.css\" // 所有的css文件]\n```\n\n\n\n上述都是关于`javascript`的`tree shaking`，`css`同样也能够实现`tree shaking`\n\n#### css tree shaking\n\n`css`进行`tree shaking`优化可以安装`PurgeCss`插件\n\n```cmd\nnpm install purgecss-plugin-webpack -D\n```\n\n```js\nconst PurgeCssPlugin = require('purgecss-webpack-plugin')module.exports = {    ...    plugins:[        new PurgeCssPlugin({            path:glob.sync(`${path.resolve('./src')}/**/*`), {nodir:true}// src里面的所有文件            satelist:function(){                return {                    standard:[\"html\"]                }            }        })    ]}\n```\n\n- paths：表示要检测哪些目录下的内容需要被分析，配合使用glob\n- 默认情况下，Purgecss会将我们的html标签的样式移除掉，如果我们希望保留，可以添加一个safelist的属性\n\n\n\n### 代码分离\n\n将代码分离到不同的`bundle`中，之后我们可以按需加载，或者并行加载这些文件\n\n默认情况下，所有的`JavaScript`代码（业务代码、第三方依赖、暂时没有用到的模块）在首页全部都加载，就会影响首页的加载速度\n\n代码分离可以分出出更小的`bundle`，以及控制资源加载优先级，提供代码的加载性能\n\n这里通过`splitChunksPlugin`来实现，该插件`webpack`已经默认安装和集成，只需要配置即可\n\n默认配置中，chunks仅仅针对于异步（async）请求，我们可以设置为initial或者all\n\n```js\nmodule.exports = {    ...    optimization:{        splitChunks:{            chunks:\"all\"        }    }}\n```\n\n`splitChunks`主要属性有如下：\n\n- Chunks，对同步代码还是异步代码进行处理\n- minSize： 拆分包的大小, 至少为minSize，如何包的大小不超过minSize，这个包不会拆分\n- maxSize： 将大于maxSize的包，拆分为不小于minSize的包\n- minChunks：被引入的次数，默认是1\n\n\n\n### 内联chunk\n\n可以通过`InlineChunkHtmlPlugin`插件将一些`chunk`的模块内联到`html`，如`runtime`的代码（对模块进行解析、加载、模块信息相关的代码），代码量并不大，但是必须加载的\n\n```js\nconst InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin')const HtmlWebpackPlugin = require('html-webpack-plugin')module.exports = {    ...    plugin:[        new InlineChunkHtmlPlugin(HtmlWebpackPlugin,[/runtime.+\\.js/]}\n```\n\n\n\n\n\n### 三、总结\n\n关于`webpack`对前端性能的优化，可以通过文件体积大小入手，其次还可通过分包的形式、减少http请求次数等方式，实现对前端性能的优化\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2.5,
    "appId": 7,
    "createAt": "2021-07-05T15:34:06.000Z",
    "updateAt": "2024-08-10T17:05:10.000Z",
    "isCollected": false,
    "currentIndex": 1108,
    "filterTotalNum": 1487,
    "prev": "4cf47e01-92e5-4e04-ab83-f4eca1953e23",
    "next": "03d5dfc7-9bb9-4129-9145-b4da4d4fa11f"
  },
  "post": {
    "exerciseKey": "a2580d1e-90e9-48bc-b93c-247425fb3e5f",
    "category": "QA",
    "title": "说说如何借助webpack来优化前端性能？",
    "level": 2.5,
    "createAt": "2021-07-05T15:34:06+00:00",
    "updateAt": "2024-08-10T17:05:10+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 58
  }
}