{
  "data": {
    "id": 1862,
    "exerciseKey": "e87bce7c-af1c-41f3-ae56-142be0e3c999",
    "category": "QA",
    "renderType": "md",
    "title": "怎么触发BFC，BFC有什么应用场景？",
    "desc": null,
    "options": null,
    "explanation": "## 文档流\n\n在介绍BFC之前，需要先给大家介绍一下文档流。\n\n我们常说的文档流其实分为`定位流`、`浮动流`、`普通流`三种。\n\n## 绝对定位(Absolute positioning)\n\n如果元素的属性 `position` 为 `absolute` 或 `fixed`，它就是一个绝对定位元素。\n\n在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。\n\n它的定位相对于它的包含块，相关CSS属性：`top`、`bottom`、`left`、`right`；\n\n对于 `position: absolute`，元素定位将相对于上级元素中最近的一个`relative、fixed、absolute`，如果没有则相对于body；\n\n对于 `position:fixed`，正常来说是相对于浏览器窗口定位的，但是当**元素祖先的 `transform` 属性非 `none` 时，会相对于该祖先进行定位**。\n\n## 浮动 (float)\n\n在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。\n\n## 普通流 (normal flow)\n\n普通流其实就是指BFC中的FC。FC(`Formatting Context`)，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。\n\n在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行。块级元素则会被渲染为完整的一个新行。\n\n除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。\n\n## BFC 概念\n\n先看下MDN上关于BFC的定义：\n\n> 块格式化上下文（`Block Formatting Context`，`BFC`） 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n\n具有 `BFC` 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 `BFC` 具有普通容器所没有的一些特性。\n\n通俗一点来讲，可以把 `BFC` 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。\n\n除了 BFC，还有：\n\n* `IFC`（行级格式化上下文）- `inline` 内联\n* `GFC`（网格布局格式化上下文）- `display: grid`\n* `FFC`（自适应格式化上下文）- `display: flex`或`display: inline-flex`\n\n**注意**：同一个元素不能同时存在于两个 `BFC` 中。\n\n## BFC的触发方式\n\nMDN上对于[BFC的触发条件](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)写的很多，总结一下常见的触发方式有（只需要满足一个条件即可触发 BFC 的特性）：\n\n* 根元素，即 `<html>`\n* 浮动元素：`float` 值为 `left` 、`right`\n* `overflow` 值不为 `visible`，即为 `auto`、`scroll`、`hidden`\n* `display` 值为 `inline-block`、`table-cell`、`table-caption`、`table`、`inline-table`、`flex`、`inline-flex`、`grid`、`inline-grid`\n* 绝对定位元素：`position` 值为 `absolute`、`fixed`\n\n## BFC的特性\n\n* BFC 是页面上的一个独立容器，容器里面的子元素不会影响外面的元素。\n* BFC 内部的块级盒会在垂直方向上一个接一个排列\n* 同一 BFC 下的相邻块级元素可能发生外边距折叠，创建新的 BFC 可以避免外边距折叠\n* 每个元素的外边距盒（`margin box`）的左边与包含块边框盒（`border box`）的左边相接触（从右向左的格式的话，则相反），即使存在浮动\n* 浮动盒的区域不会和 BFC 重叠\n* 计算 BFC 的高度时，浮动元素也会参与计算\n\n## 应用\n\nBFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。我们可以利用BFC的这个特性来做很多事。\n\n### 自适应两列布局\n\n左列浮动（定宽或不定宽都可以），给右列开启 BFC。\n\n```html\n<div>\n    <div class=\"left\">浮动元素，无固定宽度</div>\n    <div class=\"right\">自适应</div>\n</div>\n```\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n}\n.left {\n    float: left;\n    height: 200px;\n    margin-right: 10px;\n    background-color: red;\n}\n.right {\n    overflow: hidden;\n    height: 200px;\n    background-color: yellow;\n}\n```\n\n效果：\n![](https://static.ecool.fun//article/56dfc6e4-a6bd-4b57-a4ad-74611753ac45.jpeg)\n\n* 将左列设为左浮动，将自身高度塌陷，使得其它块级元素可以和它占据同一行的位置。\n* 右列为 div 块级元素，利用其自身的流特性占满整行。\n* 右列设置overflow: hidden,触发 BFC 特性，使其自身与左列的浮动元素隔离开，不占满整行。\n\n这即是上面说的 BFC 的特性之一：**浮动盒的区域不会和 BFC 重叠**\n\n### 防止外边距（margin）重叠\n\n兄弟元素之间的外边距重叠\n\n```html\n<div>\n    <div class=\"child1\"></div>\n    <div class=\"child2\"></div>\n</div>\n```\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n}\n.child1 {\n    width: 100px;\n    height: 100px;\n    margin-bottom: 10px;\n    background-color: red;\n}\n.child2 {\n    width: 100px;\n    height: 100px;\n    margin-top: 20px;\n    background-color: green;\n}\n```\n\n效果：\n![](https://static.ecool.fun//article/c1cf8faf-19df-4ba6-92e4-60eb0dbd5b2b.jpeg)\n\n两个块级元素，红色 div 距离底部 10px，绿色 div 距离顶部 20px，按道理应该两个块级元素相距 30px 才对，但实际却是取距离较大的一个，即 20px。\n\n> 块级元素的上外边距和下外边距有时会合并（或折叠）为一个外边距，其大小取其中的较大者，这种行为称为外边距折叠（重叠），注意这个是发生在属于同一 BFC 下的块级元素之间\n\n根据 BFC 特性，创建一个新的 BFC 就不会发生 margin 折叠了。比如我们在他们两个 div 外层再包裹一层容器，加属性 `overflow: hidden`，触发 BFC，那么两个 div 就不属于同个 BFC 了。\n\n```html\n<div>\n    <div class=\"parent\">\n        <div class=\"child1\"></div>\n    </div>\n    <div class=\"parent\">\n        <div class=\"child2\"></div>\n    </div>\n</div>\n```\n\n```css\n.parent {\n    overflow: hidden;\n}\n\n/* ... */\n```\n\n![](https://static.ecool.fun//article/33e4f6b9-cb06-497a-b6f5-60e531cd65e7.jpeg)\n\n这个关于兄弟元素外边距叠加的问题，除了触发 BFC 也有其他方案，比如你统一只用上边距或下边距，就不会有上面的问题。\n\n### 父子元素的外边距重叠\n\n这种情况存在父元素与其第一个或最后一个子元素之间（嵌套元素）。\n\n如果在父元素与其第一个/最后一个子元素之间不存在边框、内边距、行内内容，也没有创建块格式化上下文、或者清除浮动将两者的外边距 分开，此时子元素的外边距会“溢出”到父元素的外面。\n\n```html\n<div id=\"parent\">\n  <div id=\"child\"></div>\n</div>\n```\n```css\n* {\n    margin: 0;\n    padding: 0;\n}\n#parent {\n    width: 200px;\n    height: 200px;\n    background-color: green;\n    margin-top: 20px;\n}\n#child {\n    width: 100px;\n    height: 100px;\n    background-color: red;\n    margin-top: 30px;\n}\n```\n\n![](https://static.ecool.fun//article/cf07826a-d756-49cf-a090-0e5deb9f729a.jpeg)\n\n如上图，红色的 div 在绿色的 div 内部，且设置了 `margin-top` 为 30px，但我们发现红色 div 的顶部与绿色 div 顶部重合，并没有距离顶部 30px，而是溢出到父元素的外面计算。即本来父元素距离顶部只有 20px，被子元素溢出影响，外边距重叠，取较大的值，则距离顶部 30px。\n\n解决办法：\n* 给父元素触发 BFC（如添加overflow: hidden）\n* 给父元素添加 border\n* 给父元素添加 padding\n\n这样就能实现我们期望的效果了：\n![](https://static.ecool.fun//article/a0b5e69f-dc00-41dd-9aca-7feac4ea33b3.jpeg)\n\n### 清除浮动解决令父元素高度坍塌的问题\n\n当容器内子元素设置浮动时，脱离了文档流，容器中总父元素高度只有边框部分高度。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n* {\n    margin: 0;\n    padding: 0;\n}\n.parent {\n    border: 4px solid red;\n}\n.child {\n    float: left;\n    width: 200px;\n    height: 200px;\n    background-color: blue;\n}\n```\n\n![](https://static.ecool.fun//article/76238cb3-62a5-466e-b9b5-6706ca911c9f.jpeg)\n\n解决办法：给父元素触发 BFC，使其有 BFC 特性：**计算 BFC 的高度时，浮动元素也会参与计算** \n\n```css\n.parent {\n    overflow: hidden;\n    border: 4px solid red;\n}\n```\n\n![](https://static.ecool.fun//article/e98368e4-45a8-4edb-bfbf-e6ef722fef2c.jpeg)\n\n上面我们都是用的 `overflow: hidden` 触发 BFC，因为确实常用，但是触发 BFC 也不止是只有这一种方法。\n\n如上面写的所示，可以设置`float: left;`，`float: right;`，`display: inline-block;`，`overflow: auto;`，`display: flex;`，`display: table;`，`position` 为 `absolute` 或 `fixed` 等等，这些都可以触发，不过父元素宽度表现不一定相同，但父元素高度都被撑出来了。\n\n当然实际运用可不是随便挑一个走，还是根据场景选择。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-07-24T03:33:38.000Z",
    "updateAt": "2023-12-19T11:29:19.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 215,
    "prev": "97eb452e-5d81-4758-b6f2-027dcf43027c",
    "next": "c1480af9-8901-495f-8a26-f6c5e530a6a2"
  },
  "post": {
    "exerciseKey": "e87bce7c-af1c-41f3-ae56-142be0e3c999",
    "category": "QA",
    "title": "怎么触发BFC，BFC有什么应用场景？",
    "level": 3,
    "updateAt": "2023-12-19T11:29:19+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 90
  }
}
