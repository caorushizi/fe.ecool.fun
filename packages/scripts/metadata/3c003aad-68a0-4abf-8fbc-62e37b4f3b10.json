{
  "data": {
    "id": 1702,
    "exerciseKey": "3c003aad-68a0-4abf-8fbc-62e37b4f3b10",
    "category": "QA",
    "renderType": "md",
    "title": "flexible.js实现移动端适配的原理是什么？",
    "desc": null,
    "options": null,
    "explanation": "> flexible.js 官方已不再维护，目前推行 vw 适配方案，本答案只是为了分析它的原理。\n\nflexible.js存在的目的，是为了让网页在各终端上的展示效果就像缩放设计稿图片一样，在不同屏幕上等比缩放，每一个元素与整体比例保持不变，真实还原设计稿。\n\n# 基本原理\n\n设页面宽度为P（单位px）\n\n设计稿宽度为750px\n\n设html基准值为X（单位px）\n\n----\n\n首先将页面分为100份，份的单位为F\n\n设1F的像素值为A（单位px/F）\n\n那么：\n\nP = 100F * A\n\nA = P/100F\n\n当P为750时，A=7.5px/F，即一份为7.5px\n\n有没有感觉这个A有点熟悉，没错它就是X，上面份的单位F其实就是rem。\n\n（html font-size的基准值单位虽然写为px，但其实是px/F，这点你知道就可以了）\n\n现在懂了吧。\n\nrem的原理就是份，我们根据设计稿得到元素的份，写到代码中的也是份，现在只要动态改变html的基准值，就能够在不同屏幕下适配，从而还原设计稿尺寸了。\n\n所以flexible.js的原理主要是：\n\nwindow.onresize = function() {\n\thtml.size = P/100 + 'px'\n}\n\n当然针对高清屏，它还会设置“viewport scale”，以缩放页面，解决类似高清屏下无法实现1px边框等问题。\n\n需要注意的是，基准值其实是个动态值，只是在写代码时，我们是按照设计稿宽度计算的基准值写的rem，即以设计稿为标准进行屏幕适配的（将设计稿用代码还原成UI界面），但在实际运行时，页面宽度是动态的，所以基准值也是动态的哦。\n\n\n# 源码解析\n\nflexible.js 的源码并不多，总共不到 50 行：\n\n```js\n// 首先是一个立即执行函数，执行时传入的参数是window和document\n(function flexible (window, document) {\n  var docEl = document.documentElement // 返回文档的root元素\n  var dpr = window.devicePixelRatio || 1 \n  // 获取设备的dpr，即当前设置下物理像素与虚拟像素的比值\n\n  // 调整body标签的fontSize，fontSize = (12 * dpr) + 'px'\n  // 设置默认字体大小，默认的字体大小继承自body\n  function setBodyFontSize () {\n    if (document.body) {\n      document.body.style.fontSize = (12 * dpr) + 'px'\n    } else {\n      document.addEventListener('DOMContentLoaded', setBodyFontSize)\n    }\n  }\n  setBodyFontSize();\n\n  // set 1rem = viewWidth / 10\n  // 设置root元素的fontSize = 其clientWidth / 10 + ‘px’\n  function setRemUnit () {\n    var rem = docEl.clientWidth / 10\n    docEl.style.fontSize = rem + 'px'\n  }\n\n  setRemUnit()\n\n  // 当页面展示或重新设置大小的时候，触发重新\n  window.addEventListener('resize', setRemUnit)\n  window.addEventListener('pageshow', function (e) {\n    if (e.persisted) {\n      setRemUnit()\n    }\n  })\n\n  // 检测0.5px的支持，支持则root元素的class中有hairlines\n  if (dpr >= 2) {\n    var fakeBody = document.createElement('body')\n    var testElement = document.createElement('div')\n    testElement.style.border = '.5px solid transparent'\n    fakeBody.appendChild(testElement)\n    docEl.appendChild(fakeBody)\n    if (testElement.offsetHeight === 1) {\n      docEl.classList.add('hairlines')\n    }\n    docEl.removeChild(fakeBody)\n  }\n}(window, document))\n```\n\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-03-20T13:52:04.000Z",
    "updateAt": "2022-03-20T21:52:10.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 590,
    "prev": "bab18dbe-9168-4ef5-a1d7-e063a762cf50",
    "next": "025af56b-5ff8-4da3-9a86-b889693a596f"
  },
  "post": {
    "exerciseKey": "3c003aad-68a0-4abf-8fbc-62e37b4f3b10",
    "category": "QA",
    "title": "flexible.js实现移动端适配的原理是什么？",
    "level": 3,
    "updateAt": "2022-03-20T21:52:10+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}