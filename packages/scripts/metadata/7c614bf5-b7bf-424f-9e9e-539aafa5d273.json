{
  "data": {
    "id": 641,
    "exerciseKey": "7c614bf5-b7bf-424f-9e9e-539aafa5d273",
    "category": "QA",
    "renderType": "md",
    "title": "说说Git常用的命令有哪些？",
    "desc": null,
    "options": null,
    "explanation": "## 一、前言\n\n`git `的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可\n\n ![](https://static.ecool.fun//article/98f23790-a850-4745-a6ba-eaeead51f621.png)\n\n实际上，如果想要熟练使用，超过60多个命令需要了解，下面则介绍下常见的的`git `命令\n\n\n\n## 二、有哪些\n\n\n\n\n\n## 配置\n\n`Git `自带一个 `git config` 的工具来帮助设置控制 `Git `外观和行为的配置变量，在我们安装完`git`之后，第一件事就是设置你的用户名和邮件地址\n\n后续每一个提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改\n\n设置提交代码时的用户信息命令如下：\n\n- git config [--global] user.name \"[name]\" \n- git config [--global] user.email \"[email address]\"\n\n\n\n\n\n### 启动\n\n一个`git`项目的初始有两个途径，分别是：\n\n- git init [project-name]：创建或在当前目录初始化一个git代码库\n- git clone url：下载一个项目和它的整个代码历史\n\n\n\n### 日常基本操作\n\n在日常工作中，代码常用的基本操作如下：\n\n- git init 初始化仓库，默认为 master 分支\n- git add . 提交全部文件修改到缓存区\n- git add <具体某个文件路径+全名> 提交某些文件到缓存区\n- git diff  查看当前代码 add后，会 add 哪些内容\n- git diff --staged查看现在 commit 提交后，会提交哪些内容\n- git status 查看当前分支状态\n- git pull <远程仓库名> <远程分支名> 拉取远程仓库的分支与本地当前分支合并\n- git pull <远程仓库名> <远程分支名>:<本地分支名> 拉取远程仓库的分支与本地某个分支合并\n- git commit -m \"<注释>\" 提交代码到本地仓库，并写提交注释\n- git commit -v 提交时显示所有diff信息\n- git commit --amend [file1] [file2] 重做上一次commit，并包括指定文件的新变化\n\n关于提交信息的格式，可以遵循以下的规则：\n\n- feat: 新特性，添加功能\n- fix: 修改 bug\n- refactor: 代码重构\n- docs: 文档修改\n- style: 代码格式修改, 注意不是 css 修改\n- test: 测试用例修改\n- chore: 其他修改, 比如构建流程, 依赖管理\n\n\n\n### 分支操作\n\n- git branch 查看本地所有分支\n- git branch -r 查看远程所有分支\n- git branch -a 查看本地和远程所有分支\n- git merge <分支名> 合并分支\n- git merge --abort 合并分支出现冲突时，取消合并，一切回到合并前的状态\n- git branch <新分支名> 基于当前分支，新建一个分支\n- git checkout --orphan <新分支名> 新建一个空分支（会保留之前分支的所有文件）\n- git branch -D <分支名> 删除本地某个分支\n- git push <远程库名> :<分支名> 删除远程某个分支\n- git branch <新分支名称> <提交ID> 从提交历史恢复某个删掉的某个分支\n- git branch -m <原分支名> <新分支名> 分支更名\n- git checkout <分支名> 切换到本地某个分支\n- git checkout <远程库名>/<分支名> 切换到线上某个分支\n- git checkout -b <新分支名> 把基于当前分支新建分支，并切换为这个分支\n\n\n\n\n\n### 远程同步\n\n远程操作常见的命令：\n\n- git fetch [remote] 下载远程仓库的所有变动\n- git remote -v 显示所有远程仓库\n- git pull [remote] [branch] 拉取远程仓库的分支与本地当前分支合并\n- git fetch 获取线上最新版信息记录，不合并\n- git push [remote] [branch] 上传本地指定分支到远程仓库\n- git push [remote] --force 强行推送当前分支到远程仓库，即使有冲突\n- git push [remote] --all 推送所有分支到远程仓库\n\n\n\n### 撤销\n\n- git checkout [file] 恢复暂存区的指定文件到工作区\n- git checkout [commit] [file]  恢复某个commit的指定文件到暂存区和工作区\n- git checkout . 恢复暂存区的所有文件到工作区\n- git reset [commit] 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n- git reset --hard 重置暂存区与工作区，与上一次commit保持一致\n- git reset [file] 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n- git revert [commit]  后者的所有变化都将被前者抵消，并且应用到当前分支\n\n> `reset`：真实硬性回滚，目标版本后面的提交记录全部丢失了\n>\n> `revert`：同样回滚，这个回滚操作相当于一个提价，目标版本后面的提交记录也全部都有\n\n\n\n### 存储操作\n\n你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作，但又不想提交这些杂乱的代码，这时候可以将代码进行存储\n\n- git stash 暂时将未提交的变化移除\n- git stash pop 取出储藏中最后存入的工作状态进行恢复，会删除储藏\n\n- git stash list 查看所有储藏中的工作\n- git stash apply <储藏的名称>  取出储藏中对应的工作状态进行恢复，不会删除储藏\n- git stash clear 清空所有储藏中的工作\n- git stash drop <储藏的名称>  删除对应的某个储藏\n\n\n\n## 三、总结\n\n`git`常用命令速查表如下所示：\n\n ![](https://static.ecool.fun//article/83795767-fa75-41b6-b85c-e858547451be.png)\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T03:38:29.000Z",
    "updateAt": "2024-01-25T19:21:38.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 74,
    "prev": "51f3a49c-32aa-432a-bc14-eaba466d9d12",
    "next": "d462f484-bcf7-4109-a4c0-c77fb2ed74de"
  },
  "post": {
    "exerciseKey": "7c614bf5-b7bf-424f-9e9e-539aafa5d273",
    "category": "QA",
    "title": "说说Git常用的命令有哪些？",
    "level": 2,
    "updateAt": "2024-01-25T19:21:38+00:00"
  },
  "tag": {
    "id": 29,
    "tagName": "工具",
    "type": "1",
    "exerciseCount": 30
  }
}
