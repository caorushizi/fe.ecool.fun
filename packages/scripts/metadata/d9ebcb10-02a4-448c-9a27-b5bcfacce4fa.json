{
  "data": {
    "id": 2408,
    "exerciseKey": "d9ebcb10-02a4-448c-9a27-b5bcfacce4fa",
    "category": "QA",
    "renderType": "md",
    "title": "为什么 webpack 可以通过文件打包，让浏览器可以支持 CommonJS 规范？",
    "desc": "",
    "options": "",
    "explanation": "尽管浏览器本身不直接支持 CommonJS 模块规范，Webpack 通过以下步骤将模块化的代码打包成浏览器可以读取的格式：\n\n### 1. **解析依赖**\n\nWebpack 会解析项目中所有的模块及其依赖关系。它会从入口文件开始，递归地分析所有导入的模块（`import` 或 `require`），构建出一个完整的依赖图（dependency graph）。\n\n### 2. **转换模块**\n\nWebpack 使用加载器（loaders）将不同类型的文件（如 JavaScript、CSS、图片等）转换成浏览器可以理解的格式。例如，使用 Babel 将 ES6+ 代码转换为兼容的 ES5 代码，或者将 SCSS 转换为 CSS。\n\n### 3. **打包模块**\n\nWebpack 将所有模块和它们的依赖关系打包成一个或多个文件。为了实现这一点，它会将所有模块的代码合并到一个输出文件中，通常是一个或多个 JavaScript 文件。\n\n### 4. **封装模块**\n\n为了使浏览器能够理解这些模块，Webpack 会将模块封装在一个自执行的函数中，并将模块代码转换成一个浏览器可以执行的格式。这包括：\n\n- **定义模块**：将每个模块的代码包裹在一个匿名函数中，并将模块暴露为一个对象或函数。\n- **管理模块加载**：使用一个模块加载器（如 Webpack 自带的 `__webpack_require__` 函数）来处理模块之间的依赖关系和加载。\n\n### 5. **生成输出**\n\nWebpack 将打包好的代码输出为一个或多个 JavaScript 文件。这些文件包含了所有的模块和依赖关系，以确保浏览器可以加载并执行模块化的代码。\n\n### **示例**\n\n假设有两个模块：`math.js` 和 `app.js`。\n\n**math.js**:\n```javascript\nexport function add(a, b) {\n  return a + b;\n}\n```\n\n**app.js**:\n```javascript\nimport { add } from './math';\nconsole.log(add(1, 2));\n```\n\nWebpack 会将这些模块打包成一个文件，类似于：\n\n```javascript\n(function(modules) {\n  // Webpack 自定义的 require 函数\n  function __webpack_require__(moduleId) {\n    var module = { exports: {} };\n    modules[moduleId](module, module.exports, __webpack_require__);\n    return module.exports;\n  }\n\n  // 入口点\n  __webpack_require__(0);\n})({\n  // 模块定义\n  0: function(module, exports, __webpack_require__) {\n    var add = __webpack_require__(1).add;\n    console.log(add(1, 2));\n  },\n  1: function(module, exports) {\n    function add(a, b) {\n      return a + b;\n    }\n    exports.add = add;\n  }\n});\n```",
    "pivot": "",
    "vipLimit": 1,
    "level": 3.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-09-03T01:40:50.000Z",
    "isCollected": false,
    "currentIndex": 227,
    "filterTotalNum": 1487,
    "prev": "e902d336-e2dd-4de7-a471-16806c695aa9",
    "next": "0d218a9a-7477-48b0-b592-2e1f501668e7"
  },
  "post": {
    "exerciseKey": "d9ebcb10-02a4-448c-9a27-b5bcfacce4fa",
    "category": "QA",
    "title": "为什么 webpack 可以通过文件打包，让浏览器可以支持 CommonJS 规范？",
    "level": 3.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-09-03T01:40:50+00:00"
  },
  "tag": {
    "id": 28,
    "tagName": "工程化",
    "type": "1",
    "exerciseCount": 58
  }
}