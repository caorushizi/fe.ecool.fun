{
  "data": {
    "id": 235,
    "exerciseKey": "a0c75651-7e44-437d-9f1f-38775698091b",
    "category": "QA",
    "renderType": "md",
    "title": "Vue中的$nextTick有什么作用？",
    "desc": null,
    "options": null,
    "explanation": "## 一、NextTick是什么\n\n官方对其的定义\n\n> 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n\n什么意思呢？\n\n我们可以理解成，`Vue` 在更新 `DOM` 时是异步执行的。当数据发生变化，`Vue`将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新\n\n举例一下\n\n`Html`结构\n\n```html\n<div id=\"app\"> {{ message }} </div>\n```\n\n构建一个`vue`实例\n\n```js\nconst vm = new Vue({\n  el: '#app',\n  data: {\n    message: '原始值'\n  }\n})\n```\n\n修改`message`\n\n```js\nthis.message = '修改后的值1'\nthis.message = '修改后的值2'\nthis.message = '修改后的值3'\n```\n\n这时候想获取页面最新的`DOM`节点，却发现获取到的是旧值\n\n```js\nconsole.log(vm.$el.textContent) // 原始值\n```\n\n这是因为`message`数据在发现变化的时候，`vue`并不会立刻去更新`Dom`，而是将修改数据的操作放在了一个异步操作队列中\n\n如果我们一直修改相同数据，异步操作队列还会进行去重\n\n等待同一事件循环中的所有数据变化完成之后，会将队列中的事件拿来进行处理，进行`DOM`的更新\n\n#### 为什么要有nexttick\n\n举个例子\n```js\n{{num}}\nfor(let i=0; i<100000; i++){\n    num = i\n}\n```\n如果没有 `nextTick` 更新机制，那么 `num` 每次更新值都会触发视图更新(上面这段代码也就是会更新10万次视图)，有了`nextTick`机制，只需要更新一次，所以`nextTick`本质是一种优化策略\n\n## 二、使用场景\n\n如果想要在修改数据后立刻得到更新后的`DOM`结构，可以使用`Vue.nextTick()`\n\n第一个参数为：回调函数（可以获取最近的`DOM`结构）\n\n第二个参数为：执行函数上下文\n\n```js\n// 修改数据\nvm.message = '修改后的值'\n// DOM 还没有更新\nconsole.log(vm.$el.textContent) // 原始的值\nVue.nextTick(function () {\n  // DOM 更新了\n  console.log(vm.$el.textContent) // 修改后的值\n})\n```\n\n组件内使用 `vm.$nextTick()` 实例方法只需要通过`this.$nextTick()`，并且回调函数中的 `this` 将自动绑定到当前的 `Vue` 实例上\n\n```js\nthis.message = '修改后的值'\nconsole.log(this.$el.textContent) // => '原始的值'\nthis.$nextTick(function () {\n    console.log(this.$el.textContent) // => '修改后的值'\n})\n```\n\n`$nextTick()` 会返回一个 `Promise` 对象，可以是用`async/await`完成相同作用的事情\n\n```js\nthis.message = '修改后的值'\nconsole.log(this.$el.textContent) // => '原始的值'\nawait this.$nextTick()\nconsole.log(this.$el.textContent) // => '修改后的值'\n```\n\n## 三、实现原理\n\n\n\n源码位置：`/src/core/util/next-tick.js`\n\n`callbacks`也就是异步操作队列\n\n`callbacks`新增回调函数后又执行了`timerFunc`函数，`pending`是用来标识同一个时间只能执行一次\n\n```js\nexport function nextTick(cb?: Function, ctx?: Object) {\n  let _resolve;\n\n  // cb 回调函数会经统一处理压入 callbacks 数组\n  callbacks.push(() => {\n    if (cb) {\n      // 给 cb 回调函数执行加上了 try-catch 错误处理\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n\n  // 执行异步延迟函数 timerFunc\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n\n  // 当 nextTick 没有传入函数参数的时候，返回一个 Promise 化的调用\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve;\n    });\n  }\n}\n```\n\n`timerFunc`函数定义，这里是根据当前环境支持什么方法则确定调用哪个，分别有：\n\n`Promise.then`、`MutationObserver`、`setImmediate`、`setTimeout`\n\n通过上面任意一种方法，进行降级操作\n\n```js\nexport let isUsingMicroTask = false\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  //判断1：是否原生支持Promise\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  //判断2：是否原生支持MutationObserver\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  //判断3：是否原生支持setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  //判断4：上面都不行，直接用setTimeout\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n\n无论是微任务还是宏任务，都会放到`flushCallbacks`使用\n\n这里将`callbacks`里面的函数复制一份，同时`callbacks`置空\n\n依次执行`callbacks`里面的函数\n\n```js\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n**小结：**\n\n1. 把回调函数放入callbacks等待执行\n2. 将执行函数放到微任务或者宏任务中\n3. 事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:38:21.000Z",
    "updateAt": "2024-08-10T17:04:41.000Z",
    "isCollected": false,
    "currentIndex": 1264,
    "filterTotalNum": 1487,
    "prev": "c1bcc1f1-3375-4c66-b3af-1ba1b937c01f",
    "next": "a88670ef-a898-4676-a272-cabf8bdfade7"
  },
  "post": {
    "exerciseKey": "a0c75651-7e44-437d-9f1f-38775698091b",
    "category": "QA",
    "title": "Vue中的$nextTick有什么作用？",
    "level": 2,
    "createAt": "2021-07-04T03:38:21+00:00",
    "updateAt": "2024-08-10T17:04:41+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 97
  }
}