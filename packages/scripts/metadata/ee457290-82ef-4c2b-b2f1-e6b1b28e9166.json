{
  "data": {
    "id": 561,
    "exerciseKey": "ee457290-82ef-4c2b-b2f1-e6b1b28e9166",
    "category": "QA",
    "renderType": "md",
    "title": "如何中断Promise？",
    "desc": null,
    "options": null,
    "explanation": "Promise 有个缺点就是一旦创建就无法取消，所以本质上 Promise 是无法被终止的，但我们在开发过程中可能会遇到下面两个需求：\n\n* 中断调用链\n\n就是在某个 then/catch 执行之后，不想让后续的链式调用继续执行了。\n\n```\nsomePromise\n  .then(() => {})\n  .then(() => {\n    // 终止 Promise 链，让下面的 then、catch 和 finally 都不执行\n  })\n  .then(() => console.log('then'))\n  .catch(() => console.log('catch'))\n  .finally(() => console.log('finally'))\n```\n\n一种方法是在then中直接抛错, 这样就不会执行后面的then, 直接跳到catch方法打印err(但此方法并没有实际中断)。但如果链路中对错误进行了捕获，后面的then函数还是会继续执行。\n\nPromise的then方法接收两个参数：\n```javascript\nPromise.prototype.then(onFulfilled, onRejected)\n```\n\n若onFulfilled或onRejected是一个函数，当函数返回一个新Promise对象时，原Promise对象的状态将跟新对象保持一致，详见Promises/A+标准。\n\n因此，当新对象保持“pending”状态时，原Promise链将会中止执行。\n\n```javascript\nPromise.resolve().then(() => {\n    console.log('then 1')\n    return new Promise(() => {})\n}).then(() => {\n    console.log('then 2')\n}).then(() => {\n    console.log('then 3')\n}).catch((err) => {\n    console.log(err)\n})\n```\n\n* 中断Promise\n\n注意这里是中断而不是终止，因为 Promise 无法终止，这个中断的意思是：在合适的时候，把 pending 状态的 promise 给 reject 掉。例如一个常见的应用场景就是希望给网络请求设置超时时间，一旦超时就就中断，我们这里用定时器模拟一个网络请求，随机 3 秒之内返回。\n\n```javascript\nfunction timeoutWrapper(p, timeout = 2000) {\n  const wait = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject('请求超时')\n    }, timeout)\n  })\n  return Promise.race([p, wait])\n}\n```\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-31T08:51:43.000Z",
    "updateAt": "2021-08-01T15:34:49.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 809,
    "prev": "d1d9bc22-287a-4fb0-9860-51fb461006de",
    "next": "adfb6812-fe80-4875-ae6f-bbcaab8e1a9e"
  },
  "post": {
    "exerciseKey": "ee457290-82ef-4c2b-b2f1-e6b1b28e9166",
    "category": "QA",
    "title": "如何中断Promise？",
    "level": 3,
    "updateAt": "2021-08-01T15:34:49+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}