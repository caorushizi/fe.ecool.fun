{
  "data": {
    "id": 1914,
    "exerciseKey": "53de0582-783d-490b-b7ca-7a20e9d13cb8",
    "category": "QA",
    "renderType": "md",
    "title": "如何判断某个字符串长度（要求支持表情）？",
    "desc": "",
    "options": null,
    "explanation": "大家看到题目，可能首先想到的是 `str.length` 获取字符串的长度。\n\n其实 JS 中的字符串长度是个奇怪的设定，很多编程语言，获取字符串的长度是得到字节长度，比如一个正常的汉字是两个字节，但在 js 中，'汉'.length 是 **1** 。看上去很方便，殊不知，这个特性埋下的坑。\n\n比如：\n\n```\n😀 : '😀'.length 得到的是 2\n𠮷 : '𠮷''.length 得到的也是 2\n```\n\nES6 里添加了一个东西叫字符串迭代器，还添加了一个东西叫 unicode 正则模式，它们也不能直接统计字符数，而是可以把字符串拆成一个字符的数组，你可以间接的计算出字符个数。\n\n使用字符串的Iterator统计长度，如下例子：\n\n```js\nconst testStr = '123 ' \n \nfor(let c of testStr) { \n  console.log(c) \n} \n// 1 \n// 2 \n// 3 \n//   \nconsole.log([...testStr].length) \n// 4 \n```\n\n使用 `Array.from` 替换，并且封装一下：\n\n```js\nfunction unicodeLength(str) {\n    return Array.from(str).length\n}\n```\n\n\n\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-10-10T12:42:30.000Z",
    "updateAt": "2023-01-16T09:16:30.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 456,
    "prev": "79fe443f-0556-4359-8e05-804161ac48ef",
    "next": "e1900c3f-a1e8-426c-8f5c-3281129e1430"
  },
  "post": {
    "exerciseKey": "53de0582-783d-490b-b7ca-7a20e9d13cb8",
    "category": "QA",
    "title": "如何判断某个字符串长度（要求支持表情）？",
    "level": 3,
    "updateAt": "2023-01-16T09:16:30+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}
