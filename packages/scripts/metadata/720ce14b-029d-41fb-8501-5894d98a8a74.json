{
  "data": {
    "id": 1928,
    "exerciseKey": "720ce14b-029d-41fb-8501-5894d98a8a74",
    "category": "QA",
    "renderType": "md",
    "title": "说说 jsBridge 的原理",
    "desc": null,
    "options": null,
    "explanation": "## JSBridge是什么?\n\nJSBridge：以 JavaScript 引擎或 Webview 容器作为媒介，通过协定协议进行通信，实现 Native 端和 Web 端双向通信的一种机制。\n\n![](https://static.ecool.fun//article/791ae46a-606e-4171-b6ad-535e7ef01058.png)\n\n所谓 `双向通信的通道`:\n\n* JS 向 Native 发送消息 : 调用相关功能、通知 Native 当前 JS 的相关状态等。\n* Native 向 JS 发送消息 : 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等。\n\n![](https://static.ecool.fun//article/6b088e68-2151-405b-805d-add00abb4b1b.png)\n\nJavaScript 是运行在一个单独的 JS Context 中（例如，WebView 的 Webkit 引擎、JSCore）。由于这些 Context 与原生运行环境的天然隔离，我们可以将这种情况与 RPC（Remote Procedure Call，远程过程调用）通信进行类比，将 Native 与 JavaScript 的每次互相调用看做一次 RPC 调用。如此一来我们可以按照通常的 RPC 方式来进行设计和实现。\n\n## Webview 是什么？\n\nWebView 是移动端提供的运行JavaScript的环境，是系统渲染 Web 网页的一个控件，可与页面JavaScript交互，实现混合开发。\n\n简单来说`，WebView` 是手机中内置了一款高性能 `Webkit` 内核浏览器，在 SDK 中封装的一个组件。不过没有提供地址栏和导航栏，只是单纯的展示一个网页界面。\n\n> `WebView` 可以简单理解为页面里的 `iframe` 。原生 `app` 与 `WebView` 的交互可以简单看作是页面与页面内 `iframe` 页面进行的交互。就如页面与页面内的 `iframe` 共用一个 `Window` 一样，原生与 `WebView` 也共用了一套原生的方法。\n\n其中 Android 和 iOS 又有些不同：\n\n* Android目前是 基于 `Chromium` 内核。\n* iOS 目前采用的是 `WKWebView`。\n\nWebView 可以对url请求、页面加载、渲染、页面交互进行强大的处理。\n\n![](https://static.ecool.fun//article/ea89dc1e-be83-4845-8a50-b5639ed37e53.png)\n\nwebview 去加载 url 并不像是 浏览器加载 url 的过程，webview 存在一个初始化的过程。为了提升init 时间，通常做法是 app 启动时初始化一个隐藏的webview等待使用，当用户点击需要加载URL，直接使用这个webview 来加载，从而减少webview init 初始化时间。弊端就是带来了额外的内存开销。\n\n# JSBridge 如何实现？\n\n目前主流的 JSBridge实现中，都是通过拦截 URL 请求来达到 native 端和 webview 端相互通信的效果。\n\n首先，需要在 webview 侧和 native 侧分别注册 bridge，其实就是用一个对象把所有函数储存起：\n\n`1. function registerHandler(handlerName, handler) {\n2. messageHandlers[handlerName] = handler;\n3. }\n`\n\n然后，在 webview 里面注入初始化代码：\n\n （1）创建一个名为 WVJBCallbacks 的数组，将传入的 callback 参数放到数组内\n\n （2）创建一个 iframe，设置不可见，设置 src 为 `https://__bridge_loaded__`\n\n （3）设置定时器移除这个 iframe。\n\n最后，在native 端监听 url 请求：\n\n （1）拦截了所有的 URL 请求并拿到 url。\n\n （2）首先判断 `isWebViewJavascriptBridgeURL`，判断这个 url 是不是 webview 的 iframe 触发的，具体可以通过 host 去判断。\n\n （3）继续判断，如果是 `isBridgeLoadedURL`，那么会执行 `injectJavascriptFile`方法，会向 webview 中再次注入一些逻辑，其中最重要的逻辑就是，在 window 对象上挂载一些全局变量和 `WebViewJavascriptBridge`属性。\n\n （4）继续判断，如果是 isQueueMessageURL，那么这就是个处理消息的回调，需要执行一些消息处理的方法\n\n## 1\\. webview 调用 native 能力\n\n![](https://static.ecool.fun//article/8b269897-4791-4a2b-b3ba-7c0609a0788f.png)\n\n1. native 端注册 JsBridge。\n2. webview 侧创建 iframe，设置 src 为`__bridge_load__。`\n3. native 端捕获请求，注入 jsb 初始化代码，在 window 上挂载相关对象和方法。\n4. webview 侧调用`callHandler`方法，并在`responseCallback`上添加`callbackId: responseCallback`，并修改 iframe 的 src，触发捕获。\n5. native 收到 message，生成一个`responseCallback`，并执行 native 侧注册好的方法\n6. native 执行完毕后，通过 webview 执行`_handleMessageFromObjC`方法，取出 callback 函数，并执行。\n\n## 2 . native 调用 webview 能力\n\nnative 可以直接调用 webview 注册的 JsBridge 方法，不需要通过触发 iframe 的 src 触发执行：\n\n![](https://static.ecool.fun//article/a513b60b-f948-480b-956c-0ed3d4803a30.png)\n\n1. native 侧调用 `callHandler`方法，并在 `responseCallback`上添加 `callbackId: responseCallback。`\n2. native 侧主动调用 `_handleMessageFromObjC `方法，在 webview 中执行对应的逻辑。\n3. webview 侧执行结束后，生成带有 `responseId `的 message，添加到 `sendMessageQueue`中，并修改 iframe 的 src 为 `__wvjb_queue_message__。`\n4. native 端拦截到 url 变化，调用 webview 的逻辑获取到 message，拿到 `responseId`，并执行对应的 callback 函数。",
    "pivot": "",
    "vipLimit": 0,
    "level": 3,
    "appId": 7,
    "createAt": "2022-12-30T01:38:41.000Z",
    "updateAt": "2024-08-10T17:07:06.000Z",
    "isCollected": false,
    "currentIndex": 461,
    "filterTotalNum": 1487,
    "prev": "dd99ac0b-0442-4b0e-aead-fe50315218f7",
    "next": "0295b261-f56a-41fd-847b-7f6947284279"
  },
  "post": {
    "exerciseKey": "720ce14b-029d-41fb-8501-5894d98a8a74",
    "category": "QA",
    "title": "说说 jsBridge 的原理",
    "level": 3,
    "createAt": "2022-12-30T01:38:41+00:00",
    "updateAt": "2024-08-10T17:07:06+00:00"
  },
  "tag": {
    "id": 74,
    "tagName": "跨端技术",
    "type": "1",
    "exerciseCount": 11
  }
}