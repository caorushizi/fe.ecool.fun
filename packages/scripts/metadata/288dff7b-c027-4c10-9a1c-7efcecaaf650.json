{
  "data": {
    "id": 2505,
    "exerciseKey": "288dff7b-c027-4c10-9a1c-7efcecaaf650",
    "category": "QA",
    "renderType": "md",
    "title": "304 状态码用于什么场景， 好处和坏处分别是什么？",
    "desc": "",
    "options": "",
    "explanation": "**304 状态码**表示“未修改”（Not Modified），用于缓存机制中。它告知客户端缓存的资源仍然有效，无需重新下载。\n\n**场景**：\n- **缓存优化**：当客户端请求一个资源时，服务器可以通过 `If-Modified-Since` 或 `If-None-Match` 头部判断该资源是否被修改。如果资源未修改，服务器返回 304 状态码，客户端继续使用缓存中的资源。\n\n**好处**：\n1. **减少带宽消耗**：避免重复传输未改变的资源，节省了网络带宽。\n2. **提高加载速度**：客户端可以使用缓存资源，减少了服务器的响应时间。\n3. **降低服务器负载**：减少了对服务器的请求处理，降低了负载。\n\n**坏处**：\n1. **缓存问题**：如果缓存策略设置不当，可能会导致客户端获取到过时的资源。\n2. **复杂性**：需要正确配置缓存头部和验证机制，增加了开发和维护的复杂性。\n3. **可能的延迟**：在一些网络环境中，验证资源是否修改的请求和响应可能导致额外的延迟，尽管这个延迟通常较小。",
    "pivot": "",
    "vipLimit": 1,
    "level": 2.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:26.000Z",
    "updateAt": "2024-08-21T01:07:24.000Z",
    "isCollected": false,
    "currentIndex": 182,
    "filterTotalNum": 1487,
    "prev": "a468a9c0-79fb-4779-8780-01e34b722fd4",
    "next": "08628126-405a-4ffe-a85e-98ba028ca337"
  },
  "post": {
    "exerciseKey": "288dff7b-c027-4c10-9a1c-7efcecaaf650",
    "category": "QA",
    "title": "304 状态码用于什么场景， 好处和坏处分别是什么？",
    "level": 2.5,
    "createAt": "2024-08-13T08:30:26+00:00",
    "updateAt": "2024-08-21T01:07:24+00:00"
  },
  "tag": {
    "id": 16,
    "tagName": "计算机网络",
    "type": "1",
    "exerciseCount": 95
  }
}