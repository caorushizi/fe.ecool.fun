{
  "data": {
    "id": 2641,
    "exerciseKey": "b84d40fe-e50a-48e1-b6bf-ddaf036b64fd",
    "category": "QA",
    "renderType": "md",
    "title": "Service Worker 是如何缓存 http 请求资源的？",
    "desc": "",
    "options": "",
    "explanation": "Service Worker 的缓存机制是通过缓存 API 实现的，它允许开发者拦截和缓存 HTTP 请求，以提高离线体验和加速页面加载。以下是 Service Worker 缓存 HTTP 请求资源的基本流程和原理：\n\n### **1. 注册 Service Worker**\n\n首先，Service Worker 需要在浏览器中注册。通常在主线程（如 JavaScript 入口文件）中进行注册：\n\n```javascript\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/service-worker.js')\n    .then(registration => {\n      console.log('Service Worker registered with scope:', registration.scope);\n    })\n    .catch(error => {\n      console.error('Service Worker registration failed:', error);\n    });\n}\n```\n\n### **2. 安装 Service Worker**\n\n在 Service Worker 脚本中，首先会触发 `install` 事件。在这个事件中，可以预缓存一些资源，以便在 Service Worker 激活后立即可用：\n\n```javascript\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open('my-cache-v1').then(cache => {\n      return cache.addAll([\n        '/',\n        '/styles/main.css',\n        '/scripts/main.js',\n        '/images/logo.png'\n      ]);\n    })\n  );\n});\n```\n\n### **3. 激活 Service Worker**\n\n`activate` 事件在 Service Worker 安装完成后触发。可以在这个事件中进行缓存清理，删除旧的缓存：\n\n```javascript\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.filter(cacheName => {\n          // 这里可以指定要删除的缓存\n          return cacheName !== 'my-cache-v1';\n        }).map(cacheName => {\n          return caches.delete(cacheName);\n        })\n      );\n    })\n  );\n});\n```\n\n### **4. 拦截和缓存请求**\n\n`fetch` 事件允许 Service Worker 拦截所有的网络请求。可以根据需要从缓存中返回资源，或将请求转发到网络：\n\n```javascript\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      // 如果缓存中有匹配的资源，直接返回\n      if (cachedResponse) {\n        return cachedResponse;\n      }\n\n      // 否则，发起网络请求\n      return fetch(event.request).then(response => {\n        // 克隆响应对象，因为响应只能被消费一次\n        const responseClone = response.clone();\n\n        // 将网络请求的结果缓存\n        caches.open('my-cache-v1').then(cache => {\n          cache.put(event.request, responseClone);\n        });\n\n        return response;\n      });\n    }).catch(() => {\n      // 网络和缓存都失败的情况\n      return new Response('Oops, something went wrong.');\n    })\n  );\n});\n```\n\n### **5. 资源管理**\n\n- **缓存清理**：定期删除过期或不再需要的缓存，保持缓存的健康状态。\n- **缓存策略**：可以实现不同的缓存策略，如缓存优先、网络优先、缓存和网络同时等。",
    "pivot": "",
    "vipLimit": 1,
    "level": 3.5,
    "appId": 7,
    "createAt": "2024-08-13T08:30:36.000Z",
    "updateAt": "2024-08-15T09:39:41.000Z",
    "isCollected": false,
    "currentIndex": 115,
    "filterTotalNum": 1487,
    "prev": "5926a5ad-e62b-42c7-a747-676ca6c0ad57",
    "next": "5f0627e5-a8f1-471a-b988-60169bd11e12"
  },
  "post": {
    "exerciseKey": "b84d40fe-e50a-48e1-b6bf-ddaf036b64fd",
    "category": "QA",
    "title": "Service Worker 是如何缓存 http 请求资源的？",
    "level": 3.5,
    "createAt": "2024-08-13T08:30:36+00:00",
    "updateAt": "2024-08-15T09:39:41+00:00"
  },
  "tag": {
    "id": 20,
    "tagName": "性能优化",
    "type": "1",
    "exerciseCount": 41
  }
}