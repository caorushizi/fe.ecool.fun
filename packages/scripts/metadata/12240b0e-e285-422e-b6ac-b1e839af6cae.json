{
  "data": {
    "id": 582,
    "exerciseKey": "12240b0e-e285-422e-b6ac-b1e839af6cae",
    "category": "QA",
    "renderType": "md",
    "title": "浏览器和 Node 中的事件循环有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "## 浏览器\n\n关于微任务和宏任务在浏览器的执行顺序是这样的：\n\n* 执行一只task（宏任务）\n* 执行完micro-task队列 （微任务）\n\n如此循环往复下去\n\n常见的 task（宏任务） 比如：setTimeout、setInterval、script（整体代码）、 I/O 操作、UI 渲染等。\n常见的 micro-task 比如: new Promise().then(回调)、MutationObserver(html5新特性) 等。\n\n## Node\n\nNode的事件循环是libuv实现的，引用一张官网的图：\n\n![image.png](https://static.ecool.fun//article/b6d024fe-2847-4749-99ca-7c1a8d9faeba.png)\n\n大体的task（宏任务）执行顺序是这样的：\n\n* timers定时器：本阶段执行已经安排的 setTimeout() 和 setInterval() 的回调函数。\n* pending callbacks待定回调：执行延迟到下一个循环迭代的 I/O 回调。\n* idle, prepare：仅系统内部使用。\n* poll 轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，它们由计时器和 \n* setImmediate() 排定的之外），其余情况 node 将在此处阻塞。\n* check 检测：setImmediate() 回调函数在这里执行。\n* close callbacks 关闭的回调函数：一些准备关闭的回调函数，如：socket.on('close', ...)。\n\n微任务和宏任务在Node的执行顺序\n\nNode 10 及以前：\n\n* 执行完一个阶段的所有任务\n* 执行完nextTick队列里面的内容\n* 然后执行完微任务队列的内容\n\nNode 11以后：\n和浏览器的行为统一了，都是每执行一个宏任务就执行完微任务队列。\n\n\n\n",
    "pivot": "",
    "vipLimit": 0,
    "level": 3.5,
    "appId": 7,
    "createAt": "2021-08-07T09:43:34.000Z",
    "updateAt": "2024-08-10T17:05:41.000Z",
    "isCollected": false,
    "currentIndex": 918,
    "filterTotalNum": 1487,
    "prev": "e253151b-a880-448b-9cd1-d869971a63e4",
    "next": "828350f9-b3d1-4593-8306-e5bc567b5c28"
  },
  "post": {
    "exerciseKey": "12240b0e-e285-422e-b6ac-b1e839af6cae",
    "category": "QA",
    "title": "浏览器和 Node 中的事件循环有什么区别？",
    "level": 3.5,
    "createAt": "2021-08-07T09:43:34+00:00",
    "updateAt": "2024-08-10T17:05:41+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 379
  }
}