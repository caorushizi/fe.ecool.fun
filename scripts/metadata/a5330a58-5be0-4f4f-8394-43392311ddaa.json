{
  "data": {
    "id": 194,
    "exerciseKey": "a5330a58-5be0-4f4f-8394-43392311ddaa",
    "category": "QA",
    "renderType": "md",
    "title": "深拷贝浅拷贝有什么区别？怎么实现深拷贝？",
    "desc": null,
    "options": null,
    "explanation": "## 一、数据类型存储\n\n前面文章我们讲到，`JavaScript`中存在两大数据类型：\n\n- 基本类型\n- 引用类型 \n\n基本类型数据保存在在栈内存中\n\n引用类型数据保存在堆内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中\n\n\n\n## 二、浅拷贝\n\n浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝\n\n如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址\n\n即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址\n\n下面简单实现一个浅拷贝\n\n```js\nfunction shallowClone(obj) {\n    const newObj = {};\n    for(let prop in obj) {\n        if(obj.hasOwnProperty(prop)){\n            newObj[prop] = obj[prop];\n        }\n    }\n    return newObj;\n}\n```\n\n在`JavaScript`中，存在浅拷贝的现象有：\n\n- `Object.assign`\n- `Array.prototype.slice()`, `Array.prototype.concat()`\n- 使用拓展运算符实现的复制\n\n\n\n\n\n### Object.assign\n\n```js\nvar obj = {\n    age: 18,\n    nature: ['smart', 'good'],\n    names: {\n        name1: 'fx',\n        name2: 'xka'\n    },\n    love: function () {\n        console.log('fx is a great girl')\n    }\n}\nvar newObj = Object.assign({}, obj);\n```\n\n\n\n### slice()\n\n```js\nconst fxArr = [\"One\", \"Two\", \"Three\"]\nconst fxArrs = fxArr.slice(0)\nfxArrs[1] = \"love\";\nconsole.log(fxArr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(fxArrs) // [\"One\", \"love\", \"Three\"]\n```\n\n\n\n### concat()\n\n```js\nconst fxArr = [\"One\", \"Two\", \"Three\"]\nconst fxArrs = fxArr.concat()\nfxArrs[1] = \"love\";\nconsole.log(fxArr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(fxArrs) // [\"One\", \"love\", \"Three\"]\n```\n\n\n\n\n\n\n\n### 拓展运算符\n\n```js\nconst fxArr = [\"One\", \"Two\", \"Three\"]\nconst fxArrs = [...fxArr]\nfxArrs[1] = \"love\";\nconsole.log(fxArr) // [\"One\", \"Two\", \"Three\"]\nconsole.log(fxArrs) // [\"One\", \"love\", \"Three\"]\n```\n\n\n\n\n\n## 三、深拷贝\n\n深拷贝开辟一个新的栈，两个对象的属性完全相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性\n\n常见的深拷贝方式有：\n\n- _.cloneDeep()\n\n- jQuery.extend()\n- JSON.stringify()\n- 手写循环递归\n\n\n\n### _.cloneDeep()\n\n```js\nconst _ = require('lodash');\nconst obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nconst obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false\n```\n\n\n\n### jQuery.extend()\n\n```js\nconst $ = require('jquery');\nconst obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nconst obj2 = $.extend(true, {}, obj1);\nconsole.log(obj1.b.f === obj2.b.f); // false\n```\n\n\n\n\n\n### JSON.stringify()\n\n```js\nconst obj2=JSON.parse(JSON.stringify(obj1));\n```\n\n但是这种方式存在弊端，会忽略`undefined`、`symbol`和`函数`\n\n```js\nconst obj = {\n    name: 'A',\n    name1: undefined,\n    name3: function() {},\n    name4:  Symbol('A')\n}\nconst obj2 = JSON.parse(JSON.stringify(obj));\nconsole.log(obj2); // {name: \"A\"}\n```\n\n\n\n### 循环递归\n\n```js\nfunction deepClone(obj, hash = new WeakMap()) {\n  if (obj === null) return obj; // 如果是null或者undefined我就不进行拷贝操作\n  if (obj instanceof Date) return new Date(obj);\n  if (obj instanceof RegExp) return new RegExp(obj);\n  // 可能是对象或者普通的值  如果是函数的话是不需要深拷贝\n  if (typeof obj !== \"object\") return obj;\n  // 是对象的话就要进行深拷贝\n  if (hash.get(obj)) return hash.get(obj);\n  let cloneObj = new obj.constructor();\n  // 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身\n  hash.set(obj, cloneObj);\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      // 实现一个递归拷贝\n      cloneObj[key] = deepClone(obj[key], hash);\n    }\n  }\n  return cloneObj;\n}\n```\n\n\n\n\n\n\n\n## 四、区别\n\n下面首先借助两张图，可以更加清晰看到浅拷贝与深拷贝的区别\n\n ![](https://static.ecool.fun//article/8252919d-2855-4ccd-9b2e-d64ce5c07be2.png)\n\n从上图发现，浅拷贝和深拷贝都创建出一个新的对象，但在复制对象属性的时候，行为就不一样\n\n浅拷贝只复制属性指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存，修改对象属性会影响原对象\n\n```js\n// 浅拷贝\nconst obj1 = {\n    name : 'init',\n    arr : [1,[2,3],4],\n};\nconst obj3=shallowClone(obj1) // 一个浅拷贝方法\nobj3.name = \"update\";\nobj3.arr[1] = [5,6,7] ; // 新旧对象还是共享同一块内存\n\nconsole.log('obj1',obj1) // obj1 { name: 'init',  arr: [ 1, [ 5, 6, 7 ], 4 ] }\nconsole.log('obj3',obj3) // obj3 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] }\n```\n\n但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象\n\n```js\n// 深拷贝\nconst obj1 = {\n    name : 'init',\n    arr : [1,[2,3],4],\n};\nconst obj4=deepClone(obj1) // 一个深拷贝方法\nobj4.name = \"update\";\nobj4.arr[1] = [5,6,7] ; // 新对象跟原对象不共享内存\n\nconsole.log('obj1',obj1) // obj1 { name: 'init', arr: [ 1, [ 2, 3 ], 4 ] }\nconsole.log('obj4',obj4) // obj4 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] }\n```\n\n### 小结\n\n前提为拷贝类型为引用类型的情况下：\n\n- 浅拷贝是复制内存中的地址，拷贝前后的对象，因为引用类型共享了同一块内存，修改会相互影响。\n- 深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:48:49.000Z",
    "updateAt": "2024-01-24T17:33:41.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 167,
    "prev": "e9bcc1f4-1b0a-4213-9d3a-8e64c97c7848",
    "next": "ddec2e9f-993c-4298-8477-b7bc25db7713"
  },
  "post": {
    "exerciseKey": "a5330a58-5be0-4f4f-8394-43392311ddaa",
    "category": "QA",
    "title": "深拷贝浅拷贝有什么区别？怎么实现深拷贝？",
    "level": 3.5,
    "updateAt": "2024-01-24T17:33:41+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}