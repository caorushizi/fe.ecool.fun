{
  "data": {
    "id": 662,
    "exerciseKey": "2b68a2b5-ab3a-4de4-af48-43ab5f7e99f8",
    "category": "QA",
    "renderType": "md",
    "title": "说说React Router有几种模式，以及实现原理？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n在单页应用中，一个`web`项目只有一个`html`页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下：\n\n- 改变 url 且不让浏览器向服务器发送请求\n\n- 在不刷新页面的前提下动态改变浏览器地址栏中的URL地址\n\n其中主要分成了两种模式：\n\n- hash 模式：在url后面加上#，如http://127.0.0.1:5500/home/#/page1\n- history 模式：允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录\n\n\n## 二、使用\n\n`React Router`对应的`hash`模式和`history`模式对应的组件为：\n\n- HashRouter\n- BrowserRouter\n\n\n这两个组件的使用都十分的简单，作为最顶层组件包裹其他组件，如下所示\n\n```jsx\n// 1.import { BrowserRouter as Router } from \"react-router-dom\";\n// 2.import { HashRouter as Router } from \"react-router-dom\";\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  // HashRouter as Router  \n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Backend from './pages/Backend';\nimport Admin from './pages/Admin';\n\n\nfunction App() {\n  return (\n    <Router>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/backend\" component={Backend}/>\n        <Route path=\"/admin\" component={Admin}/>\n        <Route path=\"/\" component={Home}/>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n\n\n## 三、实现原理\n\n路由描述了 `URL` 与 `UI `之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）\n\n下面以`hash`模式为例子，改变`hash`值并不会导致浏览器向服务器发送请求，浏览器不发出请求，也就不会刷新页面\n\n`hash` 值改变，触发全局 `window` 对象上的 `hashchange` 事件。所以 `hash` 模式路由就是利用 `hashchange` 事件监听 `URL` 的变化，从而进行 `DOM` 操作来模拟页面跳转\n\n`react-router`也是基于这个特性实现路由的跳转\n\n下面以`HashRouter`组件分析进行展开：\n\n\n## HashRouter\n\n`HashRouter`包裹了整应用，\n\n通过`window.addEventListener('hashChange',callback)`监听`hash`值的变化，并传递给其嵌套的组件\n\n然后通过`context`将`location`数据往后代组件传递，如下：\n\n```jsx\nimport React, { Component } from 'react';\nimport { Provider } from './context'\n// 该组件下Api提供给子组件使用\nclass HashRouter extends Component {\n  constructor() {\n    super()\n    this.state = {\n      location: {\n        pathname: window.location.hash.slice(1) || '/'\n      }\n    }\n  }\n  // url路径变化 改变location\n  componentDidMount() {\n    window.location.hash = window.location.hash || '/'\n    window.addEventListener('hashchange', () => {\n      this.setState({\n        location: {\n          ...this.state.location,\n          pathname: window.location.hash.slice(1) || '/'\n        }\n      }, () => console.log(this.state.location))\n    })\n  }\n  render() {\n    let value = {\n      location: this.state.location\n    }\n    return (\n      <Provider value={value}>\n        {\n          this.props.children\n        }\n      </Provider>\n    );\n  }\n}\n\nexport default HashRouter;\n\n```\n\n\n### Router\n\n`Router`组件主要做的是通过`BrowserRouter`传过来的当前值，通过`props`传进来的`path`与`context`传进来的`pathname`进行匹配，然后决定是否执行渲染组件\n\n```js\nimport React, { Component } from 'react';\nimport { Consumer } from './context'\nconst { pathToRegexp } = require(\"path-to-regexp\");\nclass Route extends Component {\n  render() {\n    return (\n      <Consumer>\n        {\n          state => {\n            console.log(state)\n            let {path, component: Component} = this.props\n            let pathname = state.location.pathname\n            let reg = pathToRegexp(path, [], {end: false})\n            // 判断当前path是否包含pathname\n            if(pathname.match(reg)) {\n              return <Component></Component>\n            }\n            return null\n          }\n        }\n      </Consumer>\n    );\n  }\n}\nexport default Route;\n\n```\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-10-24T04:28:50.000Z",
    "updateAt": "2023-03-26T08:36:03.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 414,
    "prev": "637b0af3-e1e1-42c0-9825-e34aa0a4e4a0",
    "next": "32a7006f-143a-4490-baf1-c903f98d826b"
  },
  "post": {
    "exerciseKey": "2b68a2b5-ab3a-4de4-af48-43ab5f7e99f8",
    "category": "QA",
    "title": "说说React Router有几种模式，以及实现原理？",
    "level": 2,
    "updateAt": "2023-03-26T08:36:03+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}