{
  "data": {
    "id": 487,
    "exerciseKey": "8f02af9e-ae19-40dd-896d-a568cca4b963",
    "category": "QA",
    "renderType": "md",
    "title": "tsconfig.json文件有什么用？",
    "desc": null,
    "options": null,
    "explanation": "tsconfig.json文件是JSON格式的文件。 \n\n在tsconfig.json文件中，可以指定不同的选项来告诉编译器如何编译当前项目。\n\n目录中包含tsconfig.json文件，表明该目录是TypeScript项目的根目录。\n\n\n```\n// 常用配置\n{\n  /*\n      tsconfig.json是ts编译器的配置文件，ts可以根据它的信息来对待吗进行编译 可以再tsconfig中写注释\n      include : 用来指定哪些文件需要被编译\n      exclude : 用来指定哪些文件不需要被编译 ：默认node_module\n      extends : 用来指定继承的配置文件\n      files   : 用来指定被编译的文件列表，只有编译少量文件才使用\n      compilerOptions : 编译器的选项是配置文件中非常重要也是非常复杂的配置选项\n  */\n  \"include\":[\n    // ** : 任意目录 ， * : 任意文件\n    \"./src/**/*\"\n  ],\n  \"exclude\": [\n    \"./src/hello/**/*\"\n  ],\n  // \"extends\": \"./configs/base\",\n  \"files\": [\n    \"1.ts\",\n    // \"2.ts\"\n  ],\n  \"compilerOptions\": {\n    // 用来指定 ES 版本 ESNext : 最新版。 'ES3', 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ESNext'\n    \"target\": \"ES2020\",\n    // 指定要使用模块化的规范 : 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6'/'ES2015', 'ES2020' or 'ESNext'\n    \"module\": \"ESNext\",\n    // 用来指定项目中要使用的库 'ES5', 'ES6', 'ES2015', 'ES7', 'ES2016', 'ES2017', 'ES2018', 'ESNext', 'DOM', 'DOM.Iterable',\n    //                          'WebWorker', 'ScriptHost', 'ES2015.Core', 'ES2015.Collection', 'ES2015.Generator', 'ES2015.Iterable', \n    //                          'ES2015.Promise', 'ES2015.Proxy', 'ES2015.Reflect', 'ES2015.Symbol', 'ES2015.Symbol.WellKnown', \n    //                          'ES2016.Array.Include', 'ES2017.object', 'ES2017.Intl', 'ES2017.SharedMemory', 'ES2017.String', \n    //                          'ES2017.TypedArrays', 'ES2018.Intl', 'ES2018.Promise', 'ES2018.RegExp', 'ESNext.AsyncIterable', \n    //                          'ESNext.Array', 'ESNext.Intl', 'ESNext.Symbol'\n    // 运行在浏览器中不用设置，运行在node或其他中才需要设置\n    // \"lib\":[]，\n    // 用来指定编译后文件的存放位置\n    \"outDir\":\"./dist\",\n    // 将代码合并为一个文件,设置之后所有的全局作用域中的代码会合并到同一个文件中 但是只能在  'amd' and 'system' 中才能使用\n    // \"outFile\": \"./dist/app.js\",\n    // 是否对js文件进行编译，默认false\n    \"allowJs\": false,\n    // 是否检查js代码是否符合语法规范，默认false\n    \"checkJs\": false,\n    // 是否移除注释，默认false\n    \"removeComments\":false,\n    // 是否不生成编译后文件，默认false\n    \"noEmit\": false,\n    // 当有错误时是否生成文件，默认false\n    \"noEmitOnError\": false,\n    // 是否生成sourceMap，默认false  这个文件里保存的，是转换后代码的位置，和对应的转换前的位置。有了它，出错的时候，通过断点工具可以直接显示原始代码，而不是转换后的代码。\n    \"sourceMap\":false,\n\n    // 所有的严格检查的总开关，默认false\n    \"strict\": false,\n    // 编译后的文件是否开启严格模式，默认false\n    \"alwaysStrict\": false,\n    // 不允许隐式的any，默认false(允许)\n    \"noImplicitAny\": false,\n    // 不允许隐式的this，默认false(允许)\n    \"noImplicitThis\": false,\n    // 是否严格的检查空值，默认false 检查有可能为null的地方\n    \"strictNullChecks\": true,\n    // 是否严格检查bind、call和apply的参数列表，默认false  检查是否有多余参数\n    \"strictBindCallApply\":false,\n    // 是否严格检查函数的类型，\n    \"strictFunctionTypes\":false,\n    // 是否严格检查属性是否初始化，默认false\n    \"strictPropertyInitialization\":false,\n\n    // 是否检查switch语句包含正确的break，默认false\n    \"noFallthroughCasesInSwitch\":false,\n    // 检查函数没有隐式的返回值，默认false\n    \"noImplicitReturns\":false,\n    // 是否检查检查未使用的局部变量，默认false\n    \"noUnusedLocals\":false,\n    // 是否检查未使用的参数，默认false\n    \"noUnusedParameters\":false,\n\n    // 是否检查不可达代码报错，默认false   true，忽略不可达代码 false，不可达代码将引起错误\n    \"allowUnreachableCode\":false\n  }\n}\n```\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-11T03:25:50.000Z",
    "updateAt": "2021-07-11T14:57:16.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 866,
    "prev": "3c2be850-72a9-42fe-b9cc-60a632f8ac61",
    "next": "59da2c47-26e6-46d9-86ad-d76d75006f29"
  },
  "post": {
    "exerciseKey": "8f02af9e-ae19-40dd-896d-a568cca4b963",
    "category": "QA",
    "title": "tsconfig.json文件有什么用？",
    "level": 2,
    "updateAt": "2021-07-11T14:57:16+00:00"
  },
  "tag": {
    "id": 19,
    "tagName": "Typescript",
    "type": "1",
    "exerciseCount": 46
  }
}