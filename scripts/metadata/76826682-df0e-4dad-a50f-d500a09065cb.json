{
  "data": {
    "id": 1999,
    "exerciseKey": "76826682-df0e-4dad-a50f-d500a09065cb",
    "category": "QA",
    "renderType": "md",
    "title": "https是如何保证安全的，又是如何保证不被中间人攻击的？",
    "desc": null,
    "options": null,
    "explanation": "HTTPS 是一种基于 TLS/SSL 协议的安全传输协议，它可以通过加密和认证等措施来保护数据传输过程中的安全性和隐私性。其主要保证方式如下：\n\n1. 加密传输：使用公钥加密技术对数据进行加密，并使用私钥进行解密，以保证在传输过程中数据不会被窃取、篡改或伪造。\n\n2. 身份认证：使用数字证书对服务器和客户端身份进行认证，防止恶意攻击者伪装成合法用户或服务器进行攻击。\n\n3. 完整性校验：使用消息摘要算法对传输数据进行校验，确保数据的完整性和准确性，防止数据在传输过程中被篡改或损坏。\n\n4. 防止重放攻击：使用时间戳和随机数等技术对请求和响应进行标记，以防止恶意攻击者利用重放攻击进行攻击。\n\n至于如何防止中间人攻击，HTTPS 主要采用以下几种方式：\n\n1. 数字证书验证：在握手阶段，客户端会向服务器请求数字证书，然后对证书进行验证，以确认服务器身份的真实性和合法性。如果证书验证失败，则会拒绝连接，从而避免了中间人攻击的风险。\n\n2. 主机名验证：客户端在验证数字证书时，会对证书中包含的域名信息进行匹配验证，以确保请求的是正确的服务器地址和域名。如果主机名验证失败，则同样会拒绝连接。\n\n3. 对称加密：使用对称密钥加密算法可以提高传输效率，但需要注意在传输过程中保护密钥的安全性，以避免被中间人获取密钥并进行攻击。\n\n4. 证书固定：一些应用程序可以将服务器证书的指纹或公钥等信息内置到客户端中，从而避免了恶意攻击者替换证书或伪造数字证书的风险。\n\nHTTPS 可以通过加密和认证等措施来保证数据传输过程的安全性和隐私性，并防止中间人攻击等风险。但需要注意，在实际应用中，需要选择合适的加密算法、证书颁发机构和证书验证方式，并进行有效的密钥保护和网络安全管控，以保证 HTTPS 的可靠性和稳定性。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-24T01:26:03.000Z",
    "updateAt": "2023-05-26T09:27:21.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 365,
    "prev": "95185ca6-291f-4160-b65d-f291dfdf8a4f",
    "next": "8c396acb-2093-4216-8d4a-f8fec4e64f26"
  },
  "post": {
    "exerciseKey": "76826682-df0e-4dad-a50f-d500a09065cb",
    "category": "QA",
    "title": "https是如何保证安全的，又是如何保证不被中间人攻击的？",
    "level": 3,
    "updateAt": "2023-05-26T09:27:21+00:00"
  },
  "tag": {
    "id": 16,
    "tagName": "计算机网络",
    "type": "1",
    "exerciseCount": 72
  }
}