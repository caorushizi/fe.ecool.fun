{
  "data": {
    "id": 1805,
    "exerciseKey": "418ef81f-96c6-4c4e-b218-df29be84890d",
    "category": "QA",
    "renderType": "md",
    "title": "Vue 模板是如何编译的",
    "desc": null,
    "options": null,
    "explanation": "```js\nnew Vue({\n  render: h => h(App)\n})\n```\n\n这个大家都熟悉，调用 render 就会得到传入的模板(`.vue`文件)对应的虚拟 DOM，那么这个 render 是哪来的呢？它是怎么把 `.vue` 文件转成浏览器可识别的代码的呢？\n\nrender 函数是怎么来的有两种方式\n\n- 第一种就是经过模板编译生成 render 函数\n- 第二种是我们自己在组件里定义了 render 函数，这种会跳过模板编译的过程\n\n本文将为大家分别介绍这两种，以及详细的编译过程原理\n\n## 认识模板编译\n\n我们知道 `<template></template>` 这个是模板，不是真实的 HTML，浏览器是不认识模板的，所以我们需要把它编译成浏览器认识的原生的 HTML\n\n这一块的主要流程就是\n\n1. 提取出模板中的原生 HTML 和非原生 HTML，比如绑定的属性、事件、指令等等\n2. 经过一些处理生成 render 函数\n3. render 函数再将模板内容生成对应的 vnode\n4. 再经过 patch 过程( Diff )得到要渲染到视图中的 vnode\n5. 最后根据 vnode 创建真实的 DOM 节点，也就是原生 HTML 插入到视图中，完成渲染\n\n上面的 1、2、3 条就是模板编译的过程了\n\n那它是怎么编译，最终生成 render 函数的呢？\n\n## 模板编译详解——源码\n\n### baseCompile()\n\n这就是模板编译的入口函数，它接收两个参数\n\n- `template`：就是要转换的模板字符串\n- `options`：就是转换时需要的参数\n\n编译的流程，主要有三步：\n\n1. 模板解析：通过正则等方式提取出 `<template></template>` 模板里的标签元素、属性、变量等信息，并解析成抽象语法树 `AST`\n2. 优化：遍历 `AST` 找出其中的静态节点和静态根节点，并添加标记\n3. 代码生成：根据 `AST` 生成渲染函数 `render`\n\n这三步分别对应三个函数，后面会一一下介绍，先看一下 `baseCompile` 源码中是在哪里调用的\n\n源码地址：`src/complier/index.js - 11行`\n\n```js\nexport const createCompiler = createCompilerCreator(function baseCompile (\n  template: string, // 就是要转换的模板字符串\n  options: CompilerOptions //就是转换时需要的参数\n): CompiledResult {\n  // 1. 进行模板解析，并将结果保存为 AST\n  const ast = parse(template.trim(), options)\n  \n  // 没有禁用静态优化的话\n  if (options.optimize !== false) {\n    // 2. 就遍历 AST，并找出静态节点并标记\n    optimize(ast, options)\n  }\n  // 3. 生成渲染函数\n  const code = generate(ast, options)\n  return {\n    ast,\n    render: code.render, // 返回渲染函数 render\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n就这么几行代码，三步，调用了三个方法很清晰\n\n我们先看一下最后 return 出去的是个啥，再来深入上面这三步分别调用的方法源码，也好更清楚的知道这三步分别是要做哪些处理\n\n### 编译结果\n\n比如有这样的模板\n\n```html\n<template>\n    <div id=\"app\">{{name}}</div>\n</template>\n```\n\n打印一下编译后的结果，也就是上面源码 return 出去的结果，看看是啥\n\n```js\n{\n  ast: {\n    type: 1,\n    tag: 'div',\n    attrsList: [ { name: 'id', value: 'app' } ],\n    attrsMap: { id: 'app' },\n    rawAttrsMap: {},\n    parent: undefined,\n    children: [\n      {\n        type: 2,\n        expression: '_s(name)',\n        tokens: [ { '@binding': 'name' } ],\n        text: '{{name}}',\n        static: false\n      }\n    ],\n    plain: false,\n    attrs: [ { name: 'id', value: '\"app\"', dynamic: undefined } ],\n    static: false,\n    staticRoot: false\n  },\n  render: `with(this){return _c('div',{attrs:{\"id\":\"app\"}},[_v(_s(name))])}`,\n  staticRenderFns: [],\n  errors: [],\n  tips: []\n}\n```\n\n看不明白也没有关系，注意看上面提到的三步都干了啥\n\n- `ast` 字段，就是第一步生成的\n- `static` 字段，就是标记，是在第二步中根据 `ast` 里的 `type` 加上去的\n- `render` 字段，就是第三步生成的\n\n有个大概的印象了，然后再来看源码\n\n### 1. parse()\n\n源码地址：`src/complier/parser/index.js - 79行`\n\n就是这个方法就是解析器的主函数，就是它通过正则等方法提取出 `<template></template>` 模板字符串里所有的 `tag`、`props`、`children` 信息，生成一个对应结构的 ast 对象\n\n`parse` 接收两个参数\n- `template` ：就是要转换的模板字符串\n- `options`：就是转换时需要的参数。它包含有四个钩子函数，就是用来把 `parseHTML` 解析出来的字符串提取出来，并生成对应的 `AST`\n\n核心步骤是这样的：\n\n调用 `parseHTML` 函数对模板字符串进行解析\n\n- 解析到开始标签、结束标签、文本、注释分别进行不同的处理\n- 解析过程中遇到文本信息就调用文本解析器 `parseText` 函数进行文本解析\n- 解析过程中遇到包含过滤器，就调用过滤器解析器 `parseFilters` 函数进行解析\n\n每一步解析的结果都合并到一个对象上(就是最后的 AST)\n\n这个地方的源码实在是太长了，有大几百行代码，我就只贴个大概吧，有兴趣的自己去看一下\n\n\n```js\nexport function parse (\n  template: string, // 要转换的模板字符串\n  options: CompilerOptions // 转换时需要的参数\n): ASTElement | void {\n  parseHTML(template, {\n    warn,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    outputSourceRange: options.outputSourceRange,\n    // 解析到开始标签时调用，如 <div>\n    start (tag, attrs, unary, start, end) {\n        // unary 是否是自闭合标签，如 <img />\n        ...\n    },\n    // 解析到结束标签时调用，如 </div>\n    end (tag, start, end) {\n        ...\n    },\n    // 解析到文本时调用\n    chars (text: string, start: number, end: number) {\n      // 这里会判断判断很多东西，来看它是不是带变量的动态文本\n      // 然后创建动态文本或静态文本对应的 AST 节点\n      ...\n    },\n    // 解析到注释时调用\n    comment (text: string, start, end) {\n      // 注释是这么找的\n      const comment = /^<!\\--/\n      if (comment.test(html)) {\n      // 如果是注释，就继续找 '-->'\n      const commentEnd = html.indexOf('-->')\n      ...\n    }\n  })\n  // 返回的这个就是 AST\n  return root\n}\n```\n\n上面解析文本时调用的 `chars()` 会根据不同类型节点加上不同 `type`，来标记 `AST` 节点类型，这个属性在下一步标记的时候会用到\n\n| type | AST 节点类型 |\n| --- | --- |\n| 1 | 元素节点 |\n| 2 | 包含变量的动态文本节点 |\n| 3 | 没有变量的纯文本节点 |\n\n### 2. optimize()\n\n这个函数就是在 `AST` 里找出静态节点和静态根节点，并添加标记，为了后面 `patch` 过程中就会跳过静态节点的对比，直接克隆一份过去，从而优化了 `patch` 的性能\n\n函数里面调用的外部函数就不贴代码了，大致过程是这样的\n\n- **标记静态节点(markStatic)**。就是判断 type，上面介绍了值为 1、2、3的三种类型\n\n    - type 值为1：就是包含子元素的节点，设置 static 为 false 并递归标记子节点，直到标记完所有子节点\n    - type 值为 2：设置 static 为 false\n    - type 值为 3：就是不包含子节点和动态属性的纯文本节点，把它的 static = true，patch 的时候就会跳过这个，直接克隆一份去\n    \n- **标记静态根节点(markStaticRoots)**，这里的原理和标记静态节点基本相同，只是需要满足下面条件的节点才能算作是静态根节点\n    - 节点本身必须是静态节点\n    - 必须有子节点\n    - 子节点不能只有一个文本节点\n\n源码地址：`src/complier/optimizer.js - 21行`\n\n```js\nexport function optimize (root: ?ASTElement, options: CompilerOptions) {\n  if (!root) return\n  isStaticKey = genStaticKeysCached(options.staticKeys || '')\n  isPlatformReservedTag = options.isReservedTag || no\n  // 标记静态节点\n  markStatic(root)\n  // 标记静态根节点\n  markStaticRoots(root, false)\n}\n```\n\n### 3. generate()\n\n这个就是生成 render 的函数，就是说最终会返回下面这样的东西\n\n```js\n// 比如有这么个模板\n<template>\n    <div id=\"app\">{{name}}</div>\n</template>\n\n// 上面模板编译后返回的 render 字段 就是这样的\nrender: `with(this){return _c('div',{attrs:{\"id\":\"app\"}},[_v(_s(name))])}`\n\n// 把内容格式化一下，容易理解一点\nwith(this){\n  return _c(\n    'div',\n    { attrs:{\"id\":\"app\"} },\n    [  _v(_s(name))  ]\n  )\n}\n```\n\n这个结构是不是有点熟悉？\n\n了解虚拟 DOM 就可以看出来，上面的 render 正是虚拟 DOM 的结构，就是把一个标签分为 `tag`、`props`、`children`，没有错\n\n在看 `generate` 源码之前，我们要先了解一下上面这最后返回的 `render` 字段是什么意思，再来看 `generate` 源码，就会轻松得多，不然连函数返回的东西是干嘛的都不知道怎么可能看得懂这个函数呢\n\n#### render\n\n我们来翻译一下上面编译出来的 `render`\n\n这个 `with` 在 《**你不知道的JavaScript**》上卷里介绍的是，用来欺骗词法作用域的关键字，它可以让我们更快的引用一个对象上的多个属性\n\n看个例子\n\n```js\nconst name = '掘金'\nconst obj = { name:'沐华', age: 18 }\nwith(obj){\n    console.log(name) // 沐华  不需要写 obj.name 了\n    console.log(age) // 18   不需要写 obj.age 了\n}\n```\n\n上面的 `with(this){}` 里的 `this` 就是当前组件实例。因为通过 `with` 改变了词法作用域中属性的指向，所以标签里使用 `name` 直接用就是了，而不需要 `this.name` 这样\n\n那 `_c`、 `_v` 和 `_s` 是什么呢？\n\n在源码里是这样定义的，格式是：**`_c`(缩写) = `createElement`(函数名)**\n\n源码地址：`src/core/instance/render-helpers/index.js - 15行`\n\n```js\n// 其实不止这几个，由于本文例子中没有用到就没都复制过来占位了\nexport function installRenderHelpers (target: any) {\n  target._s = toString // 转字符串函数\n  target._l = renderList // 生成列表函数\n  target._v = createTextVNode // 创建文本节点函数\n  target._e = createEmptyVNode // 创建空节点函数\n}\n// 补充\n_c = createElement // 创建虚拟节点函数\n```\n\n再来看是不是就清楚多了呢\n\n```js\nwith(this){ // 欺骗词法作用域，将该作用域里所有属姓和方法都指向当前组件\n  return _c( // 创建一个虚拟节点\n    'div', // 标签为 div\n    { attrs:{\"id\":\"app\"} }, // 有一个属性 id 为 'app'\n    [  _v(_s(name))  ] // 是一个文本节点，所以把获取到的动态属性 name 转成字符串\n  )\n}\n```\n\n接下来我们再来看 `generate()` 源码\n\n#### generate\n\n源码地址：`src/complier/codegen/index.js - 43行`\n\n这个流程很简单，只有几行代码，就是先判断 `AST` 是不是为空，不为空就根据 AST 创建 vnode，否则就创建一个空div 的 vnode\n\n```js\nexport function generate (\n  ast: ASTElement | void,\n  options: CompilerOptions\n): CodegenResult {\n  const state = new CodegenState(options)\n  // 就是先判断 AST 是不是为空，不为空就根据 AST 创建 vnode，否则就创建一个空div的 vnode\n  const code = ast ? (ast.tag === 'script' ? 'null' : genElement(ast, state)) : '_c(\"div\")'\n  \n  return {\n    render: `with(this){return ${code}}`,\n    staticRenderFns: state.staticRenderFns\n  }\n}\n```\n\n可以看出这里面主要就是通过 `genElement()` 方法来创建 `vnode` 的，所以我们来看一下它的源码，看是怎么创建的\n\n#### genElement()\n\n源码地址：`src/complier/codegen/index.js - 56行`\n\n这里的逻辑还是很清晰的，就是一堆 `if/else` 判断传进来的 AST 元素节点的属性来执行不同的生成函数\n\n>这里还可以发现另一个知识点 v-for 的优先级要高于 v-if，因为先判断 for 的\n\n```js\nexport function genElement (el: ASTElement, state: CodegenState): string {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) { // v-once\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) { // v-for\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) { // v-if\n    return genIf(el, state)\n     \n    // template 节点 && 没有插槽 && 没有 pre 标签\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') { // v-slot\n    return genSlot(el, state)\n  } else {\n    // component or element\n    let code\n    // 如果有子组件\n    if (el.component) {\n      code = genComponent(el.component, el, state)\n    } else {\n      let data\n      // 获取元素属性 props\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData(el, state)\n      }\n      // 获取元素子节点\n      const children = el.inlineTemplate ? null : genChildren(el, state, true)\n      code = `_c('${el.tag}'${\n        data ? `,${data}` : '' // data\n      }${\n        children ? `,${children}` : '' // children\n      })`\n    }\n    // module transforms\n    for (let i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code)\n    }\n    // 返回上面作为 with 作用域执行的内容\n    return code\n  }\n}\n```\n\n每一种类型调用的生成函数就不一一列举了，总的来说最后创建出来的 vnode 节点类型无非就三种，元素节点、文本节点、注释节点\n\n## 自定义的 render\n\n先举个例子吧，三种情况如下\n\n```js\n// 1. test.vue\n<template>\n    <h1>我是沐华</h1>\n</template>\n<script>\n  export default {}\n</script>\n```\n```js\n// 2. test.vue\n<script>\n  export default {\n    render(h){\n      return h('h1',{},'我是沐华')\n    }\n  }\n</script>\n```\n```js\n// 3. test.js\nexport default {\n  render(h){\n    return h('h1',{},'我是沐华')\n  }\n}\n```\n\n**上面三种，最后渲染的出来的就是完全一模一样的**，因为这个 `h` 就是上面模板编译后的那个 `_c`\n\n这时有人可能就会问，为什么要自己写呢，不是有模板编译自动生成吗？\n\n这个问题问得好！自己写肯定是有好处的\n\n1. 自己把 vnode 给写了，就会直接跳过了模板编译，不用去解析模板里的动态属性、事件、指令等等了，所以性能上会有那么一丢丢提升。这一点在下面的渲染的优先级上就有体现\n2. 还有一些情况，能让我们代码写法的更加灵活，更加方便简洁，不会冗余\n\n比如 `Element-UI` 里面的组件源码里就有大量直接写 render 函数\n\n接下来分别看下这两点是如何体现的\n\n### 1. 渲染优先级\n\n先看一下在官网的生命周期里，关于模板编译的部分\n\n![](https://static.ecool.fun//article/0a8b7327-b0fd-4042-b4bc-526c05ab9c89.jpeg)\n\n如图可以知道，如果有 `template`，就不会管 `el` 了，所以 **template 比 el 的优先级更高**，比如\n\n那我们自己写了 render 呢？\n\n```js\n<div id='app'>\n    <p>{{ name }}</p>\n</div>\n<script>\n    new Vue({\n        el:'#app',\n        data:{ name:'沐华' },\n        template:'<div>掘金</div>',\n        render(h){\n            return h('div', {}, '好好学习，天天向上')\n        }\n    })\n</script>\n```\n\n这个代码执行后页面渲染出来只有 `<div>好好学习，天天向上</div>`\n\n可以得出 **render 函数的优先级更高**\n\n因为不管是 `el` 挂载的，还是 `template` 最后都会被编译成 `render` 函数，而如果已经有了 `render` 函数了，就跳过前面的编译了\n\n这一点在源码里也有体现\n\n在源码中找到答案：`dist/vue.js - 11927行`\n\n```js\n  Vue.prototype.$mount = function ( el, hydrating ) {\n    el = el && query(el);\n    var options = this.$options;\n    // 如果没有 render \n    if (!options.render) {\n      var template = options.template;\n      // 再判断，如果有 template\n      if (template) {\n        if (typeof template === 'string') {\n          if (template.charAt(0) === '#') {\n            template = idToTemplate(template);\n          }\n        } else if (template.nodeType) {\n          template = template.innerHTML;\n        } else {\n          return this\n        }\n      // 再判断，如果有 el\n      } else if (el) {\n        template = getOuterHTML(el);\n      }\n    }\n    return mount.call(this, el, hydrating)\n  };\n```\n\n### 2. 更灵活的写法\n\n比如说我们需要写很多 if 判断的时候\n\n```js\n<template>\n    <h1 v-if=\"level === 1\">\n      <a href=\"xxx\">\n        <slot></slot>\n      </a>\n    </h1>\n    <h2 v-else-if=\"level === 2\">\n      <a href=\"xxx\">\n        <slot></slot>\n      </a>\n    </h2>\n    <h3 v-else-if=\"level === 3\">\n      <a href=\"xxx\">\n        <slot></slot>\n      </a>\n    </h3>\n</template>\n<script>\n  export default {\n    props:['level']\n  }\n</script>\n```\n\n不知道你有没有写过类似上面这样的代码呢？\n\n我们换一种方式来写出和上面一模一样的代码看看，直接写 render\n\n```js\n<script>\n  export default {\n    props:['level'],\n    render(h){\n      return h('h' + this.level, this.$slots.default())\n    }\n  }\n</script>\n```\n\n搞定！就这！就这？\n\n没错，就这！\n\n或者下面这样，多次调用的时候就很方便\n\n```js\n<script>\n  export default {\n    props:['level'],\n    render(h){\n      const tag = 'h' + this.level\n      return (<tag>{this.$slots.default()}</tag>)\n    }\n  }\n</script>\n```",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-16T04:47:50.000Z",
    "updateAt": "2024-01-24T17:24:53.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 189,
    "prev": "94c6d4eb-76c3-4756-956e-9cc277d9d93f",
    "next": "3e12b5bf-53ed-4b71-a199-49d7935f87b4"
  },
  "post": {
    "exerciseKey": "418ef81f-96c6-4c4e-b218-df29be84890d",
    "category": "QA",
    "title": "Vue 模板是如何编译的",
    "level": 3.5,
    "updateAt": "2024-01-24T17:24:53+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}