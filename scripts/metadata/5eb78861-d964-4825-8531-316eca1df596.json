{
  "data": {
    "id": 192,
    "exerciseKey": "5eb78861-d964-4825-8531-316eca1df596",
    "category": "QA",
    "renderType": "md",
    "title": "谈谈 Javascript 中的类型转换机制",
    "desc": null,
    "options": null,
    "explanation": "## 一、概述\n\n`JS `中有六种简单数据类型：`undefined`、`null`、`boolean`、`string`、`number`、`symbol`（`BigInt`处理stage-4阶段，不考虑），以及引用类型：`object`\n\n但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型\n\n```js\nlet x = y ? 1 : a;\n```\n\n上面代码中，`x`的值在编译阶段是无法获取的，只有等到程序运行时才能知道\n\n虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型与预期不符合，就会触发类型转换机制\n\n常见的类型转换有：\n\n- 强制转换（显示转换）\n- 自动转换（隐式转换）\n\n\n\n## 二、显示转换\n\n显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有：\n\n- Number()\n- parseInt()\n- String()\n- Boolean()\n\n\n\n### Number()\n\n将任意类型的值转化为数值\n\n先给出类型转换规则：\n\n ![](https://static.ecool.fun//article/95398e8c-bcd1-4552-9440-ba78b8d35c7a.png)\n\n实践一下：\n\n```js\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber('324') // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber('324abc') // NaN\n\n// 空字符串转为0\nNumber('') // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0\n\n// 对象：通常转换成NaN(除了只包含单个数值的数组)\nNumber({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\n```\n\n从上面可以看到，`Number`转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为`NaN`\n\n\n\n### parseInt()\n\n`parseInt`相比`Number`，就没那么严格了，`parseInt`函数逐个解析字符，遇到不能转换的字符就停下来\n\n```js\nparseInt('32a3') //32\n```\n\n\n\n### String()\n\n可以将任意类型的值转化成字符串\n\n给出转换规则图：\n\n   ![](https://static.ecool.fun//article/9df30a24-fb02-40cc-9854-0bbd7aa1aaa8.png)\n\n实践一下：\n\n```js\n// 数值：转为相应的字符串\nString(1) // \"1\"\n\n//字符串：转换后还是原来的值\nString(\"a\") // \"a\"\n\n//布尔值：true转为字符串\"true\"，false转为字符串\"false\"\nString(true) // \"true\"\n\n//undefined：转为字符串\"undefined\"\nString(undefined) // \"undefined\"\n\n//null：转为字符串\"null\"\nString(null) // \"null\"\n\n//对象\nString({a: 1}) // \"[object Object]\"\nString([1, 2, 3]) // \"1,2,3\"\n```\n\n\n\n### Boolean()\n\n可以将任意类型的值转为布尔值，转换规则如下：\n\n ![](https://static.ecool.fun//article/771f9bb5-fea6-4ad9-809f-f0cf4eb6c2eb.png)\n\n实践一下：\n\n```js\nBoolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean('') // false\nBoolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true\n```\n\n\n\n## 三、隐式转换\n\n在隐式转换中，我们可能最大的疑惑是 ：何时发生隐式转换？\n\n我们这里可以归纳为两种情况发生隐式转换的场景：\n\n- 比较运算（`==`、`!=`、`>`、`<`）、`if`、`while`需要布尔值地方\n- 算术运算（`+`、`-`、`*`、`/`、`%`）\n\n除了上面的场景，还要求运算符两边的操作数不是同一类型\n\n\n\n### 自动转换为布尔值\n\n在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用`Boolean`函数\n\n可以得出个小结：\n\n- undefined \n- null \n- false \n- +0 \n- -0\n- NaN\n- \"\"\n\n除了上面几种会被转化成`false`，其他都换被转化成`true`\n\n\n\n### 自动转换成字符串\n\n遇到预期为字符串的地方，就会将非字符串的值自动转为字符串\n\n具体规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串\n\n常发生在`+`运算中，一旦存在字符串，则会进行字符串拼接操作\n\n```js\n'5' + 1 // '51'\n'5' + true // \"5true\"\n'5' + false // \"5false\"\n'5' + {} // \"5[object Object]\"\n'5' + [] // \"5\"\n'5' + function (){} // \"5function (){}\"\n'5' + undefined // \"5undefined\"\n'5' + null // \"5null\"\n```\n\n\n\n### 自动转换成数值\n\n除了`+`有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值\n\n```js\n'5' - '2' // 3\n'5' * '2' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n'1' - 1   // 0\n'5' * []    // 0\nfalse / '5' // 0\n'abc' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n```\n\n`null`转为数值时，值为`0` 。`undefined`转为数值时，值为`NaN`",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:47:34.000Z",
    "updateAt": "2024-01-24T17:33:16.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 169,
    "prev": "ddec2e9f-993c-4298-8477-b7bc25db7713",
    "next": "39513146-d7a4-41ad-963f-ba32242ddc55"
  },
  "post": {
    "exerciseKey": "5eb78861-d964-4825-8531-316eca1df596",
    "category": "QA",
    "title": "谈谈 Javascript 中的类型转换机制",
    "level": 2,
    "updateAt": "2024-01-24T17:33:16+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}