{
  "data": {
    "id": 1935,
    "exerciseKey": "460a9714-1001-4beb-b12a-be8fec732879",
    "category": "QA",
    "renderType": "md",
    "title": "使用 React hooks 怎么实现类里面的所有生命周期？",
    "desc": null,
    "options": null,
    "explanation": "在 React 16.8 之前，函数组件也称为无状态组件，因为函数组件也不能访问 react 生命周期，也没有自己的状态。react 自 16.8 开始，引入了 Hooks 概念，使得函数组件中也可以拥有自己的状态，并且可以模拟对应的生命周期。\n\n我们应该在什么时候使用 Hooks 呢？\n\n官方并不建议我们把原有的 class 组件，大规模重构成 Hooks，而是有一个渐进过程:\n\n* 首先，原有的函数组件如果需要自己的状态或者需要访问生命周期函数，那么用 Hooks 是再好不过了；\n* 另外就是，我们可以先在一些逻辑较简单的组件上尝试 Hooks ，在使用起来相对较熟悉，且组内人员比较能接受的前提下，再扩大 Hooks 的使用范围。\n\n那么相对于传统class， Hooks 有哪些优势?\n\n* State Hook 使得组件内的状态的设置和更新相对独立，这样便于对这些状态单独测试并复用。\n* Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分，这样使得各个逻辑相对独立和清晰。\n\n### class 生命周期在 Hooks 中的实现\n\nHooks 组件更接近于实现状态同步，而不是响应生命周期事件。但是，由于我们先熟悉的 class 的生命周期，在写代码时，难免会受此影响，那么 Hooks 中如何模拟 class 的中的生命周期呢：\n\n总结：\n\n| class 组件                 | Hooks 组件                                       |\n| ------------------------ | ---------------------------------------------- |\n| constructor              | useState                                       |\n| getDerivedStateFromProps | useEffect 手动对比 props， 配合 useState 里面 update 函数 |\n| shouldComponentUpdate    | React.memo                                     |\n| render                   | 函数本身                                           |\n| componentDidMount        | useEffect 第二个参数为\\[\\]                           |\n| componentDidUpdate       | useEffect 配合useRef                             |\n| componentWillUnmount     | useEffect 里面返回的函数                              |\n| componentDidCatch        | 无                                              |\n| getDerivedStateFromError | 无                                              |\n\n代码实现：\n\n```js\nimport React, { useState, useEffect, useRef, memo } from 'react';\n\n// 使用 React.memo 实现类似 shouldComponentUpdate 的优化， React.memo 只对 props 进行浅比较\nconst UseEffectExample = memo((props) => {\n    console.log(\"===== UseStateExample render=======\");\n    // 声明一个叫 “count” 的 state 变量。\n    const [count, setCount] = useState(0);\n    const [count2, setCount2] = useState(0);\n    const [fatherCount, setFatherCount] = useState(props.fatherCount)\n\n    console.log(props);\n\n    // 模拟 getDerivedStateFromProps\n    useEffect(() => {\n        // props.fatherCount 有更新，才执行对应的修改，没有更新执行另外的逻辑\n        if(props.fatherCount == fatherCount ){\n            console.log(\"======= 模拟 getDerivedStateFromProps=======\");\n            console.log(props.fatherCount, fatherCount);\n        }else{\n            setFatherCount(props.fatherCount);\n            console.log(props.fatherCount, fatherCount);\n        }\n    })\n\n    // 模拟DidMount\n    useEffect(() => {\n        console.log(\"=======只渲染一次(相当于DidMount)=======\");\n        console.log(count);\n    }, [])\n\n    // 模拟DidUpdate\n    const mounted = useRef();\n    useEffect(() => {\n        console.log(mounted);\n        if (!mounted.current) {\n            mounted.current = true;\n          } else {\n            console.log(\"======count 改变时才执行(相当于DidUpdate)=========\");\n            console.log(count);\n          }\n    }, [count])\n\n    // 模拟 Didmount和DidUpdate 、 unmount\n    useEffect(() => {\n    \t// 在 componentDidMount，以及 count 更改时 componentDidUpdate 执行的内容\n        console.log(\"======初始化、或者 count 改变时才执行(相当于Didmount和DidUpdate)=========\");\n        console.log(count);\n        return () => {\n        \t\n            console.log(\"====unmount=======\");\n            console.log(count);\n        }\n    }, [count])\n\n    return (\n        <div>\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n                Click me\n            </button>\n\n            <button onClick={() => setCount2(count2 + 1)}>\n                Click me2\n            </button>\n        </div>\n    );\n});\n\nexport default UseEffectExample;\n```\n\n### 注意事项\n\n* useState 只在初始化时执行一次，后面不再执行；\n* useEffect 相当于是 componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个函数的组合，可以通过传参及其他逻辑，分别模拟这三个生命周期函数；\n* useEffect 第二个参数是一个数组，如果数组为空时，则只执行一次（相当于componentDidMount）；如果数组中有值时，则该值更新时，useEffect 中的函数才会执行；如果没有第二个参数，则每次render时，useEffect 中的函数都会执行；\n* React 保证了每次运行 effect 的同时，DOM 都已经更新完毕，也就是说 effect 中的获取的 state 是最新的，但是需要注意的是，effect 中返回的函数（其清除函数）中，获取到的 state 是更新前的。\n* 传递给 useEffect 的函数在每次渲染中都会有所不同，这是刻意为之的。事实上这正是我们可以在 effect 中获取最新的 count 的值，而不用担心其过期的原因。每次我们重新渲染，都会生成新的 effect，替换掉之前的。某种意义上讲，effect 更像是渲染结果的一部分 —— 每个 effect “属于”一次特定的渲染。\n* effect 的清除阶段（返回函数）在每次重新渲染时都会执行，而不是只在卸载组件的时候执行一次。它会在调用一个新的 effect 之前对前一个 effect 进行清理，从而避免了我们手动去处理一些逻辑 。为了说明这一点，下面按时间列出一个可能会产生的订阅和取消订阅操作调用序列：  \n```js\nfunction FriendStatus(props) {  \n\t// ...  \n\tuseEffect(() => {  \n    \t// ...  \n      \tChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);  \n    \treturn () => {  \n    \t\tChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);  \n    \t};  \n\t});  \n    \n    // ...\n}\n    \n// Mount with { friend: { id: 100 } } props  \nChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // 运行第一个 effect  \n\n// Update with { friend: { id: 200 } } props  \nChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // 清除上一个 effect  \nChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // 运行下一个 effect  \n\n// Update with { friend: { id: 300 } } props  \nChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // 清除上一个 effect  \nChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // 运行下一个 effect  \n\n// Unmount  \nChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // 清除最后一个 effect  \n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-01-09T12:00:38.000Z",
    "updateAt": "2023-02-05T19:01:09.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 451,
    "prev": "c00d61b8-2609-40b9-8deb-a4fdb686e7c7",
    "next": "274fa7ad-e6d3-43e7-8841-6d68c280166b"
  },
  "post": {
    "exerciseKey": "460a9714-1001-4beb-b12a-be8fec732879",
    "category": "QA",
    "title": "使用 React hooks 怎么实现类里面的所有生命周期？",
    "level": 3,
    "updateAt": "2023-02-05T19:01:09+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}