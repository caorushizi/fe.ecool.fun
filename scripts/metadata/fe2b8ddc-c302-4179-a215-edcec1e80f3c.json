{
  "data": {
    "id": 248,
    "exerciseKey": "fe2b8ddc-c302-4179-a215-edcec1e80f3c",
    "category": "QA",
    "renderType": "md",
    "title": "大型项目中，Vue项目怎么划分结构和划分组件比较合理呢？",
    "desc": null,
    "options": null,
    "explanation": "## 一、为什么要划分\n\n使用`vue`构建项目，项目结构清晰会提高开发效率，熟悉项目的各种配置同样会让开发效率更高\n\n在划分项目结构的时候，需要遵循一些基本的原则：\n\n- 文件夹和文件夹内部文件的语义一致性\n- 单一入口/出口\n- 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用\n- 公共的文件应该以绝对路径的方式从根目录引用\n- `/src` 外的文件不应该被引入\n\n\n\n### 文件夹和文件夹内部文件的语义一致性\n\n我们的目录结构都会有一个文件夹是按照路由模块来划分的，如`pages`文件夹，这个文件夹里面应该包含我们项目所有的路由模块，并且仅应该包含路由模块，而不应该有别的其他的非路由模块的文件夹\n\n这样做的好处在于一眼就从 `pages`文件夹看出这个项目的路由有哪些\n\n\n\n### 单一入口/出口\n\n举个例子，在`pages`文件夹里面存在一个`seller`文件夹，这时候`seller` 文件夹应该作为一个独立的模块由外部引入，并且 `seller/index.js` 应该作为外部引入 seller 模块的唯一入口\n\n```js\n// 错误用法\nimport sellerReducer from 'src/pages/seller/reducer'\n\n// 正确用法\nimport { reducer as sellerReducer } from 'src/pages/seller'\n```\n\n这样做的好处在于，无论你的模块文件夹内部有多乱，外部引用的时候，都是从一个入口文件引入，这样就很好的实现了隔离，如果后续有重构需求，你就会发现这种方式的优点\n\n\n\n\n\n### 就近原则，紧耦合的文件应该放到一起，且应以相对路径引用\n\n使用相对路径可以保证模块内部的独立性\n\n```js\n// 正确用法\nimport styles from './index.module.scss'\n// 错误用法\nimport styles from 'src/pages/seller/index.module.scss'\n```\n\n举个例子\n\n假设我们现在的 seller 目录是在 `src/pages/seller`，如果我们后续发生了路由变更，需要加一个层级，变成 `src/pages/user/seller`。\n\n如果我们采用第一种相对路径的方式，那就可以直接将整个文件夹拖过去就好，`seller` 文件夹内部不需要做任何变更。\n\n但是如果我们采用第二种绝对路径的方式，移动文件夹的同时，还需要对每个 `import` 的路径做修改\n\n\n\n### 公共的文件应该以绝对路径的方式从根目录引用\n\n公共指的是多个路由模块共用，如一些公共的组件，我们可以放在`src/components`下\n\n在使用到的页面中，采用绝对路径的形式引用\n\n```js\n// 错误用法\nimport Input from '../../components/input'\n// 正确用法\nimport Input from 'src/components/input'\n```\n\n同样的，如果我们需要对文件夹结构进行调整。将 `/src/components/input` 变成 `/src/components/new/input`，如果使用绝对路径，只需要全局搜索替换\n\n再加上绝对路径有全局的语义，相对路径有独立模块的语义\n\n\n\n### /src 外的文件不应该被引入\n\n`vue-cli`脚手架已经帮我们做了相关的约束了，正常我们的前端项目都会有个` src `文件夹，里面放着所有的项目需要的资源，`js`,` css`, `png`, `svg` 等等。`src` 外会放一些项目配置，依赖，环境等文件\n\n这样的好处是方便划分项目代码文件和配置文件\n\n\n\n## 二、目录结构\n\n单页面目录结构\n\n```js\nproject\n│  .browserslistrc\n│  .env.production\n│  .eslintrc.js\n│  .gitignore\n│  babel.config.js\n│  package-lock.json\n│  package.json\n│  README.md\n│  vue.config.js\n│  yarn-error.log\n│  yarn.lock\n│\n├─public\n│      favicon.ico\n│      index.html\n│\n|-- src\n    |-- components\n        |-- input\n            |-- index.js\n            |-- index.module.scss\n    |-- pages\n        |-- seller\n            |-- components\n                |-- input\n                    |-- index.js\n                    |-- index.module.scss\n            |-- reducer.js\n            |-- saga.js\n            |-- index.js\n            |-- index.module.scss\n        |-- buyer\n            |-- index.js\n        |-- index.js\n```\n\n多页面目录结构\n\n```js\nmy-vue-test:.\n│  .browserslistrc\n│  .env.production\n│  .eslintrc.js\n│  .gitignore\n│  babel.config.js\n│  package-lock.json\n│  package.json\n│  README.md\n│  vue.config.js\n│  yarn-error.log\n│  yarn.lock\n│\n├─public\n│      favicon.ico\n│      index.html\n│\n└─src\n    ├─apis //接口文件根据页面或实例模块化\n    │      index.js\n    │      login.js\n    │\n    ├─components //全局公共组件\n    │  └─header\n    │          index.less\n    │          index.vue\n    │\n    ├─config //配置（环境变量配置不同passid等）\n    │      env.js\n    │      index.js\n    │\n    ├─contant //常量\n    │      index.js\n    │\n    ├─images //图片\n    │      logo.png\n    │\n    ├─pages //多页面vue项目，不同的实例\n    │  ├─index //主实例\n    │  │  │  index.js\n    │  │  │  index.vue\n    │  │  │  main.js\n    │  │  │  router.js\n    │  │  │  store.js\n    │  │  │\n    │  │  ├─components //业务组件\n    │  │  └─pages //此实例中的各个路由\n    │  │      ├─amenu\n    │  │      │      index.vue\n    │  │      │\n    │  │      └─bmenu\n    │  │              index.vue\n    │  │\n    │  └─login //另一个实例\n    │          index.js\n    │          index.vue\n    │          main.js\n    │\n    ├─scripts //包含各种常用配置，工具函数\n    │  │  map.js\n    │  │\n    │  └─utils\n    │          helper.js\n    │\n    ├─store //vuex仓库\n    │  │  index.js\n    │  │\n    │  ├─index\n    │  │      actions.js\n    │  │      getters.js\n    │  │      index.js\n    │  │      mutation-types.js\n    │  │      mutations.js\n    │  │      state.js\n    │  │\n    │  └─user\n    │          actions.js\n    │          getters.js\n    │          index.js\n    │          mutation-types.js\n    │          mutations.js\n    │          state.js\n    │\n    └─styles //样式统一配置\n        │  components.less\n        │\n        ├─animation\n        │      index.less\n        │      slide.less\n        │\n        ├─base\n        │      index.less\n        │      style.less\n        │      var.less\n        │      widget.less\n        │\n        └─common\n                index.less\n                reset.less\n                style.less\n                transition.less\n```\n\n\n\n### 小结\n\n项目的目录结构很重要，因为目录结构能体现很多东西，怎么规划目录结构可能每个人有自己的理解，但是按照一定的规范去进行目录的设计，能让项目整个架构看起来更为简洁，更加易用\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:48:20.000Z",
    "updateAt": "2024-01-25T15:38:42.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 125,
    "prev": "f43b7906-f51f-454f-8028-ea027ae3e121",
    "next": "605ec5f7-3768-4aa4-8cdc-3b5bd90bebc3"
  },
  "post": {
    "exerciseKey": "fe2b8ddc-c302-4179-a215-edcec1e80f3c",
    "category": "QA",
    "title": "大型项目中，Vue项目怎么划分结构和划分组件比较合理呢？",
    "level": 3,
    "updateAt": "2024-01-25T15:38:42+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}