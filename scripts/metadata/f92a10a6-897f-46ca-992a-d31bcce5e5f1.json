{
  "data": {
    "id": 612,
    "exerciseKey": "f92a10a6-897f-46ca-992a-d31bcce5e5f1",
    "category": "QA",
    "renderType": "md",
    "title": "两数之和",
    "desc": "给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出 **和为目标值** `target`  的那 **两个** 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。\n\n示例 1：\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n示例 2：\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n示例 3：\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n \n提示：\n\n* 2 <= nums.length <= 104\n* -109 <= nums[i] <= 109\n* -109 <= target <= 109\n* 只会存在一个有效答案\n",
    "options": null,
    "explanation": "## 暴力解法\n\n### 思路及算法\n\n最容易想到的方法是枚举数组中的每一个数 `x`，寻找数组中是否存在 `target - x`。\n\n当我们使用遍历整个数组的方式寻找 `target - x` 时，需要注意到每一个位于 `x` 之前的元素都已经和 `x` 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 `x` 后面的元素中寻找 `target - x`。\n\n```js\nvar twoSum = function (nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] + nums[i] === target) {\n        return [i, j];\n      }\n    }\n  }\n  return [];\n};\n```\n\n### 复杂度分析\n\n* 时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。\n* 空间复杂度：O(1)。\n\n## 方法二：哈希表\n\n### 思路及算法\n\n注意到方法一的时间复杂度较高的原因是寻找 `target - x` 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。\n\n使用哈希表，可以将寻找 `target - x` 的时间复杂度降低到从 O(N) 降低到 O(1)。\n\n这样我们创建一个哈希表，对于每一个 `x`，我们首先查询哈希表中是否存在 `target - x`，然后将 `x` 插入到哈希表中，即可保证不会让 `x` 和自己匹配。\n\n```js\nvar twoSum = function(nums, target) {\n    let map = new Map();\n    for(let i = 0, len = nums.length; i < len; i++){\n        if(map.has(target - nums[i])){\n            return [map.get(target - nums[i]), i];\n        }else{\n            map.set(nums[i], i);\n        }\n    }\n    return [];\n};\n```\n\n### 复杂度分析\n\n* 时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素 `x`，我们可以 O(1) 地寻找 `target - x`。\n* 空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。\n",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-08-30T02:58:57.000Z",
    "updateAt": "2021-08-30T10:59:15.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 770,
    "prev": "a4eeac78-8db1-44df-ae79-a5adb65eb55b",
    "next": "0bb0b3a7-ed1b-41c0-a93e-7187b2aa85a8"
  },
  "post": {
    "exerciseKey": "f92a10a6-897f-46ca-992a-d31bcce5e5f1",
    "category": "QA",
    "title": "两数之和",
    "level": 1.5,
    "updateAt": "2021-08-30T10:59:15+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}