{
  "data": {
    "id": 195,
    "exerciseKey": "e9bcc1f4-1b0a-4213-9d3a-8e64c97c7848",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对闭包的理解，以及闭包使用场景",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）\n\n也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域\n\n在 `JavaScript `中，每当创建一个函数，闭包就会在函数创建的同时被创建出来，作为函数内部与外部连接起来的一座桥梁\n\n下面给出一个简单的例子\n\n```js\nfunction init() {\n    var name = \"Mozilla\"; // name 是一个被 init 创建的局部变量\n    function displayName() { // displayName() 是内部函数，一个闭包\n        alert(name); // 使用了父函数中声明的变量\n    }\n    displayName();\n}\ninit();\n```\n\n`displayName()` 没有自己的局部变量。然而，由于闭包的特性，它可以访问到外部函数的变量\n\n\n\n## 二、使用场景\n\n任何闭包的使用场景都离不开这两点：\n\n- 创建私有变量\n- 延长变量的生命周期\n\n> 一般函数的词法环境在函数返回后就被销毁，但是闭包会保存对创建时所在词法环境的引用，即便创建时所在的执行上下文被销毁，但创建时所在词法环境依然存在，以达到延长变量的生命周期的目的\n\n\n下面举个例子：\n\n在页面上添加一些可以调整字号的按钮\n\n```js\nfunction makeSizer(size) {\n  return function() {\n    document.body.style.fontSize = size + 'px';\n  };\n}\n\nvar size12 = makeSizer(12);\nvar size14 = makeSizer(14);\nvar size16 = makeSizer(16);\n\ndocument.getElementById('size-12').onclick = size12;\ndocument.getElementById('size-14').onclick = size14;\ndocument.getElementById('size-16').onclick = size16;\n```\n\n\n\n### 柯里化函数\n\n柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用\n\n```js\n// 假设我们有一个求长方形面积的函数\nfunction getArea(width, height) {\n    return width * height\n}\n// 如果我们碰到的长方形的宽老是10\nconst area1 = getArea(10, 20)\nconst area2 = getArea(10, 30)\nconst area3 = getArea(10, 40)\n\n// 我们可以使用闭包柯里化这个计算面积的函数\nfunction getArea(width) {\n    return height => {\n        return width * height\n    }\n}\n\nconst getTenWidthArea = getArea(10)\n// 之后碰到宽度为10的长方形就可以这样计算面积\nconst area1 = getTenWidthArea(20)\n\n// 而且如果遇到宽度偶尔变化也可以轻松复用\nconst getTwentyWidthArea = getArea(20)\n```\n\n\n\n### 使用闭包模拟私有方法\n\n在`JavaScript`中，没有支持声明私有变量，但我们可以使用闭包来模拟私有方法\n\n\n下面举个例子：\n\n```js\nvar Counter = function() {\n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  }\n};\n\nvar Counter1 = Counter();\nvar Counter2 = Counter();\nconsole.log(Counter1.value()); /* logs 0 */\nCounter1.increment();\nCounter1.increment();\nconsole.log(Counter1.value()); /* logs 2 */\nCounter1.decrement();\nconsole.log(Counter1.value()); /* logs 1 */\nconsole.log(Counter2.value()); /* logs 0 */\n```\n\n上述通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式\n\n两个计数器 `Counter1` 和 `Counter2` 是维护它们各自的独立性的，每次调用其中一个计数器时，通过改变这个变量的值，会改变这个闭包的词法环境，不会影响另一个闭包中的变量\n\n\n\n### 其他\n\n例如计数器、延迟调用、回调等闭包的应用，其核心思想还是创建私有变量和延长变量的生命周期\n\n\n\n## 三、注意事项\n\n如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响\n\n例如，在创建新的对象或者类时，方法通常应该关联于对象的原型，而不是定义到对象的构造器中。\n\n原因在于每个对象的创建，方法都会被重新赋值\n\n```js\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n  this.getName = function() {\n    return this.name;\n  };\n\n  this.getMessage = function() {\n    return this.message;\n  };\n}\n```\n\n上面的代码中，我们并没有利用到闭包的好处，因此可以避免使用闭包。修改成如下：\n\n```js\nfunction MyObject(name, message) {\n  this.name = name.toString();\n  this.message = message.toString();\n}\nMyObject.prototype.getName = function() {\n  return this.name;\n};\nMyObject.prototype.getMessage = function() {\n  return this.message;\n};\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:49:17.000Z",
    "updateAt": "2024-01-24T17:33:51.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 166,
    "prev": "d1bb4169-cd53-4398-b4a1-5e0c533c87dc",
    "next": "a5330a58-5be0-4f4f-8394-43392311ddaa"
  },
  "post": {
    "exerciseKey": "e9bcc1f4-1b0a-4213-9d3a-8e64c97c7848",
    "category": "QA",
    "title": "说说你对闭包的理解，以及闭包使用场景",
    "level": 3,
    "updateAt": "2024-01-24T17:33:51+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}