{
  "data": {
    "id": 1979,
    "exerciseKey": "f355de02-e03c-4d97-ac11-cd1de62867ab",
    "category": "QA",
    "renderType": "md",
    "title": "async/await、generator、promise 这三者的关联和区别是什么?",
    "desc": null,
    "options": null,
    "explanation": "`promise`与`async/await` 函数都是用来解决`JavaScript`中的异步问题，从最开始的回调函数处理异步，到`Promise`处理异步，到`Generator`处理异步，再到`Async/await`处理异步，每一次的技术更新都使得`JavaScript`处理异步的方式更加优雅。\n\n从目前来看，`Async/await`被认为是异步处理的终极解决方案，让JS的异步处理越来越像同步任务。\n\n\n## 关联\n\n- async/await：是建立在Generator函数的语法糖，可以更方便地实现异步编程。async 函数返回一个 Promise 对象，await 表达式会阻塞代码执行，直到 Promise 对象状态变为 resolved。\n\n- Promise：是一种异步编程模型，可以将回调函数嵌套的代码转换为链式调用。Promise 由 pending、fulfilled 和 rejected 三种状态，分别代表进行中、已完成和已失败。\n\n- Generator：是一种迭代器，可以通过 yield 表达式暂停代码执行，并通过 next() 方法恢复执行。Generator 可以配合 Promise 实现异步流程控制。\n\n## 区别\n\n- async/await：是 ES7 引入的新特性，可以让异步编程看起来像同步编程，更加易读易写。async/await 只能用于函数内部，不能用于顶层代码（例如全局作用域）。（PS：高版本的Node中，可以在顶层使用 await）\n\n- Promise：是 ES6 引入的新特性，使用 then() 方法和 catch() 方法注册回调函数，实现异步编程。Promise 可以使用 race() 方法和 all() 方法处理多个异步操作。\n\n- Generator：是 ES6 引入的新特性，可以通过 yield 表达式暂停和恢复代码执行，实现异步流程控制。Generator 需要手动执行 next() 方法，才能继续执行下一步操作。\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-15T13:33:11.000Z",
    "updateAt": "2023-12-17T18:31:41.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 257,
    "prev": "99dbb991-2615-4a8c-9374-73769803692d",
    "next": "a4905b6d-283a-48ee-8c19-6f390f7fd9bc"
  },
  "post": {
    "exerciseKey": "f355de02-e03c-4d97-ac11-cd1de62867ab",
    "category": "QA",
    "title": "async/await、generator、promise 这三者的关联和区别是什么?",
    "level": 3,
    "updateAt": "2023-12-17T18:31:41+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}