{
  "data": {
    "id": 201,
    "exerciseKey": "82a3da79-23fb-42be-8f4b-9d52fc595954",
    "category": "QA",
    "renderType": "md",
    "title": "JavaScript中的事件模型有哪些",
    "desc": null,
    "options": null,
    "explanation": "## 一、事件与事件流\n\n`javascript`中的事件，可以理解就是在`HTML`文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等\n\n由于`DOM`是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念\n\n事件流都会经历三个阶段：\n\n- 事件捕获阶段(capture phase)\n- 处于目标阶段(target phase)\n- 事件冒泡阶段(bubbling phase)\n\n ![](https://static.ecool.fun//article/cda1838d-f839-4588-9787-bbaa0bec65ea.png)\n\n事件冒泡是一种从下往上的传播方式，由最具体的元素（触发节点）然后逐渐向上传播到最不具体的那个节点，也就是`DOM`中最高层的父节点\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Event Bubbling</title>\n    </head>\n    <body>\n        <button id=\"clickMe\">Click Me</button>\n    </body>\n</html>\n```\n\n然后，我们给`button`和它的父元素，加入点击事件\n\n```js\nvar button = document.getElementById('clickMe');\n\nbutton.onclick = function() {\n  console.log('1.Button');\n};\ndocument.body.onclick = function() {\n  console.log('2.body');\n};\ndocument.onclick = function() {\n  console.log('3.document');\n};\nwindow.onclick = function() {\n  console.log('4.window');\n};\n```\n\n点击按钮，输出如下\n\n```js\n1.button\n2.body\n3.document\n4.window\n```\n\n点击事件首先在`button`元素上发生，然后逐级向上传播\n\n事件捕获与事件冒泡相反，事件最开始由不太具体的节点最早接受事件, 而最具体的节点（触发节点）最后接受事件\n\n\n\n## 二、事件模型\n\n事件模型可以分为三种：\n\n- 原始事件模型（DOM0级）\n- 标准事件模型（DOM2级）\n- IE事件模型（基本不用）\n\n\n\n### 原始事件模型\n\n事件绑定监听函数比较简单, 有两种方式：\n\n- HTML代码中直接绑定\n\n```js\n<input type=\"button\" onclick=\"fun()\">\n```\n\n- 通过`JS`代码绑定\n\n```js\nvar btn = document.getElementById('.btn');\nbtn.onclick = fun;\n```\n\n#### 特性\n\n- 绑定速度快\n\n`DOM0`级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行\n\n- 只支持冒泡，不支持捕获\n\n- 同一个类型的事件只能绑定一次\n\n```js\n<input type=\"button\" id=\"btn\" onclick=\"fun1()\">\n\nvar btn = document.getElementById('.btn');\nbtn.onclick = fun2;\n```\n\n如上，当希望为同一个元素绑定多个同类型事件的时候（上面的这个`btn`元素绑定2个点击事件），是不被允许的，后绑定的事件会覆盖之前的事件\n\n删除 `DOM0` 级事件处理程序只要将对应事件属性置为`null`即可\n\n```js\nbtn.onclick = null;\n```\n\n\n\n\n\n### 标准事件模型\n\n在该事件模型中，一次事件共有三个过程:\n\n- 事件捕获阶段：事件从`document`一直向下传播到目标元素, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行\n- 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数\n- 事件冒泡阶段：事件从目标元素冒泡到`document`, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行\n\n事件绑定监听函数的方式如下:\n\n```\naddEventListener(eventType, handler, useCapture)\n```\n\n事件移除监听函数的方式如下:\n\n```\nremoveEventListener(eventType, handler, useCapture)\n```\n\n参数如下：\n\n- `eventType`指定事件类型(不要加on)\n- `handler`是事件处理函数\n- `useCapture`是一个`boolean`用于指定是否在捕获阶段进行处理，一般设置为`false`与IE浏览器保持一致\n\n举个例子：\n\n```js\nvar btn = document.getElementById('.btn');\nbtn.addEventListener(‘click’, showMessage, false);\nbtn.removeEventListener(‘click’, showMessage, false);\n```\n\n#### 特性\n\n- 可以在一个`DOM`元素上绑定多个事件处理器，各自并不会冲突\n\n```js\nbtn.addEventListener(‘click’, showMessage1, false);\nbtn.addEventListener(‘click’, showMessage2, false);\nbtn.addEventListener(‘click’, showMessage3, false);\n```\n\n- 执行时机\n\n当第三个参数(`useCapture`)设置为`true`就在捕获过程中执行，反之在冒泡过程中执行处理函数\n\n下面举个例子：\n\n```js\n<div id='div'>\n    <p id='p'>\n        <span id='span'>Click Me!</span>\n    </p >\n</div>\n```\n\n设置点击事件\n\n```js\nvar div = document.getElementById('div');\nvar p = document.getElementById('p');\n\nfunction onClickFn (event) {\n    var tagName = event.currentTarget.tagName;\n    var phase = event.eventPhase;\n    console.log(tagName, phase);\n}\n\ndiv.addEventListener('click', onClickFn, false);\np.addEventListener('click', onClickFn, false);\n```\n\n上述使用了`eventPhase`，返回一个代表当前执行阶段的整数值。1为捕获阶段、2为事件对象触发阶段、3为冒泡阶段\n\n点击`Click Me!`，输出如下\n\n```js\nP 3\nDIV 3\n```\n\n可以看到，`p`和`div`都是在冒泡阶段响应了事件，由于冒泡的特性，裹在里层的`p`率先做出响应\n\n如果把第三个参数都改为`true`\n\n```js\ndiv.addEventListener('click', onClickFn, true);\np.addEventListener('click', onClickFn, true);\n```\n\n输出如下\n\n```js\nDIV 1\nP 1\n```\n\n两者都是在捕获阶段响应事件，所以`div`比`p`标签先做出响应\n\n\n\n### IE事件模型\n\nIE事件模型共有两个过程:\n\n- 事件处理阶段：事件到达目标元素, 触发目标元素的监听函数。\n- 事件冒泡阶段：事件从目标元素冒泡到`document`, 依次检查经过的节点是否绑定了事件监听函数，如果有则执行\n\n事件绑定监听函数的方式如下:\n\n```\nattachEvent(eventType, handler)\n```\n\n事件移除监听函数的方式如下:\n\n```\ndetachEvent(eventType, handler)\n```\n\n举个例子：\n\n```js\nvar btn = document.getElementById('.btn');\nbtn.attachEvent(‘onclick’, showMessage);\nbtn.detachEvent(‘onclick’, showMessage);\n```",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:52:15.000Z",
    "updateAt": "2024-01-24T17:35:40.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 161,
    "prev": "4354687c-2600-4b62-98ec-2bef8df9a171",
    "next": "c137050b-10f5-4a4f-9941-820ad7a9894d"
  },
  "post": {
    "exerciseKey": "82a3da79-23fb-42be-8f4b-9d52fc595954",
    "category": "QA",
    "title": "JavaScript中的事件模型有哪些",
    "level": 1.5,
    "updateAt": "2024-01-24T17:35:40+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}