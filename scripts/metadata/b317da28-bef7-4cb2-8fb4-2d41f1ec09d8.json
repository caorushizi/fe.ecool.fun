{
  "data": {
    "id": 1692,
    "exerciseKey": "b317da28-bef7-4cb2-8fb4-2d41f1ec09d8",
    "category": "QA",
    "renderType": "md",
    "title": "两个 Node.js 进程如何通信？",
    "desc": null,
    "options": null,
    "explanation": "两个 Node.js 进程之间如何进行通信呢？这里要分两种场景：\n\n1.  不同电脑上的两个 Node.js 进程间通信\n2.  同一台电脑上两个 Node.js 进程间通信\n\n对于第一种场景，通常使用 TCP 或 HTTP 进行通信，而对于第二种场景，又分为两种子场景：\n\n1.  Node.js 进程和自己创建的 Node.js 子进程通信\n2.  Node.js 进程和另外不相关的 Node.js 进程通信\n\n前者可以使用内置的 IPC 通信通道，后者可以使用自定义管道，接下来进行详细介绍：\n\n## 不同电脑上的两个 Node.js 进程间通信\n\n要想进行通信，首先得搞清楚如何标识网络中的进程？网络层的 ip 地址可以唯一标识网络中的主机，而传输层的协议和端口可以唯一标识主机中的应用程序（进程），这样利用三元组（ip 地址，协议，端口）就可以标识网络的进程了。\n\n### 使用 TCP 套接字\n\nTCP 套接字（socket）是一种基于 TCP/IP 协议的通信方式，可以让通过网络连接的计算机上的进程进行通信。一个作为 server 另一个作为 client，server.js 代码如下：\n\n```js\nconst net = require('net')\nconst server = net.createServer(socket => {\n  console.log('socket connected')\n  socket.on('close', () => console.log('socket disconnected'))\n  socket.on('error', err => console.error(err.message))\n  socket.on('data', data => {\n    console.log(`receive: ${data}`)\n    socket.write(data)\n    console.log(`send: ${data}`)\n  })\n})\nserver.listen(8888)\n\n```\n\nclient.js 代码：\n\n```js\nconst net = require('net')\nconst client = net.connect(8888, '192.168.10.105')\n\nclient.on('connect', () => console.log('connected.'))\nclient.on('data', data => console.log(`receive: ${data}`))\nclient.on('end', () => console.log('disconnected.'))\nclient.on('error', err => console.error(err.message))\n\nsetInterval(() => {\n  const msg = 'hello'\n  console.log(`send: ${msg}`)\n  client.write(msg)\n}, 3000)\n\n```\n\n运行效果：\n\n```sh\n$ node server.js\nclient connected\nreceive: hello\nsend: hello\n\n$ node client.js\nconnect to server\nsend: hello\nreceive: hello\n\n```\n\n### 使用 HTTP 协议\n\n因为 HTTP 协议也是基于 TCP 的，所以从通信角度看，这种方式本质上并无区别，只是封装了上层协议。server.js 代码为：\n\n```js\nconst http = require('http')\nhttp.createServer((req, res) => res.end(req.url)).listen(8888)\n\n```\n\nclient.js 代码：\n\n```js\nconst http = require('http')\nconst options = {\n  hostname: '192.168.10.105',\n  port: 8888,\n  path: '/hello',\n  method: 'GET',\n}\nconst req = http.request(options, res => {\n  console.log(`statusCode: ${res.statusCode}`)\n  res.on('data', d => process.stdout.write(d))\n})\nreq.on('error', error => console.error(error))\nreq.end()\n\n```\n\n运行效果：\n\n```sh\n$ node server.js\nurl /hello\n\n$ node client.js\nstatusCode: 200\nhello\n\n```\n\n## 同一台电脑上两个 Node.js 进程间通信\n\n虽然网络 socket 也可用于同一台主机的进程间通讯（通过 loopback 地址 127.0.0.1），但是这种方式需要经过网络协议栈、需要打包拆包、计算校验和、维护序号和应答等，就是为网络通讯设计的，而同一台电脑上的两个进程可以有更高效的通信方式，即 IPC（Inter-Process Communication），在 unix 上具体的实现方式为 unix domain socket，这是服务器端和客户端之间通过本地打开的套接字文件进行通信的一种方法，与 TCP 通信不同，通信时指定本地文件，因此不进行域解析和外部通信，所以比 TCP 快，在同一台主机的传输速度是 TCP 的两倍。\n\n### 使用内置 IPC 通道\n\n如果是跟自己创建的子进程通信，是非常方便的，child_process模块中的 fork 方法自带通信机制，无需关注底层细节，例如父进程 parent.js 代码：\n\n```js\nconst fork = require(\"child_process\").fork\nconst path = require(\"path\")\nconst child = fork(path.resolve(\"child.js\"), [], { stdio: \"inherit\" });\nchild.on(\"message\", (message) => {\n  console.log(\"message from child:\", message)\n  child.send(\"hi\")\n})\n```\n\n子进程 child.js 代码：\n\n```js\nprocess.on(\"message\", (message) => {\n  console.log(\"message from parent:\", message);\n})\n\nif (process.send) {\n  setInterval(() => process.send(\"hello\"), 3000)\n}\n\n```\n\n运行效果如下：\n\n```sh\n$ node parent.js\nmessage from child: hello\nmessage from parent: hi\nmessage from child: hello\nmessage from parent: hi\n\n```\n\n### 使用自定义管道\n\n如果是两个独立的 Node.js 进程，如何建立通信通道呢？在 Windows 上可以使用命名管道（Named PIPE），在 unix 上可以使用 unix domain socket，也是一个作为 server，另外一个作为 client，其中 server.js 代码如下：\n\n```js\nconst net = require('net')\nconst fs = require('fs')\n\nconst pipeFile = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\mypip' : '/tmp/unix.sock'\n\nconst server = net.createServer(connection => {\n  console.log('socket connected.')\n  connection.on('close', () => console.log('disconnected.'))\n  connection.on('data', data => {\n    console.log(`receive: ${data}`)\n    connection.write(data)\n    console.log(`send: ${data}`)\n  })\n  connection.on('error', err => console.error(err.message))\n})\n\ntry {\n  fs.unlinkSync(pipeFile)\n} catch (error) {}\n\nserver.listen(pipeFile)\n```\n\nclient.js 代码如下：\n\n```js\nconst net = require('net')\n\nconst pipeFile = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\mypip' : '/tmp/unix.sock'\n\nconst client = net.connect(pipeFile)\nclient.on('connect', () => console.log('connected.'))\nclient.on('data', data => console.log(`receive: ${data}`))\nclient.on('end', () => console.log('disconnected.'))\nclient.on('error', err => console.error(err.message))\n\nsetInterval(() => {\n  const msg = 'hello'\n  console.log(`send: ${msg}`)\n  client.write(msg)\n}, 3000)\n\n\n```\n\n运行效果：\n\n```sh\n$ node server.js \nsocket connected.\nreceive: hello\nsend: hello\n\n$ node client.js\nconnected.\nsend: hello\nreceive: hello\n\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-03-09T15:29:05.000Z",
    "updateAt": "2022-03-09T23:29:10.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 596,
    "prev": "833fba72-1614-4502-adc3-1f5593ae6560",
    "next": "76e41377-7373-4113-8c6d-e506cadb0fe0"
  },
  "post": {
    "exerciseKey": "b317da28-bef7-4cb2-8fb4-2d41f1ec09d8",
    "category": "QA",
    "title": "两个 Node.js 进程如何通信？",
    "level": 3,
    "updateAt": "2022-03-09T23:29:10+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}