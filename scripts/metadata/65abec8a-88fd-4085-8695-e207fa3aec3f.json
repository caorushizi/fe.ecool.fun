{
  "data": {
    "id": 2043,
    "exerciseKey": "65abec8a-88fd-4085-8695-e207fa3aec3f",
    "category": "QA",
    "renderType": "md",
    "title": "Blob，ArrayBuffer，Base64 有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "Blob、ArrayBuffer和Base64是在Web开发中处理二进制数据的不同表示和操作方式。\n\n1. Blob（Binary Large Object）：\n   Blob是一种表示二进制数据的对象，可以存储大量的数据。它常用于处理文件、图像、音频和视频等媒体数据。Blob对象可以通过`new Blob()`构造函数创建，也可以从其他数据源（例如，通过XMLHttpRequest下载的数据）生成。Blob提供了一些方法和属性，用于读取和操作二进制数据。\n\n2. ArrayBuffer：\n   ArrayBuffer是一种用于表示通用的二进制数据缓冲区的对象。它在内存中分配一块连续的、固定大小的原始二进制数据，并提供了一些方法和属性来读取和操作这些数据。ArrayBuffer不直接访问二进制数据，而是通过TypedArray视图或DataView对象来读写数据。\n\n3. Base64：\n   Base64是一种将二进制数据转换为可打印字符的编码方式。它通过将二进制数据按照一定规则进行编码，生成由A-Z、a-z、0-9和一些特殊字符组成的字符串。Base64编码后的数据可以用于在文本协议中传输二进制数据，例如在网络请求中传递图片数据或在HTML中嵌入图片。\n\n区别：\n- Blob和ArrayBuffer都是用于表示和处理二进制数据的对象，但Blob通常用于处理大量数据和文件，而ArrayBuffer用于处理更小粒度的数据。\n- Blob对象提供了一些方法和属性，用于操作和读取二进制数据，而ArrayBuffer本身并不直接提供数据访问方法，需要通过TypedArray视图或DataView对象来读写数据。\n- Base64是一种编码方式，用于将二进制数据转换为可打印字符，以便在文本协议中传输。Base64编码后的数据可以作为字符串进行处理，而Blob和ArrayBuffer是二进制数据的对象表示。\n\n需要根据具体的使用场景和需求选择适合的数据表示和处理方式。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2023-06-28T08:58:10.000Z",
    "updateAt": "2023-07-08T15:39:53.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 314,
    "prev": "75bfc3cb-35b7-464b-bf6f-ae2722da04e8",
    "next": "244485d8-3c96-4f52-88d7-7ac0c76b5e0b"
  },
  "post": {
    "exerciseKey": "65abec8a-88fd-4085-8695-e207fa3aec3f",
    "category": "QA",
    "title": "Blob，ArrayBuffer，Base64 有什么区别？",
    "level": 3,
    "updateAt": "2023-07-08T15:39:53+00:00"
  },
  "tag": {
    "id": 16,
    "tagName": "计算机网络",
    "type": "1",
    "exerciseCount": 72
  }
}