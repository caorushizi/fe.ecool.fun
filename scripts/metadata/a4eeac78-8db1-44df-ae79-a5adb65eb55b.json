{
  "data": {
    "id": 613,
    "exerciseKey": "a4eeac78-8db1-44df-ae79-a5adb65eb55b",
    "category": "QA",
    "renderType": "md",
    "title": "两数相加",
    "desc": "给你两个 **非空** 的链表，表示两个非负的整数。它们每位数字都是按照 **逆序** 的方式存储的，并且每个节点只能存储 **一位** 数字。\n\n请你将两个数相加，并以相同形式返回一个表示和的链表。\n\n你可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n* 示例 1：\n\n![image.png](https://i.loli.net/2021/09/05/68MQqU7exR4YzTr.png)\n\n```\n输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n```\n\n* 示例 2：\n\n```\n输入：l1 = [0], l2 = [0]\n输出：[0]\n```\n\n* 示例 3：\n\n```\n输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n```\n\n* 提示：\n\t* 每个链表中的节点数在范围 [1, 100] 内\n\t* 0 <= Node.val <= 9\n\t* 题目数据保证列表表示的数字不含前导零\n  \n```\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n```\n\n",
    "options": null,
    "explanation": "## 思路与算法\n\n由于输入的两个链表都是**逆序**存储数字的位数的，因此两个链表中同一位置的数字可以直接相加。\n\n我们同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加。具体而言，如果当前两个链表处相应位置的数字为 n1,n2，进位值为 carry，则它们的和为 n1+n2+carry；其中，答案链表处相应位置的数字为 (n1+n2+carry) mod 10，而新的进位值为 \n (n1+n2+carry) / 10 。\n\n如果两个链表的长度不同，则可以认为长度短的链表的后面有若干个 00 。\n\n此外，如果链表遍历结束后，有 carry > 0，还需要在答案链表的后面附加一个节点，节点的值为 carry。\n\n## 代码\n\n```javascript\nvar addTwoNumbers = function(l1, l2) {\n    let head = null, tail = null;\n    let carry = 0;\n    while (l1 || l2) {\n        const n1 = l1 ? l1.val : 0;\n        const n2 = l2 ? l2.val : 0;\n        const sum = n1 + n2 + carry;\n        if (!head) {\n            head = tail = new ListNode(sum % 10);\n        } else {\n            tail.next = new ListNode(sum % 10);\n            tail = tail.next;\n        }\n        carry = Math.floor(sum / 10);\n        if (l1) {\n            l1 = l1.next;\n        }\n        if (l2) {\n            l2 = l2.next;\n        }\n    }\n    if (carry > 0) {\n        tail.next = new ListNode(carry);\n    }\n    return head;\n};\n```\n\n## 复杂度分析\n\n* 时间复杂度：O(max(m,n))，其中 m 和 n 分别为两个链表的长度。我们要遍历两个链表的全部位置，而处理每个位置只需要 O(1) 的时间。\n\n* 空间复杂度：O(1)。注意返回值不计入空间复杂度。\n\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-09-05T03:24:14.000Z",
    "updateAt": "2021-09-05T20:18:45.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 769,
    "prev": "3ae5a790-ccaf-468c-b829-e38dfd572582",
    "next": "f92a10a6-897f-46ca-992a-d31bcce5e5f1"
  },
  "post": {
    "exerciseKey": "a4eeac78-8db1-44df-ae79-a5adb65eb55b",
    "category": "QA",
    "title": "两数相加",
    "level": 3,
    "updateAt": "2021-09-05T20:18:45+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}