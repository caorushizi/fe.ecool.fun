{
  "data": {
    "id": 218,
    "exerciseKey": "ccde1c25-c646-4521-bf81-fcb0a3581ce2",
    "category": "QA",
    "renderType": "md",
    "title": "如何判断一个元素是否在可视区域中？",
    "desc": null,
    "options": null,
    "explanation": "## 一、用途\n\n可视区域即我们浏览网页的设备肉眼可见的区域，如下图\n\n ![](https://static.ecool.fun//article/caa61e4f-745d-4519-9254-2c8e4640b536.png)\n\n在日常开发中，我们经常需要判断目标元素是否在视窗之内或者和视窗的距离小于一个值（例如 100 px），从而实现一些常用的功能，例如：\n\n- 图片的懒加载\n- 列表的无限滚动\n- 计算广告元素的曝光情况\n- 可点击链接的预加载\n\n\n## 二、实现方式\n\n判断一个元素是否在可视区域，我们常用的有三种办法：\n\n- offsetTop、scrollTop\n\n- getBoundingClientRect \n- Intersection Observer\n\n\n\n### offsetTop、scrollTop\n\n`offsetTop`，元素的上外边框至包含元素的上内边框之间的像素距离，其他`offset`属性如下图所示：\n\n ![](https://static.ecool.fun//article/617781ee-d43a-4173-a08f-e7a7312c97fd.png)\n\n下面再来了解下`clientWidth`、`clientHeight`：\n\n- `clientWidth`：元素内容区宽度加上左右内边距宽度，即`clientWidth = content + padding`\n- `clientHeight`：元素内容区高度加上上下内边距高度，即`clientHeight = content + padding`\n\n这里可以看到`client`元素都不包括外边距\n\n最后，关于`scroll`系列的属性如下：\n\n- `scrollWidth` 和 `scrollHeight` 主要用于确定元素内容的实际大小\n\n- `scrollLeft` 和 `scrollTop` 属性既可以确定元素当前滚动的状态，也可以设置元素的滚动位置\n\n- - 垂直滚动 `scrollTop > 0`\n  - 水平滚动 `scrollLeft > 0`\n\n- 将元素的 `scrollLeft` 和 `scrollTop` 设置为 0，可以重置元素的滚动位置\n\n#### 注意\n\n- 上述属性都是只读的，每次访问都要重新开始\n\n\n\n下面再看看如何实现判断：\n\n公式如下：\n\n```js\nel.offsetTop - document.documentElement.scrollTop <= viewPortHeight\n```\n\n代码实现：\n\n```js\nfunction isInViewPortOfOne (el) {\n    // viewPortHeight 兼容所有浏览器写法\n    const viewPortHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight \n    const offsetTop = el.offsetTop\n    const scrollTop = document.documentElement.scrollTop\n    const top = offsetTop - scrollTop\n    return top <= viewPortHeight\n}\n```\n\n### getBoundingClientRect \n\n返回值是一个 `DOMRect`对象，拥有`left`, `top`, `right`, `bottom`, `x`, `y`, `width`, 和 `height`属性\n\n```js\nconst target = document.querySelector('.target');\nconst clientRect = target.getBoundingClientRect();\nconsole.log(clientRect);\n\n// {\n//   bottom: 556.21875,\n//   height: 393.59375,\n//   left: 333,\n//   right: 1017,\n//   top: 162.625,\n//   width: 684\n// }\n```\n\n属性对应的关系图如下所示：\n\n ![](https://static.ecool.fun//article/3c21ff35-b9e1-4009-920b-79460d148699.png)\n\n当页面发生滚动的时候，`top`与`left`属性值都会随之改变\n\n如果一个元素在视窗之内的话，那么它一定满足下面四个条件：\n\n- top 大于等于 0\n- left 大于等于 0\n- bottom 小于等于视窗高度\n- right 小于等于视窗宽度\n\n实现代码如下：\n\n```js\nfunction isInViewPort(element) {\n  const viewWidth = window.innerWidth || document.documentElement.clientWidth;\n  const viewHeight = window.innerHeight || document.documentElement.clientHeight;\n  const {\n    top,\n    right,\n    bottom,\n    left,\n  } = element.getBoundingClientRect();\n\n  return (\n    top >= 0 &&\n    left >= 0 &&\n    right <= viewWidth &&\n    bottom <= viewHeight\n  );\n}\n```\n\n\n\n### Intersection Observer\n\n`Intersection Observer` 即重叠观察者，从这个命名就可以看出它用于判断两个元素是否重叠，因为不用进行事件的监听，性能方面相比`getBoundingClientRect `会好很多\n\n\n\n使用步骤主要分为两步：创建观察者和传入被观察者\n\n#### 创建观察者\n\n```js\nconst options = {\n  // 表示重叠面积占被观察者的比例，从 0 - 1 取值，\n  // 1 表示完全被包含\n  threshold: 1.0, \n  root:document.querySelector('#scrollArea') // 必须是目标元素的父级元素\n};\n\nconst callback = (entries, observer) => { ....}\n\nconst observer = new IntersectionObserver(callback, options);\n```\n\n通过`new IntersectionObserver`创建了观察者 `observer`，传入的参数 `callback` 在重叠比例超过 `threshold` 时会被执行`\n\n关于`callback`回调函数常用属性如下：\n\n```js\n// 上段代码中被省略的 callback\nconst callback = function(entries, observer) { \n    entries.forEach(entry => {\n        entry.time;               // 触发的时间\n        entry.rootBounds;         // 根元素的位置矩形，这种情况下为视窗位置\n        entry.boundingClientRect; // 被观察者的位置举行\n        entry.intersectionRect;   // 重叠区域的位置矩形\n        entry.intersectionRatio;  // 重叠区域占被观察者面积的比例（被观察者不是矩形时也按照矩形计算）\n        entry.target;             // 被观察者\n    });\n};\n```\n\n#### 传入被观察者\n\n通过 `observer.observe(target)` 这一行代码即可简单的注册被观察者\n\n```js\nconst target = document.querySelector('.target');\nobserver.observe(target);\n```\n\n\n\n### 三、案例分析\n\n实现：创建了一个十万个节点的长列表，当节点滚入到视窗中时，背景就会从红色变为黄色\n\n`Html`结构如下：\n\n```js\n<div class=\"container\"></div>\n```\n\n`css`样式如下：\n\n```css\n.container {\n    display: flex;\n    flex-wrap: wrap;\n}\n.target {\n    margin: 5px;\n    width: 20px;\n    height: 20px;\n    background: red;\n}\n```\n\n往`container`插入1000个元素\n\n```js\nconst $container = $(\".container\");\n\n// 插入 100000 个 <div class=\"target\"></div>\nfunction createTargets() {\n  const htmlString = new Array(100000)\n    .fill('<div class=\"target\"></div>')\n    .join(\"\");\n  $container.html(htmlString);\n}\n```\n\n这里，首先使用`getBoundingClientRect `方法进行判断元素是否在可视区域\n\n```js\nfunction isInViewPort(element) {\n    const viewWidth = window.innerWidth || document.documentElement.clientWidth;\n    const viewHeight =\n          window.innerHeight || document.documentElement.clientHeight;\n    const { top, right, bottom, left } = element.getBoundingClientRect();\n\n    return top >= 0 && left >= 0 && right <= viewWidth && bottom <= viewHeight;\n}\n```\n\n然后开始监听`scroll`事件，判断页面上哪些元素在可视区域中，如果在可视区域中则将背景颜色设置为`yellow`\n\n```js\n$(window).on(\"scroll\", () => {\n    console.log(\"scroll !\");\n    $targets.each((index, element) => {\n        if (isInViewPort(element)) {\n            $(element).css(\"background-color\", \"yellow\");\n        }\n    });\n});\n```\n\n通过上述方式，可以看到可视区域颜色会变成黄色了，但是可以明显看到有卡顿的现象，原因在于我们绑定了`scroll`事件，`scroll`事件伴随了大量的计算，会造成资源方面的浪费\n\n下面通过`Intersection Observer`的形式同样实现相同的功能\n\n首先创建一个观察者\n\n```js\nconst observer = new IntersectionObserver(getYellow, { threshold: 1.0 });\n```\n\n`getYellow`回调函数实现对背景颜色改变，如下：\n\n```js\nfunction getYellow(entries, observer) {\n    entries.forEach(entry => {\n        $(entry.target).css(\"background-color\", \"yellow\");\n    });\n}\n```\n\n最后传入观察者，即`.target`元素\n\n```js\n$targets.each((index, element) => {\n    observer.observe(element);\n});\n```\n\n可以看到功能同样完成，并且页面不会出现卡顿的情况\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T14:04:07.000Z",
    "updateAt": "2024-01-24T17:43:58.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 146,
    "prev": "7b63d3a8-32c4-4561-95fc-77755ea629f1",
    "next": "7fa82090-78a2-4445-a982-48ed95cb20c0"
  },
  "post": {
    "exerciseKey": "ccde1c25-c646-4521-bf81-fcb0a3581ce2",
    "category": "QA",
    "title": "如何判断一个元素是否在可视区域中？",
    "level": 2,
    "updateAt": "2024-01-24T17:43:58+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}