{
  "data": {
    "id": 1895,
    "exerciseKey": "da41ddaa-57d7-405e-83d8-8cc56fca6ec1",
    "category": "QA",
    "renderType": "md",
    "title": "map 和 forEach 有什么区别？",
    "desc": null,
    "options": null,
    "explanation": "### 定义\n\n我们首先来看一看MDN上对Map和ForEach的定义：\n\n* `forEach()`: 针对每一个元素执行提供的函数(executes a provided function once for each array element)。\n* `map()`: 创建一个新的数组，其中每一个元素由调用数组中的每一个元素执行提供的函数得来(creates a new array with the results of calling a provided function on every element in the calling array)。\n\n到底有什么区别呢？`forEach()`方法不会返回执行结果，而是`undefined`。也就是说，`forEach()`会修改原来的数组。而`map()`方法会得到一个新的数组并返回。\n\n### 示例\n\n下方提供了一个数组，如果我们想将其中的每一个元素翻倍，我们可以使用`map`和`forEach`来达到目的。\n\n```js\nlet arr = [1, 2, 3, 4, 5];\n```\n\n#### forEach\n\n注意，`forEach`是不会返回有意义的值的。 我们在回调函数中直接修改`arr`的值。\n\n```js\narr.forEach((num, index) => {\n    return arr[index] = num * 2;\n});\n```\n\n执行结果如下：\n\n```js\n// arr = [2, 4, 6, 8, 10]\n```\n\n#### map\n\n```js\nlet doubled = arr.map(num => {\n    return num * 2;\n});\n```\n\n执行结果如下：\n\n```js\n// doubled = [2, 4, 6, 8, 10]\n```\n\n## 执行速度对比\n\n**jsPref**是一个非常好的网站用来比较不同的JavaScript函数的执行速度。\n\n这里是`forEach()`和`map()`的测试结果：\n\n![](https://static.ecool.fun//article/7a9b71f5-e46a-4d4d-a63b-994786896e85.jpeg)\n\n可以看到，在我到电脑上`forEach()`的执行速度比`map()`慢了70%。每个人的浏览器的执行结果会不一样。你可以使用下面的链接来测试一下: [Map vs. forEach - jsPref](https://jsperf.com/map-vs-foreach-speed-test)。\n\n## 函数式角度的理解\n\n如果你习惯使用函数是编程，那么肯定喜欢使用`map()`。因为`forEach()`会改变原始的数组的值，而`map()`会返回一个全新的数组，原本的数组不受到影响。\n\n## 哪个更好呢？\n\n取决于你想要做什么。\n\n`forEach`适合于你并不打算改变数据的时候，而只是想用数据做一些事情 -- 比如存入数据库或则打印出来。\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\narr.forEach((letter) => {\n    console.log(letter);\n});\n// a\n// b\n// c\n// d\n```\n\n`map()`适用于你要改变数据值的时候。不仅仅在于它更快，而且返回一个新的数组。这样的优点在于你可以使用复合(composition)(map(), filter(), reduce()等组合使用)来玩出更多的花样。\n\n```js\nlet arr = [1, 2, 3, 4, 5];\nlet arr2 = arr.map(num => num * 2).filter(num => num > 5);\n// arr2 = [6, 8, 10]\n```\n\n我们首先使用map将每一个元素乘以2，然后紧接着筛选出那些大于5的元素。最终结果赋值给`arr2`。\n\n## 核心要点\n\n* 能用`forEach()`做到的，`map()`同样可以。反过来也是如此。\n* `map()`会分配内存空间存储新数组并返回，`forEach()`不会返回数据。\n* `forEach()`允许`callback`更改原始数组的元素。`map()`返回新的数组。",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2022-10-09T11:41:06.000Z",
    "updateAt": "2023-12-18T20:59:32.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 225,
    "prev": "f10c4b00-cceb-4323-97dc-55b315b05024",
    "next": "b6d72acf-0360-4fc1-8835-6a6f8a3a4025"
  },
  "post": {
    "exerciseKey": "da41ddaa-57d7-405e-83d8-8cc56fca6ec1",
    "category": "QA",
    "title": "map 和 forEach 有什么区别？",
    "level": 1,
    "updateAt": "2023-12-18T20:59:32+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}