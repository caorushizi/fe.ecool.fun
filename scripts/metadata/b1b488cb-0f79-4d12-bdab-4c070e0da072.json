{
  "data": {
    "id": 208,
    "exerciseKey": "b1b488cb-0f79-4d12-bdab-4c070e0da072",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对事件循环的理解",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n`JavaScript` 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一时间只能做一件事\n\n为什么要这么设计，跟`JavaScript`的应用场景有关\n\n`JavaScript` 初期作为一门浏览器脚本语言，通常用于操作 `DOM` ，如果是多线程，一个线程进行了删除 `DOM` ，另一个添加 `DOM`，此时浏览器该如何处理？\n\n为了解决单线程运行阻塞问题，`JavaScript`用到了计算机系统的一种运行机制，这种机制就叫做事件循环（Event Loop）\n\n#### 事件循环（Event Loop）\n\n在`JavaScript`中，所有的任务都可以分为\n\n- 同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行\n\n- 异步任务：异步执行的任务，比如`ajax`网络请求，`setTimeout `定时函数等\n\n同步任务与异步任务的运行流程图如下：\n\n ![](https://static.ecool.fun//article/85f7d058-08ee-4bb7-af03-610411a08581.png)\n\n从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就是事件循环\n\n\n\n## 二、宏任务与微任务\n\n如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子：\n\n```js\nconsole.log(1)\n\nsetTimeout(()=>{\n    console.log(2)\n}, 0)\n\nnew Promise((resolve, reject)=>{\n    console.log('new Promise')\n    resolve()\n}).then(()=>{\n    console.log('then')\n})\n\nconsole.log(3)\n```\n\n如果按照上面流程图来分析代码，我们会得到下面的执行步骤：\n\n- `console.log(1) `，同步任务，主线程中执行\n- `setTimeout()` ，异步任务，放到 `Event Table`，0 毫秒后`console.log(2) `回调推入 `Event Queue` 中\n- `new Promise` ，同步任务，主线程直接执行\n- `.then` ，异步任务，放到 `Event Table`\n- `console.log(3)`，同步任务，主线程执行\n\n所以按照分析，它的结果应该是 `1` => `'new Promise'` => `3` => `2` => `'then'`\n\n但是实际结果是：`1`=>`'new Promise'`=> `3` => `'then'` => `2`\n\n出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取\n\n例子中 `setTimeout`回调事件是先进入队列中的，按理说应该先于 `.then` 中的执行，但是结果却偏偏相反\n\n原因在于异步任务还可以细分为微任务与宏任务\n\n### 微任务\n\n一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前\n\n常见的微任务有：\n\n- Promise.then\n\n- MutaionObserver\n\n- Object.observe（已废弃；Proxy 对象替代）\n\n- process.nextTick（Node.js）\n\n  \n\n### 宏任务\n\n宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合\n\n常见的宏任务有：\n\n- script (可以理解为外层同步代码) \n- setTimeout/setInterval \n- UI rendering/UI事件 \n- postMessage、MessageChannel \n- setImmediate、I/O（Node.js）\n\n\n\n这时候，事件循环，宏任务，微任务的关系如图所示\n\n ![](https://static.ecool.fun//article/698f38dc-0399-4a3b-b38a-126c9f5c221e.png)\n\n按照这个流程，它的执行机制是：\n\n- 执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中\n- 当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完\n\n\n\n回到上面的题目\n\n```js\nconsole.log(1)\nsetTimeout(()=>{\n    console.log(2)\n}, 0)\nnew Promise((resolve, reject)=>{\n    console.log('new Promise')\n    resolve()\n}).then(()=>{\n    console.log('then')\n})\nconsole.log(3)\n```\n\n流程如下\n\n```js\n// 遇到 console.log(1) ，直接打印 1\n// 遇到定时器，属于新的宏任务，留着后面执行\n// 遇到 new Promise，这个是直接执行的，打印 'new Promise'\n// .then 属于微任务，放入微任务队列，后面再执行\n// 遇到 console.log(3) 直接打印 3\n// 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 'then'\n// 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 2\n```\n\n\n\n## 三、async与await\n\n`async` 是异步的意思，`await `则可以理解为等待\n\n放到一起可以理解` async `就是用来声明一个异步方法，而 `await `是用来等待异步方法执行\n\n### async\n\n`async`函数返回一个`promise`对象，下面两种方法是等效的\n\n```js\nfunction f() {\n    return Promise.resolve('TEST');\n}\n\n// asyncF is equivalent to f!\nasync function asyncF() {\n    return 'TEST';\n}\n```\n\n### await\n\n正常情况下，`await`命令后面是一个 `Promise `对象，返回该对象的结果。如果不是 `Promise `对象，就直接返回对应的值\n\n```js\nasync function f(){\n    // 等同于\n    // return 123\n    return await 123\n}\nf().then(v => console.log(v)) // 123\n```\n\n不管`await`后面跟着的是什么，`await`都会阻塞后面的代码\n\n```js\nasync function fn1 (){\n    console.log(1)\n    await fn2()\n    console.log(2) // 阻塞\n}\n\nasync function fn2 (){\n    console.log('fn2')\n}\n\nfn1()\nconsole.log(3)\n```\n\n上面的例子中，`await` 会阻塞下面的代码（即加入微任务队列），先执行 `async `外面的同步代码，同步代码执行完，再回到 `async` 函数中，再执行之前阻塞的代码\n\n所以上述输出结果为：`1`，`fn2`，`3`，`2`\n\n\n\n## 四、流程分析\n\n通过对上面的了解，我们对`JavaScript`对各种场景的执行顺序有了大致的了解\n\n这里直接上代码：\n\n```js\nasync function async1() {\n    console.log('async1 start')\n    await async2()\n    console.log('async1 end')\n}\nasync function async2() {\n    console.log('async2')\n}\nconsole.log('script start')\nsetTimeout(function () {\n    console.log('settimeout')\n})\nasync1()\nnew Promise(function (resolve) {\n    console.log('promise1')\n    resolve()\n}).then(function () {\n    console.log('promise2')\n})\nconsole.log('script end')\n```\n\n分析过程：\n\n1. 执行整段代码，遇到 `console.log('script start')` 直接打印结果，输出 `script start`\n2. 遇到定时器了，它是宏任务，先放着不执行\n3. 遇到 `async1()`，执行 `async1` 函数，先打印 `async1 start`，下面遇到` await `怎么办？先执行 `async2`，打印 `async2`，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码\n4. 跳到 `new Promise` 这里，直接执行，打印 `promise1`，下面遇到 `.then()`，它是微任务，放到微任务列表等待执行\n5. 最后一行直接打印 `script end`，现在同步代码执行完了，开始执行微任务，即 `await `下面的代码，打印 `async1 end`\n6. 继续执行下一个微任务，即执行 `then` 的回调，打印 `promise2`\n7. 上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 `settimeout`\n\n所以最后的结果是：`script start`、`async1 start`、`async2`、`promise1`、`script end`、`async1 end`、`promise2`、`settimeout`",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:56:45.000Z",
    "updateAt": "2024-01-24T17:38:01.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 156,
    "prev": "138cc142-490a-4ca9-8221-5f13429c807f",
    "next": "e3f52a7b-4c54-4b00-bd6c-b63f2b60421c"
  },
  "post": {
    "exerciseKey": "b1b488cb-0f79-4d12-bdab-4c070e0da072",
    "category": "QA",
    "title": "说说你对事件循环的理解",
    "level": 3,
    "updateAt": "2024-01-24T17:38:01+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}