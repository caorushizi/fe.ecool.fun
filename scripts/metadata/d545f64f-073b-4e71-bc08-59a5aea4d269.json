{
  "data": {
    "id": 1811,
    "exerciseKey": "d545f64f-073b-4e71-bc08-59a5aea4d269",
    "category": "QA",
    "renderType": "md",
    "title": "二叉树的层序遍历",
    "desc": "给你二叉树的根节点 `root` ，返回其节点值的 **层序遍历** 。 （即逐层地，从左到右访问所有节点）。\n\n**示例 1：**\n\n![](https://pic.rmb.bdstatic.com/bjh/f887a426462de1984fe2ec643db1051e.png) \n\n\n**输入：** root = [3,9,20,null,null,15,7]\n\n**输出：** [[3],[9,20],[15,7]]\n\n**示例 2：**\n\n\n**输入：** root = [1]\n\n**输出：** [[1]]\n\n**示例 3：**\n\n\n**输入：** root = []\n\n**输出：** []\n\n**提示：**\n\n* 树中节点数目在范围 `[0, 2000]` 内\n* `-1000 <= Node.val <= 1000`\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\nvar levelOrder = function(root) {\n\n};\n```",
    "options": null,
    "explanation": "### 方法1.广度优先遍历\n\n- 思路：准备一个队列，将根节点加入队列，当队列不为空的时候循环队列，每次循环拿到当前队列的大小，在循环当前层的每个元素，然后加入输出数组ret中，如果这个元素存在左右节点则将左右节点加入队列\n- 复杂度分析：时间复杂度 `O(n)`，每个点进队出队各一次，故渐进时间复杂度为 `O(n)`。空间复杂度`O(n)`，队列中元素的个数不超过 n 个\n\n```js\nvar levelOrder = function(root) {\n    const ret = [];\n    if (!root) {\n        return ret;\n    }\n\n    const q = [];\n    q.push(root);//初始队列\n    while (q.length !== 0) {\n        const currentLevelSize = q.length;//当前层节点的数量\n        ret.push([]);//新的层推入数组\n        for (let i = 1; i <= currentLevelSize; ++i) {//循环当前层的节点\n            const node = q.shift();\n            ret[ret.length - 1].push(node.val);//推入当前层的数组\n            if (node.left) q.push(node.left);//检查左节点，存在左节点就继续加入队列\n            if (node.right) q.push(node.right);//检查左右节点，存在右节点就继续加入队列\n        }\n    }\n        \n    return ret;\n};\n\n```\n\n### 方法2：深度优先遍历\n\n- 思路：从根节点开始不断递归左右子树，透传step层数和res输出数组。\n- 复杂度分析：时间复杂度`O(n)`,n是节点的个数。空间复杂度`O(n)`，n是树的高度。\n\n```js\nvar levelOrder = function(root) {\n    if(!root) return []\n    let res = []\n    dfs(root, 0, res)\n    return res\n};\n\nfunction dfs(root, step, res){//每层透传当前节点，层数，和输出数组\n  if(root){\n    if(!res[step]) res[step] = []//初始化当前层数组\n    res[step].push(root.val)//当前节点加入当前层数组\n    dfs(root.left, step + 1, res)//step+1，递归左节点\t\n    dfs(root.right, step + 1, res)//step+1，递归右节点\t\n  }\n}\n```",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-16T14:40:48.000Z",
    "updateAt": "2022-05-16T22:40:52.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 536,
    "prev": "2c3871df-1368-4abe-943d-6cf5695620bc",
    "next": "c6530c46-d02f-40b2-8e6e-c11a6daf3f12"
  },
  "post": {
    "exerciseKey": "d545f64f-073b-4e71-bc08-59a5aea4d269",
    "category": "QA",
    "title": "二叉树的层序遍历",
    "level": 3,
    "updateAt": "2022-05-16T22:40:52+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}