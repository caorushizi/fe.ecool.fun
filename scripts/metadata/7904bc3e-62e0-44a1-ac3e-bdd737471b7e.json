{
  "data": {
    "id": 496,
    "exerciseKey": "7904bc3e-62e0-44a1-ac3e-bdd737471b7e",
    "category": "QA",
    "renderType": "md",
    "title": "CSS中的1像素问题是什么？有哪些解决方案？",
    "desc": null,
    "options": null,
    "explanation": "## 1px 边框问题的由来\n\n苹果 iPhone4 首次提出了 Retina Display（视网膜屏幕）的概念，在 iPhone4 使用的视网膜屏幕中，把 2x2 个像素当 1 个物理像素使用，即使用 2x2 个像素显示原来 1 个物理像素显示的内容，从而让 UI 显示更精致清晰，这 2x2 个像素叫做逻辑像素。\n\n像这种像素比（像素比（即dpr）＝ 物理像素 / 逻辑像素）为 2 的视网膜屏幕也被称为二倍屏，目前市面上还有像素比更高的三倍屏、四倍屏。\n\n而 CSS 中 1px 指的是物理像素，因此，设置为 1px 的边框在 dpr = 2 的视网膜屏幕中实际占用了 2 个逻辑像素的宽度，这就导致了界面边框变粗的视觉体验。\n\n## 使用 transform 解决\n\n通过设置元素的 box-sizing 为 border-box，然后构建伪元素，再使用 CSS3 的 transform 缩放，这是目前市面上最受推崇的解决方法。这种方法可以满足所有的场景，而且修改灵活，唯一的缺陷是，对于已使用伪元素的元素要多嵌套一个无用元素。具体的实现如下：\n\n```css\n.one-pixel-border {\n  position: relative;\n  box-sizing: border-box;\n}\n\n.one-pixel-border::before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 200%;\n  height: 200%;\n  border: 1px solid red;\n  transform: translate(-50%, -50%) scale(0.5, 0.5);\n}\n```\n\n这样就可以得到 0.5px 的边框。\n\n还可以结合媒体查询（@media）解决不同 dpr 值屏幕的边框问题，如下：\n\n```css\n@media screen and (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {\n  ...\n}\n\n@media screen and (-webkit-min-device-pixel-ratio: 3), (min-resolution: 3dppx) {\n  ...\n}\n```\n\n当然还有不少其他的解决方案：border-image、background-image、viewport + rem + js、box-shadow等，但都有各自的缺点，不进行推荐，此处也不做详细介绍。\n",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-11T07:04:06.000Z",
    "updateAt": "2021-07-11T16:10:08.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 858,
    "prev": "5ce5c660-5265-4185-8b12-f69d7fd4a270",
    "next": "eab191f2-2cc4-4bb9-b04c-370d834b7a7f"
  },
  "post": {
    "exerciseKey": "7904bc3e-62e0-44a1-ac3e-bdd737471b7e",
    "category": "QA",
    "title": "CSS中的1像素问题是什么？有哪些解决方案？",
    "level": 3.5,
    "updateAt": "2021-07-11T16:10:08+00:00"
  },
  "tag": {
    "id": 11,
    "tagName": "CSS",
    "type": "1",
    "exerciseCount": 90
  }
}