{
  "data": {
    "id": 634,
    "exerciseKey": "f24683ac-0366-41a2-a763-f90f447a78ee",
    "category": "QA",
    "renderType": "md",
    "title": "什么是“事件代理”",
    "desc": null,
    "options": null,
    "explanation": "事件代理（Event Delegation）也称之为事件委托。是JavaScript中常用绑定事件的常用技巧。\n\n顾名思义，“事件代理”即是把原本需要绑定在子元素的响应事件委托给父元素，让父元素担当事件监听的职务。\n\n事件代理的原理是DOM元素的**事件冒泡**。\n\n一个事件触发后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。\n\n* 捕获阶段：从window对象传导到目标节点（上层传到底层）称为“捕获阶段”（capture phase），捕获阶段不会响应任何事件；\n* 目标阶段：在目标节点上触发，称为“目标阶段”\n* 冒泡阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层。\n\n## 事件委托的优点：\n\n* 可以大量节省内存占用，减少事件注册。\n\n比如在ul上代理所有li的click事件就非常棒\n\n```html\n<ul id=\"list\">\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  ......\n  <li>item n</li>\n</ul>\n```\n\n如上面代码所示，如果给每个li列表项都绑定一个函数，那对内存的消耗是非常大的，因此较好的解决办法就是将li元素的点击事件绑定到它的父元素ul身上，执行事件的时候再去匹配判断目标元素。\n\n* 可以实现当新增子对象时无需再次对其绑定（动态绑定事件）\n\n假设上述的例子中列表项li就几个，我们给每个列表项都绑定了事件；\n\n在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者删除列表项li元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；\n\n如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的；所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。\n\n使用事件委托注意事项：使用“事件委托”时，并不是说把事件委托给的元素越靠近顶层就越好。事件冒泡的过程也需要耗时，越靠近顶层，事件的”事件传播链”越长，也就越耗时。如果DOM嵌套结构很深，事件冒泡通过大量祖先元素会导致性能损失。\n\n\n\n",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-09-25T10:20:45.000Z",
    "updateAt": "2021-10-18T22:53:22.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 746,
    "prev": "08ec624c-9c3d-4f11-ba4f-09e0986c9838",
    "next": "4d19c9e2-7a80-40fd-83ee-ae6d9b531a0a"
  },
  "post": {
    "exerciseKey": "f24683ac-0366-41a2-a763-f90f447a78ee",
    "category": "QA",
    "title": "什么是“事件代理”",
    "level": 1,
    "updateAt": "2021-10-18T22:53:22+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}