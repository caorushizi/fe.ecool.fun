{
  "data": {
    "id": 1867,
    "exerciseKey": "696a79c6-1e6d-4e66-ad11-2e072c9c62d7",
    "category": "QA",
    "renderType": "md",
    "title": "什么是同步和异步？",
    "desc": null,
    "options": null,
    "explanation": "`JS` 是一门单线程的编程语言，这就意味着一个时间里只能处理一件事，也就是说**JS**引擎一次只能在一个线程里处理一条语句。\n\n虽然单线程简化了编程代码，因为这样咱们不必太担心并发引出的问题，这也意味着在阻塞主线程的情况下执行长时间的操作，如网络请求。\n\n想象一下从API请求一些数据，根据具体的情况，服务器需要一些时间来处理请求，同时阻塞主线程，使网页长时间处于无响应的状态。这就是引入异步 JS 的原因。使用异步 (如 回调函数、`promise`、`async/await`),可以不用阻塞主线程的情况下长时间执行网络请求。\n\n了解异步的工作方式之前，咱们先来看看同步是怎么样工作的。\n\n## 同步 JS 是如何工作的？\n\n在深入研究异步`JS`之前，先来了解同步 `JS` 代码在 `JavaScript` 引擎中执行情况。例如：\n\n```javascript\n    const second = () => {\n      console.log('Hello there!');\n    }\n    \n    const first = () => {\n      console.log('Hi there!');\n      second();\n      console.log('The End');\n    }\n    \n    first();\n\n复制代码\n```\n\n要理解上述代码如何在 `JS` 引擎中执行，咱们必须理解什么是**执行上下文**和**调用栈**(也称为执行堆栈)。\n\n函数代码在函数执行上下文中执行，全局代码在全局执行上下文中执行。每个函数都有自己的执行上下文。\n\n#### 调用栈\n\n调用堆栈顾名思义是一个具有`LIFO`(后进先出)结构的堆栈，用于存储在代码执行期间创建的所有执行上下文。\n\n`JS` 只有一个调用栈，因为它是一种单线程编程语言。调用堆栈具有 `LIFO` 结构，这意味着项目只能从堆栈顶部添加或删除。\n\n回到上面的代码，尝试理解代该码是如何在`JS`引擎中执行。\n\n```javascript\nconst second = () => {\n  console.log('Hello there!');\n}\nconst first = () => {\n  console.log('Hi there!');\n  second();\n  console.log('The End');\n}\nfirst();\n复制代码\n```\n\n![](//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/011b00fb335040b998711518badef78e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp)\n\n#### 这里发生了什么?\n\n当执行此代码时，将创建一个全局执行上下文(由main()表示)并将其推到调用堆栈的顶部。当遇到对`first()`的调用时，它会被推送到堆栈的顶部。\n\n接下来,`console.log('Hi there!')`被推送到堆栈的顶部，当它完成时，它会从堆栈中弹出。之后，我们调用`second()`，因此`second()`函数被推到堆栈的顶部。\n\n`console.log('Hello there!')`被推送到堆栈顶部，并在完成时弹出堆栈。`second()` 函数结束，因此它从堆栈中弹出。\n\n`console.log(“the End”)`被推到堆栈的顶部，并在完成时删除。之后，`first()`函数完成，因此从堆栈中删除它。\n\n程序在这一点上完成了它的执行，所以全局执行上下文(main())从堆栈中弹出。\n\n## 异步 JS 是如何工作的?\n\n现在咱们已经对调用堆栈和同步`JAS`的工作原理有了基本的了解，回到异步`JS`上。\n\n#### 阻塞是什么?\n\n假设咱们正在以同步的方式进行图像处理或网络请求。例如：\n\n```scss\nconst processImage = (image) => {\n  /**\n  * doing some operations on image\n  **/\n  console.log('Image processed');\n}\nconst networkRequest = (url) => {\n  /**\n  * requesting network resource\n  **/\n  return someData;\n}\nconst greeting = () => {\n  console.log('Hello World');\n}\nprocessImage(logo.jpg);\nnetworkRequest('www.somerandomurl.com');\ngreeting();\n复制代码\n```\n\n做图像处理和网络请求需要时间，当`processImage()`函数被调用时，它会根据图像的大小花费一些时间。\n\n`processImage()` 函数完成后，将从堆栈中删除它。然后调用 `networkRequest()` 函数并将其推入堆栈。同样，它也需要一些时间来完成执行。\n\n最后，当`networkRequest()`函数完成时，调用`greeting()`函数。\n\n因此，咱们必须等待函数如`processImage()`或`networkRequest()`完成。这意味着这些函数阻塞了调用堆栈或主线程。因此，在执行上述代码时，咱们不能执行任何其他操作，这是不理想的。\n\n#### 解决办法是什么?\n\n最简单的解决方案是异步回调，各位使用异步回调使代码非阻塞。例如:\n\n```javascript\nconst networkRequest = () => {\n  setTimeout(() => {\n    console.log('Async Code');\n  }, 2000);\n};\nconsole.log('Hello World');\nnetworkRequest();\n复制代码\n```\n\n这里使用了`setTimeout`方法来模拟网络请求。请记住`setTimeout`不是`JS`引擎的一部分，它是**Web Api**的一部分。\n\n为了理解这段代码是如何执行的，咱们必须理解更多的概念，比如事件轮询和回调队列(或消息队列)。\n\n![](//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca51b8264d114d83b3a9f84940297056~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp)\n\n事件轮询、web api和消息队列不是`JavaScript`引擎的一部分，而是浏览器的`JavaScript`运行时环境或Nodejs JavaScript运行时环境的一部分(对于Nodejs)。在Nodejs中，web api被c/c++ api所替代。\n\n现在让我们回到上面的代码，看看它是如何异步执行的。\n\n```javascript\nconst networkRequest = () => {\n  setTimeout(() => {\n    console.log('Async Code');\n  }, 2000);\n};\n\nconsole.log('Hello World');\n\nnetworkRequest();\n\nconsole.log('The End');\n复制代码\n```\n\n![](//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf142df94784461eb8fcfefd3dded8bd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp)\n\n当上述代码在浏览器中加载时，`console.log(' Hello World ')` 被推送到堆栈中，并在完成后弹出堆栈。接下来，将遇到对 `networkRequest()` 的调用，因此将它推到堆栈的顶部。\n\n下一个 `setTimeout()` 函数被调用，因此它被推到堆栈的顶部。`setTimeout()`有两个参数:\n\n* 1. 回调和\n* 1. 以毫秒(ms)为单位的时间。\n\n`setTimeout()` 方法在web api环境中启动一个2s的计时器。此时，`setTimeout()`已经完成，并从堆栈中弹出。`cosole.log(“the end”)` 被推送到堆栈中，在完成后执行并从堆栈中删除。\n\n同时，计时器已经过期，现在回调被推送到消息队列。但是回调不会立即执行，这就是事件轮询开始的地方。\n\n## 事件轮询\n\n事件轮询的工作是监听调用堆栈，并确定调用堆栈是否为空。如果调用堆栈是空的，它将检查消息队列，看看是否有任何挂起的回调等待执行。\n\n在这种情况下，消息队列包含一个回调，此时调用堆栈为空。因此，事件轮询将回调推到堆栈的顶部。\n\n然后是 `console.log(“Async Code”)` 被推送到堆栈顶部，执行并从堆栈中弹出。此时，回调已经完成，因此从堆栈中删除它，程序最终完成。\n\n消息队列还包含来自DOM事件(如单击事件和键盘事件)的回调。例如:\n\n```javascript\ndocument.querySelector('.btn').addEventListener('click',(event) => {\n  console.log('Button Clicked');\n});\n复制代码\n```\n\n对于DOM事件，事件侦听器位于web api环境中，等待某个事件(在本例中单击event)发生，当该事件发生时，回调函数被放置在等待执行的消息队列中。\n\n同样，事件轮询检查调用堆栈是否为空，并在调用堆栈为空并执行回调时将事件回调推送到堆栈。\n\n## 延迟函数执行\n\n咱们还可以使用`setTimeout`来延迟函数的执行，直到堆栈清空为止。例如\n\n```javascript\nconst bar = () => {\n  console.log('bar');\n}\nconst baz = () => {\n  console.log('baz');\n}\nconst foo = () => {\n  console.log('foo');\n  setTimeout(bar, 0);\n  baz();\n}\nfoo();\n复制代码\n```\n\n打印结果：\n\n```\nfoo\nbaz\nbar\n复制代码\n```\n\n当这段代码运行时，第一个函数`foo()`被调用，在`foo`内部我们调用`console.log('foo')`，然后`setTimeout()`被调用，`bar()`作为回调函数和时`0`秒计时器。\n\n现在，如果咱们没有使用 `setTimeout`,` bar()` 函数将立即执行，但是使用 `setTimeout` 和`0`秒计时器，将`bar`的执行延迟到堆栈为空的时候。\n\n`0`秒后，`bar()`回调被放入等待执行的消息队列中，但是它只会在堆栈完全空的时候执行，也就是在`baz`和`foo`函数完成之后。\n\n## ES6 任务队列\n\n我们已经了解了异步回调和DOM事件是如何执行的，它们使用消息队列存储等待执行所有回调。\n\nES6引入了任务队列的概念，任务队列是 `JS` 中的 `promise` 所使用的。消息队列和任务队列的区别在于，任务队列的优先级高于消息队列，这意味着任务队列中的`promise` 作业将在消息队列中的回调之前执行，例如：\n\n```javascript\nconst bar = () => {\n  console.log('bar');\n};\n\nconst baz = () => {\n  console.log('baz');\n};\n\nconst foo = () => {\n  console.log('foo');\n  setTimeout(bar, 0);\n  new Promise((resolve, reject) => {\n    resolve('Promise resolved');\n  }).then(res => console.log(res))\n    .catch(err => console.log(err));\n  baz();\n};\n\nfoo();\n复制代码\n```\n\n打印结果：\n\n```\nfoo\nbaz\nPromised resolved\nbar\n复制代码\n```\n\n咱们可以看到 `promise` 在 `setTimeout` 之前执行，因为 `promise` 响应存储在任务队列中，任务队列的优先级高于消息队列。\n\n## 小结\n\n因此，咱们了解了异步 `JS` 是如何工作的，以及调用堆栈、事件循环、消息队列和任务队列等概念，这些概念共同构成了 `JS` 运行时环境。虽然成为一名出色的`JS`开发人员并不需要学习所有这些概念，但是了解这些概念是有帮助的。",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-08-07T14:41:35.000Z",
    "updateAt": "2022-08-10T09:55:52.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 500,
    "prev": "3526fff1-d92d-4568-b6dd-549bc6c2a92e",
    "next": "cdeec2cc-5772-4c63-b7f0-34f864ea886d"
  },
  "post": {
    "exerciseKey": "696a79c6-1e6d-4e66-ad11-2e072c9c62d7",
    "category": "QA",
    "title": "什么是同步和异步？",
    "level": 2,
    "updateAt": "2022-08-10T09:55:52+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}