{
  "data": {
    "id": 553,
    "exerciseKey": "bc224611-840e-4ed9-a922-67708c085da3",
    "category": "QA",
    "renderType": "md",
    "title": "说说对中间件概念的理解，如何封装 node 中间件？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的\n\n在`NodeJS`中，中间件主要是指封装`http`请求细节处理的方法\n\n例如在`express`、`koa`等`web`框架中，中间件的本质为一个回调函数，参数包含请求对象、响应对象和执行下一个中间件的函数\n\n ![](https://static.ecool.fun//article/a76490e1-1167-476a-aadd-cbe205d6e962.png)\n\n在这些中间件函数中，我们可以执行业务逻辑代码，修改请求和响应对象、返回响应数据等操作\n\n\n\n## 二、封装\n\n`koa`是基于`NodeJS`当前比较流行的`web`框架，本身支持的功能并不多，功能都可以通过中间件拓展实现。通过添加不同的中间件，实现不同的需求，从而构建一个 `Koa` 应用\n\n`Koa` 中间件采用的是洋葱圈模型，每次执行下一个中间件传入两个参数：\n\n- ctx ：封装了request 和  response 的变量\n- next ：进入下一个要执行的中间件的函数\n\n ![](https://static.ecool.fun//article/bd5957e4-1d0c-41ee-9833-906c477cb984.png)\n\n\n\n下面就针对`koa`进行中间件的封装：\n\n`Koa `的中间件就是函数，可以是` async` 函数，或是普通函数\n\n```js\n// async 函数\napp.use(async (ctx, next) => {\n  const start = Date.now();\n  await next();\n  const ms = Date.now() - start;\n  console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n});\n\n// 普通函数\napp.use((ctx, next) => {\n  const start = Date.now();\n  return next().then(() => {\n    const ms = Date.now() - start;\n    console.log(`${ctx.method} ${ctx.url} - ${ms}ms`);\n  });\n});\n```\n\n下面则通过中间件封装`http`请求过程中几个常用的功能：\n\n### token校验\n\n```js\nmodule.exports = (options) => async (ctx, next) {\n  try {\n    // 获取 token\n    const token = ctx.header.authorization\n    if (token) {\n      try {\n          // verify 函数验证 token，并获取用户相关信息\n          await verify(token)\n      } catch (err) {\n        console.log(err)\n      }\n    }\n    // 进入下一个中间件\n    await next()\n  } catch (err) {\n    console.log(err)\n  }\n}\n```\n\n### 日志模块\n\n```js\nconst fs = require('fs')\nmodule.exports = (options) => async (ctx, next) => {\n  const startTime = Date.now()\n  const requestTime = new Date()\n  await next()\n  const ms = Date.now() - startTime;\n  let logout = `${ctx.request.ip} -- ${requestTime} -- ${ctx.method} -- ${ctx.url} -- ${ms}ms`;\n  // 输出日志文件\n  fs.appendFileSync('./log.txt', logout + '\\n')\n}\n```\n\n`Koa`存在很多第三方的中间件，如`koa-bodyparser`、`koa-static`等\n\n下面再来看看它们的大体的简单实现：\n\n### koa-bodyparser\n\n`koa-bodyparser` 中间件是将我们的 `post` 请求和表单提交的查询字符串转换成对象，并挂在 `ctx.request.body` 上，方便我们在其他中间件或接口处取值\n\n```js\n// 文件：my-koa-bodyparser.js\nconst querystring = require(\"querystring\");\n\nmodule.exports = function bodyParser() {\n    return async (ctx, next) => {\n        await new Promise((resolve, reject) => {\n            // 存储数据的数组\n            let dataArr = [];\n\n            // 接收数据\n            ctx.req.on(\"data\", data => dataArr.push(data));\n\n            // 整合数据并使用 Promise 成功\n            ctx.req.on(\"end\", () => {\n                // 获取请求数据的类型 json 或表单\n                let contentType = ctx.get(\"Content-Type\");\n\n                // 获取数据 Buffer 格式\n                let data = Buffer.concat(dataArr).toString();\n\n                if (contentType === \"application/x-www-form-urlencoded\") {\n                    // 如果是表单提交，则将查询字符串转换成对象赋值给 ctx.request.body\n                    ctx.request.body = querystring.parse(data);\n                } else if (contentType === \"applaction/json\") {\n                    // 如果是 json，则将字符串格式的对象转换成对象赋值给 ctx.request.body\n                    ctx.request.body = JSON.parse(data);\n                }\n\n                // 执行成功的回调\n                resolve();\n            });\n        });\n\n        // 继续向下执行\n        await next();\n    };\n};\n```\n\n\n\n### koa-static\n\n `koa-static` 中间件的作用是在服务器接到请求时，帮我们处理静态文件\n\n```js\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst mime = require(\"mime\");\nconst { promisify } = require(\"util\");\n\n// 将 stat 和 access 转换成 Promise\nconst stat = promisify(fs.stat);\nconst access = promisify(fs.access)\n\nmodule.exports = function (dir) {\n    return async (ctx, next) => {\n        // 将访问的路由处理成绝对路径，这里要使用 join 因为有可能是 /\n        let realPath = path.join(dir, ctx.path);\n\n        try {\n            // 获取 stat 对象\n            let statObj = await stat(realPath);\n\n            // 如果是文件，则设置文件类型并直接响应内容，否则当作文件夹寻找 index.html\n            if (statObj.isFile()) {\n                ctx.set(\"Content-Type\", `${mime.getType()};charset=utf8`);\n                ctx.body = fs.createReadStream(realPath);\n            } else {\n                let filename = path.join(realPath, \"index.html\");\n\n                // 如果不存在该文件则执行 catch 中的 next 交给其他中间件处理\n                await access(filename);\n\n                // 存在设置文件类型并响应内容\n                ctx.set(\"Content-Type\", \"text/html;charset=utf8\");\n                ctx.body = fs.createReadStream(filename);\n            }\n        } catch (e) {\n            await next();\n        }\n    }\n}\n```\n\n\n\n\n\n## 三、总结\n\n在实现中间件时候，单个中间件应该足够简单，职责单一，中间件的代码编写应该高效，必要的时候通过缓存重复获取数据\n\n`koa`本身比较简洁，但是通过中间件的机制能够实现各种所需要的功能，使得`web`应用具备良好的可拓展性和组合性\n\n通过将公共逻辑的处理编写在中间件中，可以不用在每一个接口回调中做相同的代码编写，减少了冗杂代码，过程就如装饰者模式\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-25T02:20:09.000Z",
    "updateAt": "2024-01-25T19:14:07.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 88,
    "prev": "53a6d5df-e7b0-4f11-a1ee-c55fd1f1f8c2",
    "next": "f866a768-1751-49cc-aff2-133021222b20"
  },
  "post": {
    "exerciseKey": "bc224611-840e-4ed9-a922-67708c085da3",
    "category": "QA",
    "title": "说说对中间件概念的理解，如何封装 node 中间件？",
    "level": 3,
    "updateAt": "2024-01-25T19:14:07+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}