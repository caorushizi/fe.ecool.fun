{
  "data": {
    "id": 1673,
    "exerciseKey": "207b117b-2e93-4760-91ed-8e618a85a50e",
    "category": "QA",
    "renderType": "md",
    "title": "下面函数组件的输出分别是什么？",
    "desc": "下面是一个简单的函数组件，有两个按钮：“alert”、“add”。\n\n如果先点击“alert”按钮，再点击一次“add”按钮，那么弹窗框中的值和页面中展示`value`分别是什么？\n\n```js\nconst FunctionComponent = () => {\n  const [value, setValue] = useState(1)\n\n  const log = () => {\n    setTimeout(() => {\n      alert(value)\n    }, 3000);\n  }\n\n  return (\n    <div>\n      <p>FunctionComponent</p>\n      <div>value: {value}</div>\n      <button onClick={log}>alert</button>\n      <button onClick={() => setValue(value + 1)}>add</button>\n    </div>\n  )\n}\n```",
    "options": null,
    "explanation": "弹出的值是 **1**，页面显示的值是 **2**\n\n我们发现弹出的值和当前页面显示的值不相同。\n\n换句话说：**log 方法内的 value 和点击动作触发那一刻的 value 相同，value 的后续变化不会对 log 方法内的 value 造成影响**。\n\n这种现象被称为“闭包陷阱”或者被叫做“Capture Value” ：函数式组件每次render 都会生产一个新的 log 函数，这个新的 log 函数会产生一个在当前这个阶段 value 值的闭包。\n\n上面例子 “闭包陷阱” 的分析：\n\n1. 初始次渲染，生成一个 log 函数（value = 1）\n2. value 为 1 时，点击 alert 按钮执行 log 函数（value = 1）\n3. 点击按钮增加 value，比如 value 增加到 6，组件 render ，生成一个新的 log 函数（value = 6）\n4. 计时器触发，log 函数（value = 1）弹出闭包内的 value 为 1\n\n如何让弹窗中展示最新的value值呢？\n\n## 使用 useRef 解决闭包陷阱的问题\n\n```js\nconst FunctionComponent = () => {\n  const [value, setValue] = useState(1)\n  const countRef = useRef(value)\n\n  const log = () => {\n    setTimeout(() => {\n      alert(countRef.current)\n    }, 3000);\n  }\n\n  useEffect(() => {\n    countRef.current = value\n  }, [value])\n\n  return (\n    <div>\n      <p>FunctionComponent</p>\n      <div>value: {value}</div>\n      <button onClick={log}>alert</button>\n      <button onClick={() => setValue(value + 1)}>add</button>\n    </div>\n  )\n}\n```\n\n**useRef** 每次 render 时都会返回**同一个引用类型的对象**，我们设置值和读取值都在这个对象上处理，这样就能获取到最新的 value 值了。",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-02-16T11:25:49.000Z",
    "updateAt": "2022-02-16T20:00:47.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 608,
    "prev": "389a7ca7-43d2-4fbe-99ef-50bea32bef5c",
    "next": "88d1350b-5dce-48f8-974d-9115b0d270d0"
  },
  "post": {
    "exerciseKey": "207b117b-2e93-4760-91ed-8e618a85a50e",
    "category": "QA",
    "title": "下面函数组件的输出分别是什么？",
    "level": 3,
    "updateAt": "2022-02-16T20:00:47+00:00"
  },
  "tag": {
    "id": 13,
    "tagName": "React.js",
    "type": "1",
    "exerciseCount": 101
  }
}