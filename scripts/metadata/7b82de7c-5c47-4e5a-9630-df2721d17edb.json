{
  "data": {
    "id": 2010,
    "exerciseKey": "7b82de7c-5c47-4e5a-9630-df2721d17edb",
    "category": "QA",
    "renderType": "md",
    "title": "Promise 的 finally 怎么实现的？",
    "desc": null,
    "options": null,
    "explanation": "Promise.prototype.finally 方法是 ES2018 引入的一个方法，用于在 Promise 执行结束后无论成功与否都会执行的操作。在实际应用中，finally 方法通常用于释放资源、清理代码或更新 UI 界面等操作。\n\n以下是一个简单的实现方式：\n\n```js\nPromise.prototype.finally = function(callback) {\n  const P = this.constructor;\n  return this.then(\n    value => P.resolve(callback()).then(() => value),\n    reason => P.resolve(callback()).then(() => { throw reason })\n  );\n}\n```\n\n我们定义了一个名为 finally 的函数，它使用了 Promise 原型链的方式实现了 finally 方法。该函数接收一个回调函数作为参数，并返回一个新的 Promise 对象。如果原始 Promise 成功，则会先调用 callback 函数，然后将结果传递给下一个 Promise；如果失败，则会先调用 callback 函数，然后将错误信息抛出。\n\n可以看到，在实现中，我们首先通过 this.constructor 获取当前 Promise 实例的构造函数，然后分别处理 Promise 的 resolved 和 rejected 状态的情况。在 resolved 状态时，我们先调用 callback 函数，然后将结果传递给新创建的 Promise 对象；在 rejected 状态时，我们也是先调用 callback 函数，然后将错误信息抛出。\n\n这样，我们就完成了 Promise.prototype.finally 方法的实现。",
    "level": 3.5,
    "status": 2,
    "appId": 7,
    "createAt": "2023-05-28T02:47:20.000Z",
    "updateAt": "2023-05-31T20:02:46.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 345,
    "prev": "442624ba-9c98-4278-a566-45c098863ac8",
    "next": "8169e336-3daa-4e6c-9f85-13c4a9a31467"
  },
  "post": {
    "exerciseKey": "7b82de7c-5c47-4e5a-9630-df2721d17edb",
    "category": "QA",
    "title": "Promise 的 finally 怎么实现的？",
    "level": 3.5,
    "updateAt": "2023-05-31T20:02:46+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}