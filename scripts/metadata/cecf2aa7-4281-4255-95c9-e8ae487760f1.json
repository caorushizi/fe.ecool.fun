{
  "data": {
    "id": 212,
    "exerciseKey": "cecf2aa7-4281-4255-95c9-e8ae487760f1",
    "category": "QA",
    "renderType": "md",
    "title": "说说 JavaScript 中内存泄漏有哪几种情况？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存\n\n并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费\n\n程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存\n\n对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃\n\n ![](https://static.ecool.fun//article/5f67faa9-e84b-4076-b416-bc5a49bf5638.png)\n\n在`C`语言中，因为是手动管理内存，内存泄露是经常出现的事情。\n\n```clang\nchar * buffer;\nbuffer = (char*) malloc(42);\n\n// Do something with buffer\n\nfree(buffer);\n```\n\n上面是 C 语言代码，`malloc`方法用来申请内存，使用完毕之后，必须自己用`free`方法释放内存。\n\n这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为\"垃圾回收机制\"\n\n\n## 二、垃圾回收机制\n\nJavascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存\n\n原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存\n\n通常情况下有两种实现方式：\n\n- 标记清除\n- 引用计数\n\n\n\n### 标记清除\n\n`JavaScript`最常用的垃圾收回机制\n\n当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“\n\n垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉\n\n在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了\n\n随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存\n\n举个例子：\n\n```js\nvar m = 0,n = 19 // 把 m,n,add() 标记为进入环境。\nadd(m, n) // 把 a, b, c标记为进入环境。\nconsole.log(n) // a,b,c标记为离开环境，等待垃圾回收。\nfunction add(a, b) {\n  a++\n  var c = a + b\n  return c\n}\n```\n\n\n\n### 引用计数\n\n语言引擎有一张\"引用表\"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是`0`，就表示这个值不再用到了，因此可以将这块内存释放\n\n如果一个值不再需要了，引用数却不为`0`，垃圾回收机制无法释放这块内存，从而导致内存泄漏\n\n```javascript\nconst arr = [1, 2, 3, 4];\nconsole.log('hello world');\n```\n\n面代码中，数组`[1, 2, 3, 4]`是一个值，会占用内存。变量`arr`是仅有的对这个值的引用，因此引用次数为`1`。尽管后面的代码没有用到`arr`，它还是会持续占用内存\n\n如果需要这块内存被垃圾回收机制释放，只需要设置如下：\n\n```js\narr = null\n```\n\n通过设置`arr`为`null`，就解除了对数组`[1,2,3,4]`的引用，引用次数变为 0，就被垃圾回收了\n\n\n\n### 小结\n\n有了垃圾回收机制，不代表不用关注内存泄露。那些很占空间的值，一旦不再用到，需要检查是否还存在对它们的引用。如果是的话，就必须手动解除引用\n\n\n\n## 三、常见内存泄露情况\n\n意外的全局变量\n\n```js\nfunction foo(arg) {\n    bar = \"this is a hidden global variable\";\n}\n```\n\n另一种意外的全局变量可能由 `this` 创建：\n\n```js\nfunction foo() {\n    this.variable = \"potential accidental global\";\n}\n// foo 调用自己，this 指向了全局对象（window）\nfoo();\n```\n\n上述使用严格模式，可以避免意外的全局变量\n\n定时器也常会造成内存泄露\n\n```js\nvar someResource = getData();\nsetInterval(function() {\n    var node = document.getElementById('Node');\n    if(node) {\n        // 处理 node 和 someResource\n        node.innerHTML = JSON.stringify(someResource));\n    }\n}, 1000);\n```\n\n如果`id`为Node的元素从`DOM`中移除，该定时器仍会存在，同时，因为回调函数中包含对`someResource`的引用，定时器外面的`someResource`也不会被释放\n\n包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放\n\n```js\nfunction bindEvent() {\n  var obj = document.createElement('XXX');\n  var unused = function () {\n    console.log(obj, '闭包内引用obj obj不会被释放');\n  };\n  obj = null; // 解决方法\n}\n```\n\n没有清理对`DOM`元素的引用同样造成内存泄露\n\n```js\nconst refA = document.getElementById('refA');\ndocument.body.removeChild(refA); // dom删除了\nconsole.log(refA, 'refA'); // 但是还存在引用能console出整个div 没有被回收\nrefA = null;\nconsole.log(refA, 'refA'); // 解除引用\n```\n\n包括使用事件监听`addEventListener`监听的时候，在不监听的情况下使用`removeEventListener`取消对事件监听\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T14:00:11.000Z",
    "updateAt": "2024-01-24T17:39:25.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 152,
    "prev": "74cf701d-95e7-428a-a7c1-d746c6c0877c",
    "next": "564a3475-d774-4956-9ea6-024e0e05062d"
  },
  "post": {
    "exerciseKey": "cecf2aa7-4281-4255-95c9-e8ae487760f1",
    "category": "QA",
    "title": "说说 JavaScript 中内存泄漏有哪几种情况？",
    "level": 2,
    "updateAt": "2024-01-24T17:39:25+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}