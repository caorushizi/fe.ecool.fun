{
  "data": {
    "id": 1769,
    "exerciseKey": "80e34587-60c8-4788-af46-96eec6f5f887",
    "category": "QA",
    "renderType": "md",
    "title": "说说对 ES6 中rest参数的理解",
    "desc": null,
    "options": null,
    "explanation": "ES6 引入 rest 参数（形式为`...变量名`），用于获取函数的多余参数，这样就不需要使用`arguments`对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n```js\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n上面代码的`add`函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。\n\n下面是一个 rest 参数代替`arguments`变量的例子。\n```js\n// arguments变量的写法\nfunction sortNumbers() {\n  return Array.prototype.slice.call(arguments).sort();\n}\n\n// rest参数的写法\nconst sortNumbers = (...numbers) => numbers.sort();\n```\n上面代码的两种写法，比较后可以发现，rest 参数的写法更自然也更简洁。\n\n`arguments`对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用`Array.prototype.slice.call`先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用 rest 参数改写数组`push`方法的例子。\n```js\nfunction push(array, ...items) {\n  items.forEach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n```\n注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。\n```js\n// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n```\n函数的`length`属性，不包括 rest 参数。\n```js\n(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n```\n\n> 箭头函数不可以使用`arguments`对象，该对象在函数体内不存在。如果要用，可以用 `rest` 参数代替",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-04-10T08:14:48.000Z",
    "updateAt": "2022-04-10T16:15:05.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 561,
    "prev": "7e8ffb4e-8433-46cc-b45b-d8733a9c4833",
    "next": "a8c7e778-4bc6-40f2-ba07-865a4b2200aa"
  },
  "post": {
    "exerciseKey": "80e34587-60c8-4788-af46-96eec6f5f887",
    "category": "QA",
    "title": "说说对 ES6 中rest参数的理解",
    "level": 2,
    "updateAt": "2022-04-10T16:15:05+00:00"
  },
  "tag": {
    "id": 24,
    "tagName": "ES6",
    "type": "1",
    "exerciseCount": 32
  }
}