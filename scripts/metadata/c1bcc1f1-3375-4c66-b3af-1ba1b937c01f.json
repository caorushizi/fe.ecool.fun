{
  "data": {
    "id": 236,
    "exerciseKey": "c1bcc1f1-3375-4c66-b3af-1ba1b937c01f",
    "category": "QA",
    "renderType": "md",
    "title": "说说你对vue的mixin的理解，以及有哪些应用场景？",
    "desc": null,
    "options": null,
    "explanation": "## 一、mixin是什么\n\n`Mixin`是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问`mixin`类的方法而不必成为其子类\n\n`Mixin`类通常作为功能模块使用，在需要该功能时“混入”，有利于代码复用又避免了多继承的复杂\n\n### Vue中的mixin\n先来看一下官方定义\n> `mixin`（混入），提供了一种非常灵活的方式，来分发 `Vue` 组件中的可复用功能。\n\n本质其实就是一个`js`对象，它可以包含我们组件中任意功能选项，如`data`、`components`、`methods `、`created`、`computed`等等\n\n我们只要将共用的功能以对象的方式传入 `mixins`选项中，当组件使用 `mixins`对象时所有`mixins`对象的选项都将被混入该组件本身的选项中来\n\n在`Vue`中我们可以**局部混入**跟**全局混入**\n\n### 局部混入\n\n定义一个`mixin`对象，有组件`options`的`data`、`methods`属性\n\n```js\nvar myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n```\n\n组件通过`mixins`属性调用`mixin`对象\n\n```js\nVue.component('componentA',{\n  mixins: [myMixin]\n})\n```\n\n该组件在使用的时候，混合了`mixin`里面的方法，在自动执行`create`生命钩子，执行`hello`方法\n\n### 全局混入\n\n通过`Vue.mixin()`进行全局的混入\n\n```js\nVue.mixin({\n  created: function () {\n      console.log(\"全局混入\")\n    }\n})\n```\n\n使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件）\n\nPS：全局混入常用于插件的编写\n\n### 注意事项：\n\n当组件存在与`mixin`对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖`mixin`的选项\n\n但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行`mixin`的钩子，再执行组件的钩子\n\n\n\n## 二、使用场景\n\n在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立\n\n这时，可以通过`Vue`的`mixin`功能将相同或者相似的代码提出来\n\n举个例子\n\n定义一个`modal`弹窗组件，内部通过`isShowing`来控制显示\n\n```js\nconst Modal = {\n  template: '#modal',\n  data() {\n    return {\n      isShowing: false\n    }\n  },\n  methods: {\n    toggleShow() {\n      this.isShowing = !this.isShowing;\n    }\n  }\n}\n```\n\n定义一个`tooltip`提示框，内部通过`isShowing`来控制显示\n\n```js\nconst Tooltip = {\n  template: '#tooltip',\n  data() {\n    return {\n      isShowing: false\n    }\n  },\n  methods: {\n    toggleShow() {\n      this.isShowing = !this.isShowing;\n    }\n  }\n}\n```\n\n通过观察上面两个组件，发现两者的逻辑是相同，代码控制显示也是相同的，这时候`mixin`就派上用场了\n\n首先抽出共同代码，编写一个`mixin`\n\n```js\nconst toggle = {\n  data() {\n    return {\n      isShowing: false\n    }\n  },\n  methods: {\n    toggleShow() {\n      this.isShowing = !this.isShowing;\n    }\n  }\n}\n```\n\n两个组件在使用上，只需要引入`mixin`\n\n```js\nconst Modal = {\n  template: '#modal',\n  mixins: [toggle]\n};\n \nconst Tooltip = {\n  template: '#tooltip',\n  mixins: [toggle]\n}\n```\n\n通过上面小小的例子，让我们知道了`Mixin`对于封装一些可复用的功能如此有趣、方便、实用\n\n\n\n## 三、源码分析\n\n首先从`Vue.mixin`入手\n\n源码位置：/src/core/global-api/mixin.js\n\n```js\nexport function initMixin (Vue: GlobalAPI) {\n  Vue.mixin = function (mixin: Object) {\n    this.options = mergeOptions(this.options, mixin)\n    return this\n  }\n}\n```\n\n主要是调用`merOptions`方法\n\n源码位置：/src/core/util/options.js\n\n```js\nexport function mergeOptions (\n  parent: Object,\n  child: Object,\n  vm?: Component\n): Object {\n\nif (child.mixins) { // 判断有没有mixin 也就是mixin里面挂mixin的情况 有的话递归进行合并\n    for (let i = 0, l = child.mixins.length; i < l; i++) {\n    parent = mergeOptions(parent, child.mixins[i], vm)\n    }\n}\n\n  const options = {} \n  let key\n  for (key in parent) {\n    mergeField(key) // 先遍历parent的key 调对应的strats[XXX]方法进行合并\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) { // 如果parent已经处理过某个key 就不处理了\n      mergeField(key) // 处理child中的key 也就parent中没有处理过的key\n    }\n  }\n  function mergeField (key) {\n    const strat = strats[key] || defaultStrat\n    options[key] = strat(parent[key], child[key], vm, key) // 根据不同类型的options调用strats中不同的方法进行合并\n  }\n  return options\n}\n```\n从上面的源码，我们得到以下几点：\n\n- 优先递归处理 `mixins`\n- 先遍历合并`parent` 中的`key`，调用`mergeField`方法进行合并，然后保存在变量`options`\n- 再遍历 `child`，合并补上 `parent` 中没有的`key`，调用`mergeField`方法进行合并，保存在变量`options`\n- 通过 `mergeField` 函数进行了合并\n\n下面是关于`Vue`的几种类型的合并策略\n\n- 替换型\n- 合并型\n- 队列型\n- 叠加型\n\n### 替换型\n\n替换型合并有`props`、`methods`、`inject`、`computed`\n\n```js\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal: ?Object,\n  childVal: ?Object,\n  vm?: Component,\n  key: string\n): ?Object {\n  if (!parentVal) return childVal // 如果parentVal没有值，直接返回childVal\n  const ret = Object.create(null) // 创建一个第三方对象 ret\n  extend(ret, parentVal) // extend方法实际是把parentVal的属性复制到ret中\n  if (childVal) extend(ret, childVal) // 把childVal的属性复制到ret中\n  return ret\n}\nstrats.provide = mergeDataOrFn\n```\n\n同名的`props`、`methods`、`inject`、`computed`会被后来者代替\n\n### 合并型\n\n和并型合并有：`data`\n\n```js\nstrats.data = function(parentVal, childVal, vm) {    \n    return mergeDataOrFn(\n        parentVal, childVal, vm\n    )\n};\n\nfunction mergeDataOrFn(parentVal, childVal, vm) {    \n    return function mergedInstanceDataFn() {        \n        var childData = childVal.call(vm, vm) // 执行data挂的函数得到对象\n        var parentData = parentVal.call(vm, vm)        \n        if (childData) {            \n            return mergeData(childData, parentData) // 将2个对象进行合并                                 \n        } else {            \n            return parentData // 如果没有childData 直接返回parentData\n        }\n    }\n}\n\nfunction mergeData(to, from) {    \n    if (!from) return to    \n    var key, toVal, fromVal;    \n    var keys = Object.keys(from);   \n    for (var i = 0; i < keys.length; i++) {\n        key = keys[i];\n        toVal = to[key];\n        fromVal = from[key];    \n        // 如果不存在这个属性，就重新设置\n        if (!to.hasOwnProperty(key)) {\n            set(to, key, fromVal);\n        }      \n        // 存在相同属性，合并对象\n        else if (typeof toVal ==\"object\" && typeof fromVal ==\"object\") {\n            mergeData(toVal, fromVal);\n        }\n    }    \n    return to\n}\n```\n\n`mergeData`函数遍历了要合并的 data 的所有属性，然后根据不同情况进行合并：\n\n- 当目标 data 对象不包含当前属性时，调用 `set` 方法进行合并（set方法其实就是一些合并重新赋值的方法）\n- 当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性\n\n### 队列性\n\n队列性合并有：全部生命周期和`watch`\n\n```js\nfunction mergeHook (\n  parentVal: ?Array<Function>,\n  childVal: ?Function | ?Array<Function>\n): ?Array<Function> {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(hook => {\n  strats[hook] = mergeHook\n})\n\n// watch\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n```\n\n生命周期钩子和`watch`被合并为一个数组，然后正序遍历一次执行\n\n### 叠加型\n\n叠加型合并有：`component`、`directives`、`filters`\n\n```js\nstrats.components=\nstrats.directives=\n\nstrats.filters = function mergeAssets(\n    parentVal, childVal, vm, key\n) {    \n    var res = Object.create(parentVal || null);    \n    if (childVal) { \n        for (var key in childVal) {\n            res[key] = childVal[key];\n        }   \n    } \n    return res\n}\n```\n\n叠加型主要是通过原型链进行层层的叠加\n\n\n\n### 小结：\n\n- 替换型策略有`props`、`methods`、`inject`、`computed`，就是将新的同名参数替代旧的参数\n- 合并型策略是`data`, 通过`set`方法进行合并和重新赋值\n- 队列型策略有生命周期函数和`watch`，原理是将函数存入一个数组，然后正序遍历依次执行\n- 叠加型有`component`、`directives`、`filters`，通过原型链进行层层的叠加\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:38:57.000Z",
    "updateAt": "2024-01-25T14:35:23.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 133,
    "prev": "28305428-953c-4daa-9b4e-f3d01b694017",
    "next": "a0c75651-7e44-437d-9f1f-38775698091b"
  },
  "post": {
    "exerciseKey": "c1bcc1f1-3375-4c66-b3af-1ba1b937c01f",
    "category": "QA",
    "title": "说说你对vue的mixin的理解，以及有哪些应用场景？",
    "level": 2,
    "updateAt": "2024-01-25T14:35:23+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}