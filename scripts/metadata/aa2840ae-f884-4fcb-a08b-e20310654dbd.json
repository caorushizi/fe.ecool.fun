{
  "data": {
    "id": 1763,
    "exerciseKey": "aa2840ae-f884-4fcb-a08b-e20310654dbd",
    "category": "QA",
    "renderType": "md",
    "title": "岛屿数量",
    "desc": "给你一个由 `'1'`（陆地）和 `'0'`（水）组成的的二维网格，请你计算网格中岛屿的数量。\n\n岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\n\n此外，你可以假设该网格的四条边均被水包围。\n\n**示例 1：**\n\n\n**输入：**\n\n```js\ngrid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\n```\n\n**输出：** 1\n\n**示例 2：**\n\n\n**输入：**\n\n```js\ngrid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\n```\n\n**输出：** 3\n\n**提示：**\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 300`\n* `grid[i][j]` 的值为 `'0'` 或 `'1'`\n\n```js\n/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n\n};\n```",
    "options": null,
    "explanation": "## 方法一：深度优先搜索\n\n我们可以将二维网格看成一个无向图，竖直或水平相邻的 11 之间有边相连。\n\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 11，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 11 都会被重新标记为 00。\n\n最终岛屿的数量就是我们进行深度优先搜索的次数。\n\n```js\nconst numIslands = (grid) => {\n  let count = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === '1') {\n        count++\n        turnZero(i, j, grid)\n      }\n    }\n  }\n  return count\n}\nfunction turnZero(i, j, grid) {\n  if (i < 0 || i >= grid.length || j < 0 \n       || j >= grid[0].length || grid[i][j] === '0') return\n  grid[i][j] = '0'\n  turnZero(i, j + 1, grid)\n  turnZero(i, j - 1, grid)\n  turnZero(i + 1, j, grid)\n  turnZero(i - 1, j, grid)\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：O(MN)，其中 M 和 N 分别为行数和列数。\n* 空间复杂度：O(MN)，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到 MN。\n\n## 方法二：广度优先搜索\n\n同样地，我们也可以使用广度优先搜索代替深度优先搜索。\n\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 11，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 11 都会被重新标记为 00。直到队列为空，搜索结束。\n\n最终岛屿的数量就是我们进行广度优先搜索的次数。\n\n```js\nconst numIslands = (grid) => {\n  let count = 0\n  let queue = []\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === '1') {\n        count++\n        grid[i][j] = '0' // 做标记，避免重复遍历\n        queue.push([i, j])\n        turnZero(queue, grid)\n      }\n    }\n  }\n  return count\n}\nfunction turnZero(queue, grid) {\n  const dirs = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n  while (queue.length) {\n    const cur = queue.shift()\n    for (const dir of dirs) {\n      const x = cur[0] + dir[0]\n      const y = cur[1] + dir[1]\n      if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || grid[x][y] !== '1') {\n        continue\n      }\n      grid[x][y] = '0'\n      queue.push([x, y])\n    }\n  }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：O(MN)，其中 M 和 N 分别为行数和列数。\n* 空间复杂度：O(min(M,N))，在最坏情况下，整个网格均为陆地，队列的大小可以达到 min(M,N)。\n\n## 方法三：并查集\n\n同样地，我们也可以使用并查集代替搜索。\n\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 1，则将其与相邻四个方向上的 1 在并查集中进行合并。\n\n最终岛屿的数量就是并查集中连通分量的数目。\n\n```js\n/**\n * @param {character[][]} grid\n * @return {number}\n */\nvar numIslands = function(grid) {\n    const Y = grid.length;\n    const X = grid[0].length;\n    const uf = new UnionFind();\n\n    for(let i = 0; i < Y; i++) {\n        for(let j = 0; j < X; j++) {\n            if(grid[i][j] == 1) uf.makeSet([i, j]);\n        }\n    }\n\n    for(let i = 0; i < Y; i++) {\n        for(let j = 0; j < X; j++) {\n            if (grid[i][j] == 1) {\n                console.log(i , j)\n                if ((i + 1 < Y) && (grid[i + 1][j] == 1)) uf.union([i, j], [i + 1, j]); // 右侧\n                if ((j + 1 < X) && (grid[i][j + 1] == 1)) uf.union([i, j], [i, j + 1]); // 下侧\n            }\n        }\n    }\n\n    return uf.getCount();\n};\nclass UnionFind {\n    constructor() {\n        this.parents = {};\n        this.count = 0;\n    }\n    makeSet(x) {\n        this.parents[x] = x + '';\n        this.count++;\n    }\n    findSet(x) { // 路径压缩，查x的根节点\n        while (this.parents[x] !== (x + '')) {\n            x = this.parents[x];\n        }\n        return x + '';\n    }\n    union(x, y) {\n        this.link(this.findSet(x), this.findSet(y));\n    }\n    link(x, y) {\n        if (x === y) return;\n        this.parents[x] = y;\n        this.count--;\n    }\n    getCount() {\n        return this.count;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：O(MN×α(MN))，其中 MM 和 NN 分别为行数和列数。注意当使用路径压缩（见 find 函数）和按秩合并（见数组 rank）实现并查集时，单次操作的时间复杂度为 α(MN)，其中 α(x) 为反阿克曼函数，当自变量 xx 的值在人类可观测的范围内（宇宙中粒子的数量）时，函数 α(x) 的值不会超过 5，因此也可以看成是常数时间复杂度。\n* 空间复杂度：O(MN)，这是并查集需要使用的空间。\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2022-04-10T07:14:34.000Z",
    "updateAt": "2022-04-10T15:14:52.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 566,
    "prev": "6a8dda85-ad38-4eec-86b5-dad87ad3c929",
    "next": "8ee27192-8ae7-4e03-a32c-b00db276a83f"
  },
  "post": {
    "exerciseKey": "aa2840ae-f884-4fcb-a08b-e20310654dbd",
    "category": "QA",
    "title": "岛屿数量",
    "level": 3,
    "updateAt": "2022-04-10T15:14:52+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}