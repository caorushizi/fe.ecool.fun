{
  "data": {
    "id": 550,
    "exerciseKey": "9ee51dac-67c2-4181-b9a6-18a10b2a8f95",
    "category": "QA",
    "renderType": "md",
    "title": "说说Node中的EventEmitter? 如何实现一个EventEmitter?",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n我们了解到，`Node `采用了事件驱动机制，而`EventEmitter `就是`Node`实现事件驱动的基础\n\n在`EventEmitter`的基础上，`Node `几乎所有的模块都继承了这个类，这些模块拥有了自己的事件，可以绑定／触发监听器，实现了异步操作\n\n`Node.js` 里面的许多对象都会分发事件，比如 fs.readStream 对象会在文件被打开的时候触发一个事件\n\n这些产生事件的对象都是 events.EventEmitter 的实例，这些对象有一个 eventEmitter.on() 函数，用于将一个或多个函数绑定到命名事件上\n\n\n## 二、使用方法\n\n`Node `的`events`模块只提供了一个`EventEmitter`类，这个类实现了`Node`异步事件驱动架构的基本模式——观察者模式\n\n在这种模式中，被观察者(主体)维护着一组其他对象派来(注册)的观察者，有新的对象对主体感兴趣就注册观察者，不感兴趣就取消订阅，主体有更新的话就依次通知观察者们\n\n基本代码如下所示：\n\n```js\nconst EventEmitter = require('events')\n\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter()\n\nfunction callback() {\n    console.log('触发了event事件！')\n}\nmyEmitter.on('event', callback)\nmyEmitter.emit('event')\nmyEmitter.removeListener('event', callback);\n```\n\n通过实例对象的`on`方法注册一个名为`event`的事件，通过`emit`方法触发该事件，而`removeListener`用于取消事件的监听\n\n关于其常见的方法如下：\n\n- emitter.addListener/on(eventName, listener) ：添加类型为 eventName 的监听事件到事件数组尾部\n- emitter.prependListener(eventName, listener)：添加类型为 eventName 的监听事件到事件数组头部  \n- emitter.emit(eventName[, ...args])：触发类型为 eventName 的监听事件 \n- emitter.removeListener/off(eventName, listener)：移除类型为 eventName 的监听事件   \n- emitter.once(eventName, listener)：添加类型为 eventName 的监听事件，以后只能执行一次并删除           \n- emitter.removeAllListeners([eventName])： 移除全部类型为 eventName 的监听事件\n\n\n\n## 三、实现过程\n\n通过上面的方法了解，`EventEmitter`是一个构造函数，内部存在一个包含所有事件的对象\n\n```js\nclass EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n}\n```\n\n其中`events`存放的监听事件的函数的结构如下：\n\n```js\n{\n  \"event1\": [f1,f2,f3]，\n  \"event2\": [f4,f5]，\n  ...\n}\n```\n\n然后开始一步步实现实例方法，首先是`emit`，第一个参数为事件的类型，第二个参数开始为触发事件函数的参数，实现如下：\n\n```js\nemit(type, ...args) {\n    this.events[type].forEach((item) => {\n        Reflect.apply(item, this, args);\n    });\n}\n```\n\n当实现了`emit`方法之后，然后实现`on`、`addListener`、`prependListener`这三个实例方法，都是添加事件监听触发函数，实现也是大同小异\n\n```js\non(type, handler) {\n    if (!this.events[type]) {\n        this.events[type] = [];\n    }\n    this.events[type].push(handler);\n}\n\naddListener(type,handler){\n    this.on(type,handler)\n}\n\nprependListener(type, handler) {\n    if (!this.events[type]) {\n        this.events[type] = [];\n    }\n    this.events[type].unshift(handler);\n}\n```\n\n紧接着就是实现事件监听的方法`removeListener/on`\n\n```js\nremoveListener(type, handler) {\n    if (!this.events[type]) {\n        return;\n    }\n    this.events[type] = this.events[type].filter(item => item !== handler);\n}\n\noff(type,handler){\n    this.removeListener(type,handler)\n}\n```\n\n最后再来实现`once`方法， 再传入事件监听处理函数的时候进行封装，利用闭包的特性维护当前状态，通过`fired`属性值判断事件函数是否执行过\n\n```js\nonce(type, handler) {\n    this.on(type, this._onceWrap(type, handler, this));\n  }\n\n  _onceWrap(type, handler, target) {\n    const state = { fired: false, handler, type , target};\n    const wrapFn = this._onceWrapper.bind(state);\n    state.wrapFn = wrapFn;\n    return wrapFn;\n  }\n\n  _onceWrapper(...args) {\n    if (!this.fired) {\n      this.fired = true;\n      Reflect.apply(this.handler, this.target, args);\n      this.target.off(this.type, this.wrapFn);\n    }\n }\n```\n\n完整代码如下：\n\n```js\nclass EventEmitter {\n    constructor() {\n        this.events = {};\n    }\n\n    on(type, handler) {\n        if (!this.events[type]) {\n            this.events[type] = [];\n        }\n        this.events[type].push(handler);\n    }\n\n    addListener(type,handler){\n        this.on(type,handler)\n    }\n\n    prependListener(type, handler) {\n        if (!this.events[type]) {\n            this.events[type] = [];\n        }\n        this.events[type].unshift(handler);\n    }\n\n    removeListener(type, handler) {\n        if (!this.events[type]) {\n            return;\n        }\n        this.events[type] = this.events[type].filter(item => item !== handler);\n    }\n\n    off(type,handler){\n        this.removeListener(type,handler)\n    }\n\n    emit(type, ...args) {\n        this.events[type].forEach((item) => {\n            Reflect.apply(item, this, args);\n        });\n    }\n\n    once(type, handler) {\n        this.on(type, this._onceWrap(type, handler, this));\n    }\n\n    _onceWrap(type, handler, target) {\n        const state = { fired: false, handler, type , target};\n        const wrapFn = this._onceWrapper.bind(state);\n        state.wrapFn = wrapFn;\n        return wrapFn;\n    }\n\n    _onceWrapper(...args) {\n        if (!this.fired) {\n            this.fired = true;\n            Reflect.apply(this.handler, this.target, args);\n            this.target.off(this.type, this.wrapFn);\n        }\n    }\n}\n```\n",
    "level": 3,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-25T02:18:56.000Z",
    "updateAt": "2024-01-25T19:12:49.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 91,
    "prev": "2b415f44-7a22-4e74-bef4-1b7c09e170d4",
    "next": "b96ba5f2-383d-4a6a-9be9-be18b2a20a6e"
  },
  "post": {
    "exerciseKey": "9ee51dac-67c2-4181-b9a6-18a10b2a8f95",
    "category": "QA",
    "title": "说说Node中的EventEmitter? 如何实现一个EventEmitter?",
    "level": 3,
    "updateAt": "2024-01-25T19:12:49+00:00"
  },
  "tag": {
    "id": 18,
    "tagName": "Node.js",
    "type": "1",
    "exerciseCount": 26
  }
}