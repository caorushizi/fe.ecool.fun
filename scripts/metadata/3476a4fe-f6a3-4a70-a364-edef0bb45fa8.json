{
  "data": {
    "id": 76,
    "exerciseKey": "3476a4fe-f6a3-4a70-a364-edef0bb45fa8",
    "category": "Choice",
    "renderType": "md",
    "title": "如何能打印出 console.log 语句后注释掉的值？",
    "desc": "```javascript\nfunction* startGame() {\n  const answer = yield \"Do you love JavaScript?\";\n  if (answer !== \"Yes\") {\n    return \"Oh wow... Guess we're gone here\";\n  }\n  return \"JavaScript loves you back ❤️\";\n}\n\nconst game = startGame();\nconsole.log(/* 1 */); // Do you love JavaScript?\nconsole.log(/* 2 */); // JavaScript loves you back ❤️\n```",
    "options": "{\"options\":[\"game.next(\\\"Yes\\\").value and game.next().value\",\"game.next.value(\\\"Yes\\\") and game.next.value()\",\"game.next().value and game.next(\\\"Yes\\\").value\",\"game.next.value() and game.next.value(\\\"Yes\\\")\"],\"isMulti\":false,\"answer\":[2]}",
    "explanation": "`generator`函数在遇到`yield`关键字时会“暂停”其执行。 首先，我们需要让函数产生字符串`Do you love JavaScript?`，这可以通过调用`game.next().value`来完成。上述函数的第一行就有一个`yield`关键字，那么运行立即停止了，`yield`表达式本身没有返回值，或者说总是返回`undefined`, 这意味着此时变量 `答案` 为`undefined`\n`next`方法可以带一个参数，该参数会被当作上一个 `yield` 表达式的返回值。当我们调用`game.next(\"Yes\").value`时，先前的 `yield` 的返回值将被替换为传递给`next()`函数的参数`\"Yes\"`。此时变量 `答案` 被赋值为 `\"Yes\"`，`if`语句返回`false`，所以`JavaScript loves you back ❤️`被打印。",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-02T15:33:04.000Z",
    "updateAt": "2021-07-03T22:22:59.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 1132,
    "prev": "69fc3145-fc55-4a19-87be-9dd486c16eae",
    "next": "e28517a7-ce0d-41af-b7a0-94a0baeb1477"
  },
  "post": {
    "exerciseKey": "3476a4fe-f6a3-4a70-a364-edef0bb45fa8",
    "category": "Choice",
    "title": "如何能打印出 console.log 语句后注释掉的值？",
    "level": 1,
    "updateAt": "2021-07-03T22:22:59+00:00"
  },
  "tag": {
    "id": 32,
    "tagName": "选择题",
    "type": "1",
    "exerciseCount": 151
  }
}