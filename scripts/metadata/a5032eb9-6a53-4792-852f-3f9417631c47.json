{
  "data": {
    "id": 230,
    "exerciseKey": "a5032eb9-6a53-4792-852f-3f9417631c47",
    "category": "QA",
    "renderType": "md",
    "title": "SPA（单页应用）首屏加载速度慢怎么解决？",
    "desc": null,
    "options": null,
    "explanation": "## 一、什么是首屏加载\n\n首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容\n\n首屏加载可以说是用户体验中**最重要**的环节\n\n### 关于计算首屏时间\n利用`performance.timing`提供的数据：\n\n ![image.png](https://static.ecool.fun//article/106a98b9-b2dd-402f-943a-810cdc7e8879.png)\n\n通过`DOMContentLoad`或者`performance`来计算出首屏时间\n\n```js\n// 方案一：\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    console.log('first contentful painting');\n});\n// 方案二：\nperformance.getEntriesByName(\"first-contentful-paint\")[0].startTime\n\n// performance.getEntriesByName(\"first-contentful-paint\")[0]\n// 会返回一个 PerformancePaintTiming的实例，结构如下：\n{\n  name: \"first-contentful-paint\",\n  entryType: \"paint\",\n  startTime: 507.80000002123415,\n  duration: 0,\n};\n```\n\n## 二、加载慢的原因\n\n在页面渲染的过程，导致加载速度慢的因素可能如下：\n\n- 网络延时问题\n- 资源文件体积是否过大\n- 资源是否重复发送请求去加载了\n- 加载脚本的时候，渲染内容堵塞了\n\n\n\n## 三、解决方案\n\n常见的几种SPA首屏优化方式\n\n- 减小入口文件积\n- 静态资源本地缓存\n- UI框架按需加载\n- 图片资源的压缩\n- 组件重复打包\n- 开启GZip压缩\n- 使用SSR\n\n\n\n### 减小入口文件体积\n\n常用的手段是路由懒加载，把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加\n\n ![image.png](https://static.ecool.fun//article/0145e724-3487-43df-b7da-1120b9a78120.png)\n\n在`vue-router`配置路由的时候，采用动态加载路由的形式\n\n```js\nroutes:[ \n    path: 'Blogs',\n    name: 'ShowBlogs',\n    component: () => import('./components/ShowBlogs.vue')\n]\n```\n\n以函数的形式加载路由，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件\n\n\n\n### 静态资源本地缓存\n\n后端返回资源问题：\n\n- 采用`HTTP`缓存，设置`Cache-Control`，`Last-Modified`，`Etag`等响应头\n\n- 采用`Service Worker`离线缓存\n\n前端合理利用`localStorage`\n\n\n\n### UI框架按需加载\n\n在日常使用`UI`框架，例如`element-UI`、或者`antd`，我们通常会直接引用整个`UI`库\n\n```js\nimport ElementUI from 'element-ui'\nVue.use(ElementUI)\n```\n\n但实际上我用到的组件只有按钮，分页，表格，输入与警告 所以我们要按需引用\n\n```js\nimport { Button, Input, Pagination, Table, TableColumn, MessageBox } from 'element-ui';\nVue.use(Button)\nVue.use(Input)\nVue.use(Pagination)\n```\n\n\n\n### 组件重复打包\n\n假设`A.js`文件是一个常用的库，现在有多个路由使用了`A.js`文件，这就造成了重复下载\n\n解决方案：在`webpack`的`config`文件中，修改`CommonsChunkPlugin`的配置\n\n```js\nminChunks: 3\n```\n\n`minChunks`为3表示会把使用3次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件\n\n\n\n### 图片资源的压缩\n\n图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素\n\n对于所有的图片资源，我们可以进行适当的压缩\n\n对页面上使用到的`icon`，可以使用在线字体图标，或者雪碧图，将众多小图标合并到同一张图上，用以减轻`http`请求压力。\n\n\n\n### 开启GZip压缩\n\n拆完包之后，我们再用`gzip`做一下压缩 安装`compression-webpack-plugin`\n\n```js\ncnmp i compression-webpack-plugin -D\n```\n\n在`vue.congig.js`中引入并修改`webpack`配置\n\n```js\nconst CompressionPlugin = require('compression-webpack-plugin')\n\nconfigureWebpack: (config) => {\n        if (process.env.NODE_ENV === 'production') {\n            // 为生产环境修改配置...\n            config.mode = 'production'\n            return {\n                plugins: [new CompressionPlugin({\n                    test: /\\.js$|\\.html$|\\.css/, //匹配文件名\n                    threshold: 10240, //对超过10k的数据进行压缩\n                    deleteOriginalAssets: false //是否删除原文件\n                })]\n            }\n        }\n```\n\n在服务器我们也要做相应的配置 如果发送请求的浏览器支持`gzip`，就发送给它`gzip`格式的文件 我的服务器是用`express`框架搭建的 只要安装一下`compression`就能使用\n\n```\nconst compression = require('compression')\napp.use(compression())  // 在其他中间件使用之前调用\n```\n\n\n\n### 使用SSR\n\nSSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成html字符串，再发送到浏览器\n\n从头搭建一个服务端渲染是很复杂的，`vue`应用建议使用`Nuxt.js`实现服务端渲染\n\n\n\n### 小结：\n\n减少首屏渲染时间的方法有很多，总的来讲可以分成两大部分 ：资源加载优化 和 页面渲染优化\n\n下图是更为全面的首屏优化的方案\n\n ![image.png](https://static.ecool.fun//article/b15bf9a4-d026-4942-8957-fcc52d74b3da.png)\n\n\n大家可以根据自己项目的情况选择各种方式进行首屏渲染的优化\n\n",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-04T03:34:05.000Z",
    "updateAt": "2024-03-12T21:49:22.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 16,
    "prev": "5def10e9-7825-4bd4-a76e-6d7eb555a2ce",
    "next": "485b5052-3119-4ced-9473-940489629f99"
  },
  "post": {
    "exerciseKey": "a5032eb9-6a53-4792-852f-3f9417631c47",
    "category": "QA",
    "title": "SPA（单页应用）首屏加载速度慢怎么解决？",
    "level": 2,
    "updateAt": "2024-03-12T21:49:22+00:00"
  },
  "tag": {
    "id": 14,
    "tagName": "Vue.js",
    "type": "1",
    "exerciseCount": 68
  }
}