{
  "data": {
    "id": 205,
    "exerciseKey": "bbcedbfa-a74f-411f-a309-01f7e590ee50",
    "category": "QA",
    "renderType": "md",
    "title": "说说ajax的原理，以及如何实现？",
    "desc": null,
    "options": null,
    "explanation": "## 一、是什么\n\n`AJAX `全称(Async Javascript and XML)\n\n即异步的` JavaScript` 和` XML`，是一种创建交互式网页应用的网页开发技术，可以在不重新加载整个网页的情况下，与服务器交换数据，并且更新部分网页\n\n`Ajax`的原理简单来说通过`XmlHttpRequest`对象来向服务器发异步请求，从服务器获得数据，然后用`JavaScript`来操作`DOM`而更新页面\n\n流程图如下：\n\n ![](https://static.ecool.fun//article/b6c951d9-ba0f-4d0c-b6e8-1155797f29a9.png)\n\n下面举个例子：\n\n领导想找小李汇报一下工作，就委托秘书去叫小李，自己就接着做其他事情，直到秘书告诉他小李已经到了，最后小李跟领导汇报工作\n\n`Ajax`请求数据流程与“领导想找小李汇报一下工作”类似，上述秘书就相当于`XMLHttpRequest`对象，领导相当于浏览器，响应数据相当于小李\n\n浏览器可以发送`HTTP`请求后，接着做其他事情，等收到`XHR`返回来的数据再进行操作\n\n\n\n## 二、实现过程\n\n实现 `Ajax `异步交互需要服务器逻辑进行配合，需要完成以下步骤：\n\n- 创建 `Ajax `的核心对象 `XMLHttpRequest `对象\n\n- 通过 `XMLHttpRequest` 对象的 `open()` 方法与服务端建立连接\n\n- 构建请求所需的数据内容，并通过` XMLHttpRequest` 对象的 `send()` 方法发送给服务器端\n\n- 通过 `XMLHttpRequest` 对象提供的 `onreadystatechange` 事件监听服务器端你的通信状态\n\n- 接受并处理服务端向客户端响应的数据结果\n\n- 将处理结果更新到 `HTML `页面中\n\n\n\n### 创建XMLHttpRequest对象\n\n通过`XMLHttpRequest()` 构造函数用于初始化一个 `XMLHttpRequest` 实例对象\n\n```js\nconst xhr = new XMLHttpRequest();\n```\n\n\n\n### 与服务器建立连接\n\n通过 `XMLHttpRequest` 对象的 `open()` 方法与服务器建立连接\n\n```js\nxhr.open(method, url, [async][, user][, password])\n```\n\n参数说明：\n\n- `method`：表示当前的请求方式，常见的有`GET`、`POST`\n\n- `url`：服务端地址\n\n- `async`：布尔值，表示是否异步执行操作，默认为`true`\n\n-  `user`: 可选的用户名用于认证用途；默认为`null\n\n\n- `password`: 可选的密码用于认证用途，默认为`null\n\n\n\n### 给服务端发送数据\n\n通过 `XMLHttpRequest` 对象的 `send()` 方法，将客户端页面的数据发送给服务端\n\n```js\nxhr.send([body])\n```\n\n`body`: 在 `XHR` 请求中要发送的数据体，如果不传递数据则为 `null`\n\n如果使用`GET`请求发送数据的时候，需要注意如下：\n\n- 将请求数据添加到`open()`方法中的`url`地址中\n- 发送请求数据中的`send()`方法中参数设置为`null`\n\n\n\n### 绑定onreadystatechange事件\n\n`onreadystatechange` 事件用于监听服务器端的通信状态，主要监听的属性为`XMLHttpRequest.readyState` ,\n\n关于`XMLHttpRequest.readyState`属性有五个状态，如下图显示\n\n![](https://static.ecool.fun//article/bd7bf527-914d-4195-82a0-d0f1ea28e00a.png)\n\n只要 `readyState `属性值一变化，就会触发一次 `readystatechange` 事件\n\n`XMLHttpRequest.responseText`属性用于接收服务器端的响应结果\n\n举个例子：\n\n```js\nconst request = new XMLHttpRequest()\nrequest.onreadystatechange = function(e){\n    if(request.readyState === 4){ // 整个请求过程完毕\n        if(request.status >= 200 && request.status <= 300){\n            console.log(request.responseText) // 服务端返回的结果\n        }else if(request.status >=400){\n            console.log(\"错误信息：\" + request.status)\n        }\n    }\n}\nrequest.open('POST','http://xxxx')\nrequest.send()\n```\n\n\n\n\n\n## 三、封装\n\n通过上面对`XMLHttpRequest `对象的了解，下面来封装一个简单的`ajax`请求\n\n```js\n//封装一个ajax请求\nfunction ajax(options) {\n    //创建XMLHttpRequest对象\n    const xhr = new XMLHttpRequest()\n\n\n    //初始化参数的内容\n    options = options || {}\n    options.type = (options.type || 'GET').toUpperCase()\n    options.dataType = options.dataType || 'json'\n    const params = options.data\n\n    //发送请求\n    if (options.type === 'GET') {\n        xhr.open('GET', options.url + '?' + params, true)\n        xhr.send(null)\n    } else if (options.type === 'POST') {\n        xhr.open('POST', options.url, true)\n        xhr.send(params)\n\n    //接收请求\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n            let status = xhr.status\n            if (status >= 200 && status < 300) {\n                options.success && options.success(xhr.responseText, xhr.responseXML)\n            } else {\n                options.fail && options.fail(status)\n            }\n        }\n    }\n}\n```\n\n使用方式如下\n\n```js\najax({\n    type: 'post',\n    dataType: 'json',\n    data: {},\n    url: 'https://xxxx',\n    success: function(text,xml){//请求成功后的回调函数\n        console.log(text)\n    },\n    fail: function(status){////请求失败后的回调函数\n        console.log(status)\n    }\n})\n```",
    "level": 2.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:54:25.000Z",
    "updateAt": "2024-01-24T17:37:15.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 158,
    "prev": "e3f52a7b-4c54-4b00-bd6c-b63f2b60421c",
    "next": "305a1520-b7df-4c05-a72b-a18c165250de"
  },
  "post": {
    "exerciseKey": "bbcedbfa-a74f-411f-a309-01f7e590ee50",
    "category": "QA",
    "title": "说说ajax的原理，以及如何实现？",
    "level": 2.5,
    "updateAt": "2024-01-24T17:37:15+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}