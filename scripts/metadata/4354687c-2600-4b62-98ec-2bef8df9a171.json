{
  "data": {
    "id": 202,
    "exerciseKey": "4354687c-2600-4b62-98ec-2bef8df9a171",
    "category": "QA",
    "renderType": "md",
    "title": "typeof 与 instanceof 有什么区别",
    "desc": null,
    "options": null,
    "explanation": "## 一、typeof\n\n`typeof` 操作符返回一个字符串，表示未经计算的操作数的类型\n\n使用方法如下：\n\n```js\ntypeof operand\ntypeof(operand)\n```\n\n`operand`表示对象或原始值的表达式，其类型将被返回\n\n举个例子\n\n```js\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof null // 'object'\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console // 'object'\ntypeof console.log // 'function'\n```\n\n从上面例子，前6个都是基础数据类型。虽然`typeof null`为`object`，但这只是` JavaScript` 存在的一个悠久 `Bug`，不代表`null `就是引用数据类型，并且`null `本身也不是对象\n\n所以，`null `在 `typeof `之后返回的是有问题的结果，不能作为判断` null `的方法。如果你需要在 `if` 语句中判断是否为 `null`，直接通过`===null`来判断就好\n\n同时，可以发现引用类型数据，用`typeof`来判断的话，除了`function`会被识别出来之外，其余的都输出`object`\n\n如果我们想要判断一个变量是否存在，可以使用`typeof`：(不能使用`if(a)`， 若`a`未声明，则报错)\n\n```js\nif(typeof a != 'undefined'){\n    //变量存在\n}\n```\n\n\n\n## 二、instanceof\n\n`instanceof` 运算符用于检测构造函数的 `prototype` 属性是否出现在某个实例对象的原型链上\n\n使用如下：\n\n```js\nobject instanceof constructor\n```\n\n`object`为实例对象，`constructor`为构造函数\n\n构造函数通过`new`可以实例对象，`instanceof `能判断这个对象是否是之前那个构造函数生成的对象\n\n```js\n// 定义构建函数\nlet Car = function() {}\nlet benz = new Car()\nbenz instanceof Car // true\nlet car = new String('xxx')\ncar instanceof String // true\nlet str = 'xxx'\nstr instanceof String // false\n```\n\n关于`instanceof`的实现原理，可以参考下面：\n\n```js\nfunction myInstanceof(left, right) {\n    // 这里先用typeof来判断基础数据类型，如果是，直接返回false\n    if(typeof left !== 'object' || left === null) return false;\n    // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象\n    let proto = Object.getPrototypeOf(left);\n    while(true) {                  \n        if(proto === null) return false;\n        if(proto === right.prototype) return true;//找到相同原型对象，返回true\n        proto = Object.getPrototypeof(proto);\n    }\n}\n```\n\n也就是顺着原型链去找，直到找到相同的原型对象，返回`true`，否则为`false`\n\n\n\n## 三、区别\n\n`typeof`与`instanceof`都是判断数据类型的方法，区别如下：\n\n- `typeof`会返回一个变量的基本类型，`instanceof`返回的是一个布尔值\n\n- `instanceof` 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型\n- 而` typeof` 也存在弊端，它虽然可以判断基础数据类型（`null` 除外），但是引用数据类型中，除了` function` 类型以外，其他的也无法判断\n\n可以看到，上述两种方法都有弊端，并不能满足所有场景的需求\n\n如果需要通用检测数据类型，可以采用`Object.prototype.toString`，调用该方法，统一返回格式`“[object Xxx]” `的字符串\n\n如下\n\n```js\nObject.prototype.toString({})       // \"[object Object]\"\nObject.prototype.toString.call({})  // 同上结果，加上call也ok\nObject.prototype.toString.call(1)    // \"[object Number]\"\nObject.prototype.toString.call('1')  // \"[object String]\"\nObject.prototype.toString.call(true)  // \"[object Boolean]\"\nObject.prototype.toString.call(function(){})  // \"[object Function]\"\nObject.prototype.toString.call(null)   //\"[object Null]\"\nObject.prototype.toString.call(undefined) //\"[object Undefined]\"\nObject.prototype.toString.call(/123/g)    //\"[object RegExp]\"\nObject.prototype.toString.call(new Date()) //\"[object Date]\"\nObject.prototype.toString.call([])       //\"[object Array]\"\nObject.prototype.toString.call(document)  //\"[object HTMLDocument]\"\nObject.prototype.toString.call(window)   //\"[object Window]\"\n```\n\n了解了`toString`的基本用法，下面就实现一个全局通用的数据类型判断方法\n\n```js\nfunction getType(obj){\n  let type  = typeof obj;\n  if (type !== \"object\") {    // 先进行typeof判断，如果是基础数据类型，直接返回\n    return type;\n  }\n  // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果\n  return Object.prototype.toString.call(obj).replace(/^\\[object (\\S+)\\]$/, '$1'); \n}\n```\n\n使用如下\n\n```js\ngetType([])     // \"Array\" typeof []是object，因此toString返回\ngetType('123')  // \"string\" typeof 直接返回\ngetType(window) // \"Window\" toString返回\ngetType(null)   // \"Null\"首字母大写，typeof null是object，需toString来判断\ngetType(undefined)   // \"undefined\" typeof 直接返回\ngetType()            // \"undefined\" typeof 直接返回\ngetType(function(){}) // \"function\" typeof能判断，因此首字母小写\ngetType(/123/g)      //\"RegExp\" toString返回\n```",
    "level": 1.5,
    "status": 2,
    "appId": 7,
    "createAt": "2021-07-03T13:52:37.000Z",
    "updateAt": "2024-01-24T17:35:50.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 160,
    "prev": "305a1520-b7df-4c05-a72b-a18c165250de",
    "next": "82a3da79-23fb-42be-8f4b-9d52fc595954"
  },
  "post": {
    "exerciseKey": "4354687c-2600-4b62-98ec-2bef8df9a171",
    "category": "QA",
    "title": "typeof 与 instanceof 有什么区别",
    "level": 1.5,
    "updateAt": "2024-01-24T17:35:50+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}