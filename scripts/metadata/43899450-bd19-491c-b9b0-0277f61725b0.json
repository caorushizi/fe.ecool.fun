{
  "data": {
    "id": 1796,
    "exerciseKey": "43899450-bd19-491c-b9b0-0277f61725b0",
    "category": "QA",
    "renderType": "md",
    "title": "最小的k个数",
    "desc": "输入整数数组 `arr` ，找出其中最小的 `k` 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。\n\n**示例 1：**\n\n**输入：** arr = [3,2,1], k = 2\n\n**输出：** [1,2] 或者 [2,1]\n\n**示例 2：**\n\n**输入：** arr = [0,1,2,1], k = 1\n\n**输出：** [0]\n\n**限制：**\n\n* `0 <= k <= arr.length <= 10000`\n* `0 <= arr[i] <= 10000`\n\n```js\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nvar getLeastNumbers = function(arr, k) {\n\n};\n```",
    "options": null,
    "explanation": "\n## 题目分析\n\n虽然这题在 leetcode 上标注的「简单」，但是本题还是很有研究意义的。本文介绍了 3 种解法，时间复杂度依次降低，都是基于经典的算法或者数据结构。\n\n## 解法 1: 直接排序\n\n先说最简单、最直观的做法：直接排序。将数组按照从小到大的顺序排序，并且返回前 k 个数字。代码实现如下：\n\n```javascript\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nvar getLeastNumbers = function(arr, k) {\n    return arr.sort((a, b) => a - b).slice(0, k);\n};\n```\n\n使用高级排序（代码用的是快排），时间复杂度是`O(NlogN)`，空间复杂度是`O(logN)`。\n\n## 解法 2: 最大堆\n\n堆是一种非常常用的数据结构。最大堆的性质是：节点值大于子节点的值，堆顶元素是最大元素。利用这个性质，整体的算法流程如下：\n\n-   创建大小为 k 的最大堆\n-   将数组的前 k 个元素放入堆中\n-   从下标 k 继续开始依次遍历数组的剩余元素：\n    -   如果元素小于堆顶元素，那么取出堆顶元素，将当前元素入堆\n    -   如果元素大于/等于堆顶元素，不做操作\n\n由于堆的大小是 K，空间复杂度是`O(K)`，时间复杂度是`O(NlogK)`。\n\n由于 JavaScript 中没有堆，所以需要手动实现。代码如下：\n\n```javascript\nfunction swap(arr, i, j) {\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\nclass MaxHeap {\n    constructor(arr = []) {\n        this.container = [];\n        if (Array.isArray(arr)) {\n            arr.forEach(this.insert.bind(this));\n        }\n    }\n\n    insert(data) {\n        const { container } = this;\n\n        container.push(data);\n        let index = container.length - 1;\n        while (index) {\n            let parent = Math.floor((index - 1) / 2);\n            if (container[index] <= container[parent]) {\n                break;\n            }\n            swap(container, index, parent);\n            index = parent;\n        }\n    }\n\n    extract() {\n        const { container } = this;\n        if (!container.length) {\n            return null;\n        }\n\n        swap(container, 0, container.length - 1);\n        const res = container.pop();\n        const length = container.length;\n        let index = 0,\n            exchange = index * 2 + 1;\n\n        while (exchange < length) {\n            // 如果有右节点，并且右节点的值大于左节点的值\n            let right = index * 2 + 2;\n            if (right < length && container[right] > container[exchange]) {\n                exchange = right;\n            }\n            if (container[exchange] <= container[index]) {\n                break;\n            }\n            swap(container, exchange, index);\n            index = exchange;\n            exchange = index * 2 + 1;\n        }\n\n        return res;\n    }\n\n    top() {\n        if (this.container.length) return this.container[0];\n        return null;\n    }\n}\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nvar getLeastNumbers = function(arr, k) {\n    const length = arr.length;\n    if (k >= length) {\n        return arr;\n    }\n\n    const heap = new MaxHeap(arr.slice(0, k));\n    for (let i = k; i < length; ++i) {\n        if (heap.top() > arr[i]) {\n            heap.extract();\n            heap.insert(arr[i]);\n        }\n    }\n    return heap.container;\n};\n```\n\n## 解法 3: 基于快速排序的 partition\n\n解法 1 中使用了快速排序，但其实并需要对全部元素进行排序，题目只需要前 k 个元素。\n\n回顾快速排序中的 partition 操作，可以将元素`arr[0]`放入排序后的正确位置，并且返回这个位置`index`。利用 partition 的特点，算法流程如下：\n\n-   如果`index = k`，说明第 k 个元素已经放入正确位置，返回前 k 个元素\n-   如果`k < index`，前 k 个元素在`[left, index - 1]`之间，缩小查找范围，继续查找\n-   如果`index < k`，前 k 个元素在`[index + 1, right]` 之间，缩小查找范围，继续查找\n\n为了方便理解，可以使用`2, 8, 1, 1, 0, 11, -1, 0`这个例子在纸上画一下过程。\n\n代码实现如下：\n\n```javascript\n/**\n *\n * @param {number[]} arr\n * @param {number} start\n * @param {number} end\n * @return {number}\n */\nfunction partition(arr, start, end) {\n    const k = arr[start];\n    let left = start + 1,\n        right = end;\n    while (1) {\n        while (left <= end && arr[left] <= k) ++left;\n        while (right >= start + 1 && arr[right] >= k) --right;\n\n        if (left >= right) {\n            break;\n        }\n\n        [arr[left], arr[right]] = [arr[right], arr[left]];\n        ++left;\n        --right;\n    }\n    [arr[right], arr[start]] = [arr[start], arr[right]];\n    return right;\n}\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\nvar getLeastNumbers = function(arr, k) {\n    const length = arr.length;\n    if (k >= length) return arr;\n    let left = 0,\n        right = length - 1;\n    let index = partition(arr, left, right);\n    while (index !== k) {\n        if (index < k) {\n            left = index + 1;\n            index = partition(arr, left, right);\n        } else if (index > k) {\n            right = index - 1;\n            index = partition(arr, left, right);\n        }\n    }\n\n    return arr.slice(0, k);\n};\n```\n\n时间复杂度是`O(N)`，空间复杂度是`O(N)`。\n",
    "level": 1,
    "status": 2,
    "appId": 7,
    "createAt": "2022-05-11T01:11:12.000Z",
    "updateAt": "2022-05-11T09:11:14.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 545,
    "prev": "be6669ec-4d94-4c6a-9fc9-1b243e6ea777",
    "next": "d4b6e13e-5036-4231-bf64-dae0fd27b849"
  },
  "post": {
    "exerciseKey": "43899450-bd19-491c-b9b0-0277f61725b0",
    "category": "QA",
    "title": "最小的k个数",
    "level": 1,
    "updateAt": "2022-05-11T09:11:14+00:00"
  },
  "tag": {
    "id": 31,
    "tagName": "leetcode",
    "type": "1",
    "exerciseCount": 37
  }
}