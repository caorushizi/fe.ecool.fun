{
  "data": {
    "id": 1846,
    "exerciseKey": "914e2cac-b426-467e-b61c-e0987031ea84",
    "category": "QA",
    "renderType": "md",
    "title": "遍历数组的方式有哪些？",
    "desc": null,
    "options": null,
    "explanation": "## 数组遍历的方法\n\n### for\n\n**标准的for循环语句，也是最传统的循环语句**\n\n```js\nvar arr = [1,2,3,4,5]\nfor(var i=0;i<arr.length;i++){\n  console.log(arr[i])\n}\n```\n\n最简单的一种遍历方式，也是使用频率最高的，性能较好，但还能优化\n\n**优化版for循环语句**\n\n```js\nvar arr = [1,2,3,4,5]\nfor(var i=0,len=arr.length;i<len;i++){\n  console.log(arr[i])\n}\n```\n\n使用临时变量，将长度缓存起来，避免重复获取数组长度，尤其是当数组长度较大时优化效果才会更加明显。\n\n**这种方法基本上是所有循环遍历方法中性能最高的一种**\n\n### forEach\n\n**普通forEach**\n\n对数组中的每一元素运行给定的函数,没有返回值，常用来遍历元素\n\n```js\nvar arr5 = [10,20,30]\nvar result5 = arr5.forEach((item,index,arr)=>{\n    console.log(item)\n})\nconsole.log(result5)\n/*\n10\n20\n30\nundefined   该方法没有返回值\n*/\n```\n\n**数组自带的foreach循环，使用频率较高，实际上性能比普通for循环弱**\n\n**原型forEach**\n\n由于foreach是Array型自带的，对于一些非这种类型的，无法直接使用(如NodeList)，所以才有了这个变种，使用这个变种可以让类似的数组拥有foreach功能。\n\n```js\nconst nodes = document.querySelectorAll('div')\nArray.prototype.forEach.call(nodes,(item,index,arr)=>{\n  console.log(item)\n})\n```\n\n**实际性能要比普通foreach弱**\n\n### for...in\n\n任意顺序遍历一个对象的除[Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)以外的[可枚举](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)属性，包括继承的可枚举属性。\n\n一般常用来遍历对象，包括非整数类型的名称和继承的那些原型链上面的属性也能被遍历。像 Array和 Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性就不能遍历了.\n\n```js\nvar arr = [1,2,3,4,5]\nfor(var i in arr){\n  console.log(i,arr[i])\n}  //这里的i是对象属性，也就是数组的下标\n/**\n0 1\n1 2\n2 3\n3 4\n4 5 **/\n```\n\n**大部分人都喜欢用这个方法，但它的性能却不怎么好**\n\n### for...of（不能遍历对象）\n\n> 在可迭代对象（具有 iterator 接口）（Array，Map，Set，String，arguments）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句，不能遍历对象\n\n```js\nlet arr=[\"前端\",\"面试题宝典\",\"真好用\"];\n    for (let item of arr){\n        console.log(item)\n    }\n\n//遍历对象\nlet person={name:\"前端面试题宝典\",age:18,city:\"上海\"}\nfor (let item of person){\n  console.log(item)\n}\n// 我们发现它是不可以的 我们可以搭配Object.keys使用\nfor(let item of Object.keys(person)){\n    console.log(person[item])\n}\n// 南玖 18 上海\n```\n\n这种方式是es6里面用到的，性能要好于forin，但仍然比不上普通for循环\n\n### map\n\n> map: 只能遍历数组，不能中断，返回值是修改后的数组。\n\n```js\nlet arr=[1,2,3];\nconst res = arr.map(item=>{\n  return item+1\n})\nconsole.log(res) //[2,3,4]\nconsole.log(arr) // [1,2,3]\n```\n\n### every\n\n对数组中的每一运行给定的函数，如果该函数对每一项都返回true,则该函数返回true\n\n````js\nvar arr = [10,30,25,64,18,3,9]\nvar result = arr.every((item,index,arr)=>{\n      return item>3\n})\nconsole.log(result)  //false\n````\n\n### some\n\n对数组中的每一运行给定的函数，如果该函数有一项返回true,就返回true，所有项返回false才返回false\n\n````js\nvar arr2 = [10,20,32,45,36,94,75]\nvar result2 = arr2.some((item,index,arr)=>{\n    return item<10\n})\nconsole.log(result2)  //false\n````\n\n### reduce\n\n`reduce()`方法对数组中的每个元素执行一个由你提供的reducer函数（升序执行），将其结果汇总为单个返回值\n\n```js\nconst array = [1,2,3,4]\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n```\n\n### filter\n\n对数组中的每一运行给定的函数，会返回满足该函数的项组成的数组\n\n````js\n// filter  返回满足要求的数组项组成的新数组\nvar arr3 = [3,6,7,12,20,64,35]\nvar result3 = arr3.filter((item,index,arr)=>{\n    return item > 3\n})\nconsole.log(result3)  //[6,7,12,20,64,35]\n````\n\n## 性能测试\n\n### 工具测试\n\n使用工具测试[性能分析](http://tools.jb51.net/aideddesign/js_bianli)结果如下图所示\n\n![性能测试1.png](https://static.ecool.fun//article/c6bf85bb-2291-44b8-9bf1-702d01ebe074.jpeg)\n\n### 手动测试\n\n我们也可以自己用代码测试：\n\n```js\n//测试函数\nfunction clecTime(fn,fnName){\n        const start = new Date().getTime()\n        if(fn) fn()\n        const end = new Date().getTime()\n        console.log(`${fnName}执行耗时:${end-start}ms`)\n}\n\nfunction forfn(){\n  let a = []\n  for(var i=0;i<arr.length;i++){\n    // console.log(i)\n    a.push(arr[i])\n  }\n}\nclecTime(forfn, 'for')   //for执行耗时:106ms\n\nfunction forlenfn(){\n  let a = []\n  for(var i=0,len=arr.length;i<len;i++){\n    a.push(arr[i])\n  }\n}\nclecTime(forlenfn, 'for len')   //for len执行耗时:95ms\n\nfunction forEachfn(){\n  let a = []\n  arr.forEach(item=>{\n    a.push[item]\n  })\n}\nclecTime(forEachfn, 'forEach')   //forEach执行耗时:201ms\n\nfunction forinfn(){\n  let a = []\n  for(var i in arr){\n    a.push(arr[i])\n  }\n}\nclecTime(forinfn, 'forin') //forin执行耗时:2584ms (离谱)\n\nfunction foroffn(){\n  let a = []\n  for(var i of arr){\n    a.push(i)\n  }\n}\nclecTime(foroffn, 'forof') //forof执行耗时:221ms\n\n//  ...其余可自行测试\n```\n\n### 结果分析\n\n经过工具与手动测试发现，结果基本一致，数组遍历各个方法的速度：**传统的for循环最快，for-in最慢**\n\n> for-len `>` for ` > ` for-of ` > ` forEach  ` > ` map ` > ` for-in\n\n#### javascript原生遍历方法的建议用法：\n\n- 用`for`循环遍历数组\n- 用`for...in`遍历对象\n- 用`for...of`遍历类数组对象（ES6）\n- 用`Object.keys()`获取对象属性名的集合\n\n####  为何for… in会慢？\n\n因为`for … in`语法是第一个能够迭代对象键的JavaScript语句，循环对象键（{}）与在数组（[]）上进行循环不同，引擎会执行一些额外的工作来跟踪已经迭代的属性。因此不建议使用`for...in`来遍历数组",
    "level": 2,
    "status": 2,
    "appId": 7,
    "createAt": "2022-07-03T05:12:32.000Z",
    "updateAt": "2024-01-24T17:15:55.000Z",
    "updateUserId": 11,
    "isCollected": false,
    "currentIndex": 203,
    "prev": "1277e171-1422-40c6-89db-53d81036dc37",
    "next": "4cf47e01-92e5-4e04-ab83-f4eca1953e23"
  },
  "post": {
    "exerciseKey": "914e2cac-b426-467e-b61c-e0987031ea84",
    "category": "QA",
    "title": "遍历数组的方式有哪些？",
    "level": 2,
    "updateAt": "2024-01-24T17:15:55+00:00"
  },
  "tag": {
    "id": 10,
    "tagName": "JavaScript",
    "type": "1",
    "exerciseCount": 322
  }
}